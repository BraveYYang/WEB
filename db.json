{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/Image/image-20240724154237430.png","path":"Image/image-20240724154237430.png","modified":0,"renderable":0},{"_id":"source/Image/image-20240724154427037.png","path":"Image/image-20240724154427037.png","modified":0,"renderable":0},{"_id":"source/Image/image-20240724155135615.png","path":"Image/image-20240724155135615.png","modified":0,"renderable":0},{"_id":"source/Image/image-20240724161404111.png","path":"Image/image-20240724161404111.png","modified":0,"renderable":0},{"_id":"source/Image/image-20240724162639684.png","path":"Image/image-20240724162639684.png","modified":0,"renderable":0},{"_id":"source/Image/image-20240724153741084.png","path":"Image/image-20240724153741084.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1}],"Cache":[{"_id":"source/Image/image-20240724154427037.png","hash":"2f95444cbb2285a578131ce272065a1c1aea7af9","modified":1721814734880},{"_id":"source/Image/image-20240724154237430.png","hash":"98d3dee917bd9d23fbeb8260c9e5c08cf8c0eecc","modified":1721814723983},{"_id":"source/Image/image-20240724161404111.png","hash":"b3f3ba5f0832da3a250f777a0bde4726a95cae70","modified":1721814756308},{"_id":"source/_posts/Work No.1.md","hash":"f0332e7454e78aec2883df2ef1adcd3b5db73cdb","modified":1721987561100},{"_id":"source/Image/image-20240724153741084.png","hash":"f081610bccd4b7aeaa2f570adc438917765cc952","modified":1721806749091},{"_id":"source/_posts/Work No.4.md","hash":"371099d430ff807e8e0aade59f5421fdce39f693","modified":1721987574877},{"_id":"source/_posts/Work No.6.md","hash":"dd26654311dbdaae8543e0e55d64e456ed83adcf","modified":1721987602027},{"_id":"source/_posts/Work No.5.md","hash":"65c527f8adc769cd47f903ecd350adc5d02ffd86","modified":1721987589595},{"_id":"source/about/index.md","hash":"0d75ac7ef7eb986751e14f8f936adef22f6f1e83","modified":1721916938590},{"_id":"source/Image/image-20240724155135615.png","hash":"3feb9a270e960d70a209ad4edf77bdcc17e2aaf8","modified":1721814744251},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1702661414000},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1721916938590},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1721916938590},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1721916938590},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1721916938606},{"_id":"themes/fluid/README.md","hash":"8cb27280346eae05984de91f79562a38a7549398","modified":1721916938606},{"_id":"themes/fluid/README_en.md","hash":"d4b5e8505710ff96363be4cf6be0dbbe27db6d1c","modified":1721916938606},{"_id":"themes/fluid/_config.yml","hash":"ec70181323b424f39b5dbf554ab06b404288153d","modified":1721916938606},{"_id":"themes/fluid/package.json","hash":"3138d23e7d9b23ef758818bb903d0c7f96f6fec1","modified":1721916938638},{"_id":"themes/fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1721916938606},{"_id":"themes/fluid/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1721916938606},{"_id":"themes/fluid/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1721916938606},{"_id":"themes/fluid/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1721916938606},{"_id":"themes/fluid/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1721916938606},{"_id":"themes/fluid/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1721916938606},{"_id":"themes/fluid/languages/ru.yml","hash":"02d8ad186a2d52c20b76b35f406a728c6486f820","modified":1721916938606},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1721916938606},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"ac4a812679df9550cda05295149a3f329af21d7e","modified":1721916938606},{"_id":"themes/fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1721916938622},{"_id":"themes/fluid/layout/404.ejs","hash":"c49974dcbda02fe720498398e9778826335459c0","modified":1721916938617},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1721916938606},{"_id":"themes/fluid/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1721916938622},{"_id":"themes/fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1721916938622},{"_id":"themes/fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1721916938622},{"_id":"themes/fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1721916938638},{"_id":"themes/fluid/layout/index.ejs","hash":"dde1f6a27c8d09c38850a691089937f181b6c035","modified":1721916938638},{"_id":"themes/fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1721916938638},{"_id":"themes/fluid/layout/post.ejs","hash":"c8da695dc1b01b715909ae6f1052ccaebdf9db4c","modified":1721916938638},{"_id":"themes/fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1721916938638},{"_id":"themes/fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1721916938638},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1721916938638},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"fc31c7c6692424af1e08cd5e273a5a5814f9c577","modified":1721916938606},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1721916938606},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1721916938606},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1721916938606},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1721916938606},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1721916938606},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1721916938617},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1721916938606},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1721916938606},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"1ce9094faec6204949cdaf604aaf9200787e4218","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1721916938622},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1721916938606},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"0289f61834fd21a8f958f8e18b395a989b285682","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1721916938622},{"_id":"themes/fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1721916938669},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1721916938622},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1721916938669},{"_id":"themes/fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1721916938669},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1721916938669},{"_id":"themes/fluid/source/js/color-schema.js","hash":"87f6d16dd685da56982925798e12b47d056e9e6e","modified":1721916938669},{"_id":"themes/fluid/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1721916938669},{"_id":"themes/fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1721916938669},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1721916938669},{"_id":"themes/fluid/source/js/events.js","hash":"fc94b4d640a1440fd9a5a46342971b42aa0fa3f6","modified":1721916938669},{"_id":"themes/fluid/source/js/local-search.js","hash":"491021125d2579e841c83f36d3ab790d1eab9d1e","modified":1721916938669},{"_id":"themes/fluid/source/js/plugins.js","hash":"753c2cf95f2659fef80277b895f4da10c8888c72","modified":1721916938669},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1721916938669},{"_id":"themes/fluid/source/js/utils.js","hash":"9d0423db40a787f3b19968205b9ed92a848c9153","modified":1721916938669},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1721916938638},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"67637461e3f94f9e9675369eb7ff015355d9ec54","modified":1721916938638},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1721916938638},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1702661414000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1702661414000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1702661414000},{"_id":"themes/fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1721916938638},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1702661414000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"3550976efc94500284795f13485f5a1765fc120b","modified":1721916938638},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"3fb72d3c2224c32d861a6e8a85e78a8b67e6a244","modified":1721916938638},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"33427308ca29f1d76336c83e704571c9de75df02","modified":1721916938638},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"14a207a7d4e329382ab5d4e1da1ef85ff043daba","modified":1721916938638},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1721916938638},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1721916938638},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1721916938638},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1721916938638},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1721916938638},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1721916938638},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1721916938638},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1721916938638},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"f57be245e6e7228673e1dec3a3477e731492c5c1","modified":1721916938638},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"0bb33314aa5cfe326ab9bb14b545e343e4db4193","modified":1721916938638},{"_id":"themes/fluid/scripts/tags/fold.js","hash":"a93e2603021ad38714e870399767bea24e7cbe3e","modified":1721916938638},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"0a883fd4834db4c070bbe5f07bb3f3599d01f3d6","modified":1721916938638},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e300ec4ee6c63464859ab000e987bf8dd7db4025","modified":1721916938653},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1721916938653},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1721916938653},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1721916938653},{"_id":"themes/fluid/scripts/utils/crypto.js","hash":"474b00a57f43dbe7bc2876d637ece4214d016c06","modified":1721916938653},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1721916938653},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1721916938653},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1721916938653},{"_id":"themes/fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1721916938653},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"d400e5721af28cefecaf50b46c82dcdde4cda4a8","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1721916938617},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"938eb60413ae8af83ffeaba4d85df88387cdd5be","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"e5219b14410066bf8ab491379aca797304b4a914","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"6e0f0095e1cb1c0d89b6697ebcd33656b4e3e14c","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"018cab52ff696a6c78ebc01e10237a90a0c33603","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"110e45e2d3433178f00f482adc863110f90c46d6","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/moment.ejs","hash":"acc72c3284fe906a4505132c3d9a4720d80e6fcb","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"e026955c454ec57bbbb7e9b7d800db90564fc6af","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"42850952e8f5858497fe774c2aff87b6563ab01e","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"1b1eb4c8e163a5d909e86da76ef778948e0e0b77","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"f0cb813cd03642c9b68cff8b6669f73a61dd10f8","modified":1721916938622},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1721916938622},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1721916938653},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1721916938653},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1721916938669},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1721916938669},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"9b1934c61dc78622a07da554413f6ad31854576d","modified":1721916938638},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1721916938638},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1721916938638},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"da987411ae4a4e6896a9b8af1fce6209192af28e","modified":1721916938638},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"d103e4bf612b2445bb136712d57b81e784a313e2","modified":1721916938638},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1721916938638},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1721916938638},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1721916938653},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"bac20c8fb20276b08972df5ecc7a5850a72393f4","modified":1721916938669},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"66d5b045c0e54001d3c98c5901d72590fe08acc4","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"571bd018e914bd0f7c5f89df874b5937937e5fa6","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1721916938669},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1721916938653},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1721916938669},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"adbb056bbcbdefecec441e5444c30c5777b5e2ae","modified":1721916938669},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1721916938669},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"31c64c3fae4a0fc4747d8afeb72f7a9667c5326c","modified":1721916938669},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1721916938669},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1721916938669},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1721916938653},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1721916938653},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1721916938653},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1721916938653},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1721916938653},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1721916938653},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1721916938653},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"5563abb10a40e2f8ece8e521763fe67c6e6bc12b","modified":1721916938653},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1721916938663},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1721916938663},{"_id":"source/Image/image-20240724162639684.png","hash":"2d2977ccaebb8f224bef769a56afd8e462aec7cf","modified":1721814767986},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1702661414000},{"_id":"public/local-search.xml","hash":"5a77a98bb17a8cfb22423283340a9f58f78de084","modified":1721987715924},{"_id":"public/about/index.html","hash":"7a479ffacc01f77606fee3f77ac0db1b9261f6d8","modified":1721919440186},{"_id":"public/2024/07/25/Work No.6/index.html","hash":"4cd31c8f6314405f759e1715bf44f42a2dc61029","modified":1721919440186},{"_id":"public/2024/07/25/Work No.5/index.html","hash":"ac34e590aecec15179b0e2e800aec013384ec57a","modified":1721919440186},{"_id":"public/2024/07/25/Work No.4/index.html","hash":"73b30711be2edbf721522964d78bc92ee5e00885","modified":1721919440186},{"_id":"public/2024/07/25/Work No.1/index.html","hash":"95c02f4d326d6f52e299a33ebadbb5ae2f6e0d64","modified":1721919440186},{"_id":"public/tags/Gcode/index.html","hash":"282f0452c9d6a3da14023913794d3cd0f04ff291","modified":1721987715924},{"_id":"public/tags/Linux/index.html","hash":"a4cb8714a70f1faf22612b728f09211c49df1b2e","modified":1721987715924},{"_id":"public/tags/Github/index.html","hash":"d0c2d45db7c2c4035aff14b393f7d5b1f19219ef","modified":1721890511730},{"_id":"public/tags/git/index.html","hash":"e81e90343893582db26a254382d79c84e666f157","modified":1721987715924},{"_id":"public/archives/index.html","hash":"9047ffbc4a92b87fdd3c1e9a772cf08e99bfbe5d","modified":1721987715924},{"_id":"public/archives/2024/index.html","hash":"7367a37707d53143bcb20de0ca75f30d39101df8","modified":1721987715924},{"_id":"public/archives/2024/07/index.html","hash":"3e0da2d7d76c099e62c75a6e91f33d4f9a22eae8","modified":1721987715924},{"_id":"public/index.html","hash":"ac9d44ac04d9c7798562da225f45e296f2f54856","modified":1721987715924},{"_id":"public/404.html","hash":"b469588c543456599dd04ddd178ec9b3393fdb9f","modified":1721919440186},{"_id":"public/tags/index.html","hash":"d534af524d2081d22398e1e0f08ecc4d3aa2def8","modified":1721987027125},{"_id":"public/categories/index.html","hash":"1da0aa575de4484f1c077b688f123382c8d0efb7","modified":1721987715924},{"_id":"public/links/index.html","hash":"6a83c0cc1d75473f9b47efb6c94e269afc2e15c5","modified":1721919440186},{"_id":"public/Image/image-20240724154427037.png","hash":"2f95444cbb2285a578131ce272065a1c1aea7af9","modified":1721879899348},{"_id":"public/Image/image-20240724154237430.png","hash":"98d3dee917bd9d23fbeb8260c9e5c08cf8c0eecc","modified":1721879899348},{"_id":"public/Image/image-20240724161404111.png","hash":"b3f3ba5f0832da3a250f777a0bde4726a95cae70","modified":1721879899348},{"_id":"public/Image/image-20240724153741084.png","hash":"f081610bccd4b7aeaa2f570adc438917765cc952","modified":1721879899348},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1721919440186},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1721879899348},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1721879899348},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1721879899348},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1721879899348},{"_id":"public/Image/image-20240724155135615.png","hash":"3feb9a270e960d70a209ad4edf77bdcc17e2aaf8","modified":1721879899348},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1721879899348},{"_id":"public/css/main.css","hash":"dd5b6b89a31414b60b304cd465fc381171a0430e","modified":1721879899348},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1721879899348},{"_id":"public/js/color-schema.js","hash":"c5939d14065d38c86e16d1642e154dde5a23e830","modified":1721879899348},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1721879899348},{"_id":"public/css/highlight-dark.css","hash":"b6054db41ada8e006a249a2e78c42cc824e6e195","modified":1721879899348},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1721879899348},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1721879899348},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1721879899348},{"_id":"public/js/events.js","hash":"5891534506b959a2f559f29e122baa3eb9159d93","modified":1721879899348},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1721879899348},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1721879899348},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1721879899348},{"_id":"public/Image/image-20240724162639684.png","hash":"2d2977ccaebb8f224bef769a56afd8e462aec7cf","modified":1721879899348},{"_id":"public/categories/Linux/index.html","hash":"aee446fca504296796b02fd766f929c018e6d5ee","modified":1721987715924},{"_id":"public/categories/3D打印机/index.html","hash":"87e227a22187e419dbc66c17906e98771ec7504b","modified":1721987715924},{"_id":"public/categories/Github/index.html","hash":"9da69da74355809f31ada3bbed452d22082679b4","modified":1721987715924},{"_id":"public/categories/Git/index.html","hash":"e05af49df304f3926597e3277ff7b1c58dba754d","modified":1721987715924},{"_id":"source/_posts/20231204ZYY-Markdown用法.md","hash":"9f16c5501464cccf28b98e7f19bb1a05d36cd22a","modified":1721987532938},{"_id":"source/_posts/20231204ZYY-如何制作一份优秀的路演PPT.md","hash":"18ae24b9c161b870022686122deed502e2c39f46","modified":1721987631964},{"_id":"source/_posts/20231204ZYY-文献检索.md","hash":"49b09eee89ef36fd2a9072ec8e87731ac2154b3a","modified":1721987637476},{"_id":"source/_posts/20231204ZYY-电气路设计.md","hash":"c8e311e7ebb17d7972cf83ed16488aa5e5bf0d0b","modified":1721987626555},{"_id":"source/_posts/20240201ZYY-控制工程学习笔记.md","hash":"05637db2291da7b0f36bc6b9ef9a4c1755c44a19","modified":1721987654469},{"_id":"source/_posts/20240319ZYY-FOC无刷电机控制.md","hash":"9ff168edbb7209c01c23c0a497779a9657fbb0ec","modified":1721987670133},{"_id":"source/_posts/20240529ZYY-1_TCP通信.md","hash":"41254aac65d660cdc545a350faf56ca125509056","modified":1721987693669},{"_id":"source/_posts/20240429ZYY-Hi3861开发.md","hash":"41a3fa7181c93af24a19aa3bf0144bdebdff6ca3","modified":1721987697206},{"_id":"public/archives/page/2/index.html","hash":"36e32e2a1a3ba2db8d61806e7cc24ba1c0c98e3d","modified":1721987715924},{"_id":"public/archives/2024/page/2/index.html","hash":"c1fd4f5ab09585b9a27d913e643b1072c7c616b7","modified":1721987027125},{"_id":"public/archives/2024/07/page/2/index.html","hash":"648fea6e4e2343260aa848b974551ca6e8b0869b","modified":1721987027125},{"_id":"public/categories/信息检索/index.html","hash":"c484628e829ec36f49eca9d50d351140a2dff92b","modified":1721987715924},{"_id":"public/page/2/index.html","hash":"ce2946e4bbcc36beed73728c7d8a575e9b16e363","modified":1721987715924},{"_id":"public/categories/路演文书/index.html","hash":"f481450cbd6cc41df617165b754d6d0216fc6789","modified":1721987715924},{"_id":"public/tags/文献检索/index.html","hash":"8218f2a419c51e96c42c5326094a860913e4d9c7","modified":1721987715924},{"_id":"public/categories/控制设计/index.html","hash":"67add8dfd282b1d72e47b41a0c19901e7fe54af1","modified":1721987715924},{"_id":"public/tags/Markdown/index.html","hash":"28908ba0dd318903f81f652154ad00cecacf4d9e","modified":1721987715924},{"_id":"public/tags/PPT/index.html","hash":"18459258d4ee9ae54a22122f2cb1a682e3cac7d7","modified":1721987715924},{"_id":"public/categories/单片机/index.html","hash":"867a7a4f72b037248f108438505bdb7d1ae3b96d","modified":1721987715924},{"_id":"public/tags/控制工程/index.html","hash":"21e252bfc3394cb0240b9e848ca80ba7c8dad2ff","modified":1721987715924},{"_id":"public/tags/控制设计/index.html","hash":"da99f6d060a65049b9198154c0b1498e54cc3b45","modified":1721987715924},{"_id":"public/tags/Hi3861/index.html","hash":"89b151e203290c164fb7a0942844e9c00ae09cb6","modified":1721987715924},{"_id":"public/tags/无刷电机控制/index.html","hash":"0fd5d1f9e6d53f4ce38befb7f5c909c19e24f2ca","modified":1721987715924},{"_id":"public/2024/07/25/20240319ZYY-FOC无刷电机控制/index.html","hash":"4bbec52be45b30cc874e54725b1b46bdbf2136dc","modified":1721987027125},{"_id":"public/2024/07/25/20240529ZYY-1_TCP通信/index.html","hash":"3de7b884fd6cd071755c7b6a754a708ee8e98bf8","modified":1721956507155},{"_id":"public/2024/07/25/20240429ZYY-Hi3861开发/index.html","hash":"b2425fd55e1fafc981b089208d6ff7c99a7c3fc5","modified":1721956507155},{"_id":"public/2024/07/25/20231204ZYY-文献检索/index.html","hash":"3fe2f42376ca24677bdaeb1dc56aca19777d7e56","modified":1721956507155},{"_id":"public/2024/07/25/20231204ZYY-Markdown用法/index.html","hash":"8813a872efe870094a10bbeac64ddce78a8849b5","modified":1721956507155},{"_id":"public/2024/07/25/20240201ZYY-控制工程学习笔记/index.html","hash":"557c2f72713bfdcefb4d33634f7af2e9c5c4e1f9","modified":1721956507155},{"_id":"public/2024/07/25/20231204ZYY-如何制作一份优秀的路演PPT/index.html","hash":"711eaa09b63aca5476cd1ab83625642b737c95b9","modified":1721956507155},{"_id":"public/2024/07/25/20231204ZYY-电气路设计/index.html","hash":"f00ee9bf61a82991a16113d70036553a983feb46","modified":1721956507155},{"_id":"public/tags/Github-Pages/index.html","hash":"382b24b5916915c3a7a4ea5282c282a8a365f315","modified":1721987715924},{"_id":"public/tags/TCP/index.html","hash":"87b20a0d02cf57971094b95bd4ada7818c754370","modified":1721987715924},{"_id":"source/_posts/Work No.7.md","hash":"d22bfa14fe255fbdcf36b94f79f22547ac54a187","modified":1721987610980},{"_id":"public/2024/07/26/Work No.7/index.html","hash":"2965b7675e5dc0f264114a6bc41b5e046e329aa5","modified":1721987715924},{"_id":"public/tags/3D打印机/index.html","hash":"33366cd0c7da3ffeff10cfac18c1c9e38b9ea223","modified":1721987027125},{"_id":"public/2024/07/24/Work No.4/index.html","hash":"655240dd2382336706ee7999ae696a7d0264909a","modified":1721987715924},{"_id":"public/2024/05/17/20240429ZYY-Hi3861开发/index.html","hash":"6d29587036db11e12f1ea141e15d520565d27eac","modified":1721987715924},{"_id":"public/2024/04/15/20240319ZYY-FOC无刷电机控制/index.html","hash":"de15775d76c6ddbc0be6edb5234ae404c3224d4c","modified":1721987715924},{"_id":"public/2024/01/26/20240201ZYY-控制工程学习笔记/index.html","hash":"8f18497d070f4469b85da1710cc4ee14d46fafde","modified":1721987715924},{"_id":"public/2024/07/09/Work No.1/index.html","hash":"ab95abf0e2d1607ab5650d7320d8b5cca229d726","modified":1721987715924},{"_id":"public/2023/11/30/20231204ZYY-Markdown用法/index.html","hash":"547bd4bd0c1d1f4aad04292bde0f4f4565c1ee28","modified":1721987715924},{"_id":"public/2023/11/26/20231204ZYY-电气路设计/index.html","hash":"2d95f0ace4bd6d6236e1e217e40504ff85a05f86","modified":1721987715924},{"_id":"public/2023/11/10/20231204ZYY-如何制作一份优秀的路演PPT/index.html","hash":"4656ea45846f51f0245cb765dfe61805e6faca91","modified":1721987715924},{"_id":"public/2024/07/23/Work No.6/index.html","hash":"b7c2e5e98a0b9fe3f22715adbf4aadd06986c42f","modified":1721987715924},{"_id":"public/2023/05/27/20240529ZYY-1_TCP通信/index.html","hash":"52b63282e1b4a2f97b2d1676d3f0c61051ac3e33","modified":1721987715924},{"_id":"public/2024/07/19/Work No.5/index.html","hash":"782387dc0374bbaa6a799ceb1496f1f14440d8d0","modified":1721987715924},{"_id":"public/2023/10/26/20231204ZYY-文献检索/index.html","hash":"1eb4269ebf1b353be71bcddfe8faa1a0a7c0b1a4","modified":1721987715924},{"_id":"public/archives/2023/index.html","hash":"fcdad7211dca222fb11e07825b54305a9cd067e8","modified":1721987715924},{"_id":"public/archives/2023/05/index.html","hash":"e9d6ceed711129cc70825beebec29431195c803f","modified":1721987715924},{"_id":"public/archives/2023/10/index.html","hash":"cef152c50628543d9fef6ccf8e55da5b9fc3755f","modified":1721987715924},{"_id":"public/archives/2023/11/index.html","hash":"5594fe97366acb01a163b2c59c01acdf026757ee","modified":1721987715924},{"_id":"public/archives/2024/01/index.html","hash":"ed79ab35797cd0f3adfd02ccf9442c7475bb983f","modified":1721987715924},{"_id":"public/archives/2024/04/index.html","hash":"bcd03a9e0632587b9bf248877b11e1f7a1167f08","modified":1721987715924},{"_id":"public/archives/2024/05/index.html","hash":"781a464c0a68412a86737284a24f15ba46a8664b","modified":1721987715924}],"Category":[{"name":"Linux","_id":"clz0w34yc0000tsfb2jlv3whz"},{"name":"C/C++","_id":"clz0w3gel0002tsfbb9eycl0d"},{"name":"3D打印机","_id":"clz0w3ssa0004tsfb4bef9efq"},{"name":"Git","_id":"clz0w44qh0006tsfbc8h19gdm"},{"name":"Github","_id":"clz0w4eeh0008tsfbetp1ej76"},{"name":"路演文书","_id":"clz1edk9m0002x8uwh0371u10"},{"name":"信息检索","_id":"clz1edk9r0007x8uwafu2fwi2"},{"name":"控制设计","_id":"clz1edk9x000hx8uw2npo8oww"},{"name":"单片机","_id":"clz1edka0000ux8uw3ncqf5f6"}],"Data":[],"Page":[{"title":"about","date":"2024-07-24T07:02:45.000Z","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-07-24 15:02:45\nlayout: about\n---\n","updated":"2024-07-25T14:15:38.590Z","path":"about/index.html","_id":"clz0qu1na0000rcfb397j9gxy","comments":1,"content":"","excerpt":"","more":""}],"Post":[{"title":"Gcode学习","date":"2024-07-23T16:00:00.000Z","_content":"\n# Gcode学习\n\n### 一、3D打印机编程\n\n### 学习资料\n\n[[G-Codes - Klipper 文档 (klipper3d.org)](https://www.klipper3d.org/zh/G-Codes.html)](https://www.klipper3d.org/zh/Overview.html)\n\n[G-code - RepRap](https://reprap.org/wiki/G-code)\n\n[3D 打印机 G 代码命令：完整列表和教程_3d打印机g代码-CSDN博客](https://blog.csdn.net/acktomas/article/details/125552309)\n\n[3D打印机DIY之六------G代码命令_g代码m300-CSDN博客](https://blog.csdn.net/qlexcel/article/details/103466638)\n\n### G指令\n\n#### G0/G1: 直线移动\n\nG0和G1命令完全等价，作用就是让喷头线性移动到一个特定的位置，使用时，不需要所有的参数全部存在，但至少要有一个参数。\n\nG0 Xnnn Ynnn Znnn Ennn Fnnn Snnn / G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn\n\nXnnn表示X轴的移动位置；\n\nYnnn表示Y轴的移动位置；\n\nZnnn表示Z轴的移动位置；\n\nEnnn表示E轴（挤出头步进电机）的移动位置；\n\nFnnn表示移动速度，单位是毫米/每分钟；\n\nSnnn表示是否检查限位开关，S0不检查，S1检查，缺省值是S0；\n\n#### G28：复位\n\n打印机复位命令。执行时会让3个轴依次往限位开关的方向运行，碰到限位开关后还会减速做一次1mm左右的往返运动，来保证复位的准确性。如果在命令后面加上坐标值，则只会复位坐标值对应的坐标轴。（坐标值的数字会被忽略）\n\nG28 X0 Y72.3\n\n只会复位x轴和y轴。\n\n#### G29：Z轴高度三点测试\n\n这条命令会测试打印平面上三个点的Z轴高度，并在串口上输出结果。参数为Snnn，表示对测试结果的处理方式。S1表示更新内存中的Z轴高度值（重置系统会丢失），S2表示更新内存以及EEPROM中的Z轴高度值（重置系统不会丢失）。\n\n一般来说，只有使用高位限位开关（也就是说，Z轴的限位开关位于Z轴坐标最大处），且在挤出头上附带有Z轴高度测试微动开关的机型，适合使用G29命令测试Z轴高度。其他机械配置的机型，不适合使用G29命令。G29命令由固件配置\n\n#### G30：Z轴高度单点测试（单步）\n\n这条命令作为一个完整Z轴高度测试过程的一步，测试打印平面上一个点的Z轴高度，并在串口上输出结果。这个完整的Z轴高度测试过程，通常是由3D打印机控制软件连续发出的，通过参数控制G30的执行状态。因此在手动工作方式下，G30命令只适合不带参数运行\n\n#### G31：输出Z轴高度测试微动开关状态\n\n执行后会输出当前Z轴高度测试微动开关的当前状态，其中L表示微动开关没有触发。如果是处于触发状态，这里会输出H。\n\nG29命令、G30命令、G31命令只进行Z轴的高度测试，并不进行自动调平。\n\n#### G32：热床自动调平\n\n这条命令在G29命令的基础上，不仅测试打印平面上三个点的Z轴高度，而且还会根据测试的结果，对3D打印机的机械参数进行调整，实现热床自动调平。G32命令使用的参数与G29命令是一致的：Snnn，表示测试结果的处理方式。S1表示更新内存中的相关参数值（重置系统会丢失），S2表示更新内存以及EEPROM中的相关参数值（重置系统不会丢失）。\n\nG32命令执行完成时，不仅Z轴高度参数发生了改变，而且还会根据3D打印机的硬件配置，对热床进行相应的调平处理。\n\nG32命令会在3D打印机内存中构建一个转换矩阵（Transformation matrix），让未来3D打印机所处理的所有三维空间位置，都先经过这个矩阵的变换，保证在Z=0的情况下，正好与热床平面完全吻合\n\n#### G4: 暂停移动\n\n让喷头在当前位置停留一段时间。参数可以为：G4 Pnnn或G4 Snnn。Pnnn表示以毫秒为单位，Snnn表示以秒为单位。\n\nG4 P2000与G4 S2完全等价，都表示停顿2秒。\n\n在停顿过程中机器仍可以被控制，如挤出头温度。\n\n#### G20:使用英寸作为单位\n\n执行这条命令后，后面的命令都以英寸作为单位。\n\n#### G21: 使用毫米作为单位\n\n执行这条命令后，后面的命令都以毫米作为单位。\n\n#### G90/G91：设置坐标模式\n\n这两条命令用于设置当前坐标模式为绝对坐标模式(G90)或者相对坐标模式(G91)。没有参数。未设置时缺省值是绝对坐标模式\n\n#### G92:设置当前位置为某个坐标值\n\n把当前位置设定为某个坐标值，可以用来设置零点，如果参数为空表示把当前位置设置为所有轴的的零点。\n\n如：G92 X10 E90    ;表示把当前位置设置为x=10，喷头坐标=90\n\n再如：G92 E0       ；表示把当前喷头坐标设置为0\n\n#### G94/G95:进给速率单位\n\n使用了G94指令之后，所有的进给都是以mm/min为单位，即F100指刀具每分钟移动100毫米（默认的）\n\n使用了G95指令之后，所有的进给都是以mm/r为单位，即F100指主轴每转一转，刀具移动100毫米\n\n#### G17/G18/G19：选择加工平面\n\nG17–XY平面；\n\nG18–XZ平面；\n\nG19–YZ平面；\n\n### M指令\n\n#### M0:打印机停止\n\n打印机会终止任何动作，然后关机。所有的电机和加热器都会被关掉，这个时候只能通过reset按钮来重启控制器。\n\n#### M1: 打印机休眠\n\n打印机会终止任何动作，然后休眠。所有的马达和加热器都会被关掉，但是接收到G或M命令时，打印机可以被唤醒并进入工作状态。\n\n#### M17:启动所有步进电机\n\n#### M18:关闭所有步进电机\n\n#### M20:读取SD卡根目录中的文件\n\n读取SD卡根目录的文件，并通过串口输出文件名。\n\n#### M21:初始化SD卡\n\n初始化SD卡。如果在机器通电时插入SD卡，会默认初始化SD卡。开始其他SD卡功能时，SD卡一定要先初始化。本命令相当于文件系统中执行Mount动作。\n\n#### M22:卸载SD卡\n\n卸载SD卡，也就是执行Unmount动作。没有相关的参数。\n\n#### M23:选择SD卡中的文件\n\n选择一个SD卡上的文件。文件选择之后，可以执行打印、删除等动作。\n\n如：M23 filename.gcode   ;选中filename.gcode文件\n\n#### M24:开始打印SD卡中选中的文件\n\n开始打印通过M23命令选中的文件。\n\n#### M25:暂停SD卡打印\n\n暂停打印通过M23命令选定的文件。\n\n#### M27:报告SD卡打印进度\n\n获取SD卡打印进度。没有相关参数。\n\nM27命令的输出，格式为：SD printing byte 11518/1127578\n\n这条命令供上位机获取当前的3D打印进度信息，用于显示在电脑界面上。\n\n#### M28:开始往SD卡文件中写入数据\n\n接收到此命令后，后续接收到的命令（除了M29）都会被当成数据写入该文件。\n\n命令后面会跟着文件名，如果文件不存在则会被创建，如果存在则会被覆盖。接收到这条命令后，后续接收到的命令都会被写入该文件中，直到接收到M29命令。如：M28 filename.gcode  \n\n#### M29:停止往SD卡文件中写入数据\n\n接收到此命令后，后续接收到的命令要开始正常执行。\n\n#### M30:删除SD卡中的文件\n\n如：M30 filename.gcode     ;删除filename.gcode文件\n\n#### M32：创建子目录\n\n在SD卡上创建一个子目录。参数为：filename，表示待创建的子目录（包含目录名，以/分隔）；\n\n#### M82/M83：设置挤出头步进电机坐标模式\n\n与G90/G91命令类似，这两条命令用于设置挤出头当前坐标模式为绝对坐标模式(M82)或者相对坐标模式(M83)。没有参数。未设置时缺省值是绝对坐标模式。需要注意的是，G90/G91设置的坐标模式，同时对XYZE四个轴起作用，但M82/M83设置的坐标模式，只对E轴（挤出头步进电机）起作用。\n\n#### M84：设置步进电机自动关闭时间\n\n当3D打印机一段时间没有接收到步进电机运动指令之后，3D打印机（为了节能）会自动关闭步进电机。使用M84指令，可以设置这个自动关闭步进电机的时间。\n\nSnnn，表示步进电机关闭的时间，以秒为单位。\n\n如果使用M85时没有指定S参数，或者使用了S0参数，则代表取消3D打印机自动关闭功能，挤出头、热床等在工作完成之后，一直会处于当前状态，而不会被自动关闭。\n\n#### M73：获取当前打印进度\n\n告诉固件当前的构建进度百分比。预计这台机器会在显示屏上显示出来。如果百分比恰好为0，则向主机发送“构建开始”通知。如果百分比恰好为100，则向主机发送“构建结束”通知。\n\n#### M105: 获取当前温度（单位：℃）\n\n获取当前温度值，包括挤出头和热床的温度。\n\nX，表示输出ADC测量的原始值；\n\nM105命令的输出，格式为：T:18.97 /0 B:18.75 /0 B@:0 @:0\n\nT:之后的部分，代表挤出头的当前温度/目标温度；\n\nB:之后的部分代表热床的当前温度/目标温度。\n\n在PID温度控制模式下，B@:后面的数字代表热床当前的输出强度，是一个0~255的值，@:后面的数字，代表挤出头当前的输出强度，也是一个0~255的值。例子中，挤出头、热床都处于关闭状态，所以这个位置的值都是0。\n\n#### M104:设置挤出机（喷头）温度\n\n设置挤出头的目标温度。执行这条命令后，不需要等待达到这个温度，控制板继续执行下一条G-code语句。\n\nSnnn，表示目标温度；\n\nTnnn，表示对应的挤出头；\n\nP，表示要等待前面的指令完成之后，再开始设置挤出头温度；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。F1表示要触发；\n\n如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。\n\n如：M104 S190         ;将挤出机的温度设置为190度 \n\n#### M106: 打开风扇\n\n如：M106 S127    ;打开风扇（半速）。\n\n'S'表示 PWM值 (0-255). 可简单理解为：风扇有0-255级强度可选，其中 M106 S0 意味着风扇将被关掉。\n\nP表示风扇的数目，P0是第一个风扇，P1是第二个风扇\n\n#### M109: 等待挤出头加热达到目标温度\n\n设置挤出头的目标温度，并等待达到这个温度。\n\nSnnn，表示目标温度；\n\nTnnn，表示对应的挤出头；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。如： M109 S185      ;等待挤出头加热到185度\n\n#### M114: 获取挤出头当前位置\n\n输出挤出头当前位置。没有相关的参数。\n\nM114命令的输出，格式为：\n\nM114 X:20.00 Y:30.00 Z:10.000 E:0.0000\n\n#### M115: 获取3D打印机信息\n\n输出3D打印机信息。没有相关的参数。\n\nM115命令的输出，格式为：FIRMWARE_NAME:Repetier_0.92.3FIRMWARE_URL:…Printedfilament:0.00mPrintingtime:0days0hours0minSpeedMultiply:100FlowMultiply:100\n\n第一行是固件的版本信息，很长，没有列完整。第二行是已经打印了多少米耗材，打印时间是几天几小时几分钟。第三行是速度系数，参考M220命令。第四行是流率系数，参考M221命令。\n\n#### M140 设置热床目标温度\n\n设置热床的目标温度。执行这条命令后，不需要等待达到这个温度，立即开始执行下一条G-code语句。\n\nSnnn表示目标温度；\n\nFnnn表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n#### M141:设置构建平台的温度\n\n可能用于特定的温控策略或多热床系统\n\nM141 S60将加热床设置为60摄氏度\n\n#### M190: 等待热床加热达到目标温度\n\n设置热床的目标温度，并等待达到这个温度。\n\nSnnn，表示目标温度；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n#### M204：设置PID参数\n\n设置挤出头温度控制的PID参数，\n\nSnnn表示对应的挤出头，无S参数表示使用当前挤出头；\n\nXnnn表示P参数；\n\nYnnn表示I参数；\n\nZnnn表示D参数；\n\n#### M220：设置速度\n\n设置3D打印机运行速度系数。\n\n命令参数为Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；\n\n3D打印机运行速度系数，是一个在25%到500%范围内变化的值。这个系数值在3D打印机运行过程中，与切片器给出的3D打印机运动速度基础值相乘，得到最终的3D打印机实际运动速度值。\n\nM220命令的输出，格式为：SpeedMultiply:100\n\n#### M221：设置流率\n\n设置3D打印机的流率系数（Flow rate）。\n\n命令参数为：Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；\n\n3D打印机流率系数，是在上位机切片软件通过耗材直径、喷头直径、层高以及3D打印速度等因素综合计算得到的E轴运动速度的基础上，叠加的一个E轴运动速度系数。简单地说，就是控制挤出头耗材挤出量的多少。这个系数可以在25%到500%范围内变化。\n\nM221命令的输出，格式为：FlowMultiply:100\n\n### T指令\n\n#### T0/T1/T2/T3 命令，选择不同的工具或挤出机\n\nT0 选择第一个挤出机；T1 选择第二个挤出机；T2 选择第三个挤出机；T3 选择第四个挤出机\n\n#### 节选注释\n\n```\nM106 P2 S204    //打开第三个风扇，PWM值为204\n;LAYER_CHANGE\n;Z:16.8\n;HEIGHT:0.199999\n;BEFORE_LAYER_CHANGE\n;16.8\nG92 E0    //设置喷头当前位置为零点\nM106 P2 S0    //关闭第二个风扇\n\nG1 E-.35 F2400  //挤出机回抽挤出0.35mm，速度设置为2400mm/min\n;WIPE_START\nG1 F9473.877    //速度设置为9473.877mm/min\nG1 X320.911 Y304.914 E-.11658    //直线插补，移动到（320.911，304.914）位置，并回抽0.11658\nG1 X321.066 Y304.753 E-.03342    //直线插补，移动到（321.066，304.753）位置，并回抽0.03342\n;WIPE_END\nEXCLUDE_OBJECT_END NAME=ksr_fdmtest_w4.stl_id_0_copy_0\n;_SET_FAN_SPEED_CHANGING_LAYER\nEXCLUDE_OBJECT_START NAME=ksr_fdmtest_w4.stl_id_0_copy_0\nG17    //选择XY平面\nG3 Z17 I.035 J-1.216 P1  F30000    //圆弧插补，Z轴位置为17mm，圆心坐标为（321.066+0.035，304.753-1.216）,P1表示为顺时针，速度为30000mm/min\nG1 X43.587 Y296.746 Z17    //直线插补，移动到（321.066，304.753，17）位置\nG1 Z16.8    //直线插补，移动到（321.066，304.753，16.8）位置\nG1 E.5 F2400    //挤出机挤出0.5mm，速度设置为2400mm/min\n```\n\n### 二、CNC数控编程\n\n#### 学习资料\n\n[数控机床编程入门【G-code】 | 学习软件编程 (hubwiz.com)](http://blog.hubwiz.com/2021/06/26/g-code-tutorial/)\n\n#### G00–快速定位\n\nG00命令以最大速度将机器从当前位置移动到指定的坐标。机器将同时移动所有轴，以便同时完成行程。 结果是直线移动到新的位置点。\n\n#### G01–线性插值\n\nG01 命令指示机器以设定速度直线移动。我们用X、Y和Z值指定最终位置，用F值指定速度。 CNC控制器计算（插值）要经过的中间点的坐标，以获得直线。\n\n#### G02–顺时针环形插值\n\nG02命令要求机器以圆形模式顺时针移动。它与 G01 命令的概念相同，在执行适当的加工过程时使用。除了 终点参数，在这里我们还需要定义旋转中心，或弧线起点与弧线中心点的距离。起点实际上是上一个命令的 终点或当前点。\n\n#### G03–逆时针环形插值\n\n与 G02 一样，G03 命令指示机器以圆形模式移动，区别在于G03是逆时针运动。所有其他功能和规则与 G02 命令相同。\n\n#### G20/G21 – 单位选择\n\nG20 和 G21 命令定义 G-code单位，英寸或毫米。G20 = 英寸；G21 = 毫米\n\n#### G17/G18/G18 – 工作面选择\n\nG17–XY平面；G18–XZ平面；G19–YZ平面\n\n#### G28–返回home\n\nG28命令要求机器将移动到其参考点或home位置。为了避免碰撞，我们可以包括一个带有 X、Y 和 Z 参数的 中间点。该工具将在转到参考点之前通过该点。\n\n#### G90/G91 – 定位模式\n\n使用 G90 和 G91 命令，我们告诉机器如何解析坐标值。G90为绝对模式，G91为相对模式。\n\n#### 其他代码\n\n```\n- M00–程序停止\n- M02–程序结束\n- M03–主轴打开–顺时针\n- M04–主轴打开–逆时针\n- M05–主轴停止\n- M06–工具更改\n- M08–启用Flood Colant\n- M09–禁用Flood Colant\n- M30 – 程序结束\n- M104–启动挤出加热\n- M109–等到挤出器到达T0\n- M140–开始底板加热\n- M190–等到底板到达T0\n- M106–设置风扇速度\n```\n\n#### 代码解释\n\n```\n%\nG21 G17 G90 F100                     //G21单位选择毫米，G17选择XY平面，G90选择绝对模式，F100代表转速\nM03 S1000                            //主轴打开-顺时针，速度为1000转\nG00 X5 Y5                 ; point B  //快速移动到（5，5）\nG01 X5 Y5 Z-1             ; point B  //直线插补移动到（5，5，-1）\nG01 X5 Y15 Z-1            ; point C  //直线插补移动到（5，15，-1）\nG02 X9 Y19 Z-1 I4 J0      ; point D  //顺时针环形插补移动到（9，19，-1），圆心为（9，15）\nG01 X23 Y19 Z-1           ; point E  //直线插补移动到（23，19，-1）\nG01 X32 Y5 Z-1            ; point F  //直线插补移动到（32，5，-1）\nG01 X21 Y5 Z-1            ; point G  //直线插补移动到（21，5，-1）\nG01 X21 Y8 Z-1            ; point H  //直线插补移动到（21，8，-1）\nG03 X19 Y10 Z-1 I-2 J0    ; point I  //逆时针环形插补移动到（19，10，-1），圆心为（19，8）\nG01 X13 Y10 Z-1           ; point J  //直线插补移动到（13，10，-1）\nG03 X11 Y8 Z-1 I0 J-2     ; point K  //逆时针环形插补移动到（11，8，-1），圆心为（13，8）\nG01 X11 Y5 Z-1            ; point L  //直线插补移动到（11，5，-1）\nG01 X5 Y5 Z-1             ; point B  //直线插补移动到（5，5，-1）\nG01 X5 Y5 Z0                         //直线插补移动到（5，5，0）\nG28  X0 Y0                           //返回零点（0，0，0）\nM05                                  //关闭主轴\nM30                                  //程序结束\n%\n```\n","source":"_posts/Work No.4.md","raw":"---\ntitle: Gcode学习\ntag: Gcode\ndate: 2024-07-24\ncategories: 3D打印机\n---\n\n# Gcode学习\n\n### 一、3D打印机编程\n\n### 学习资料\n\n[[G-Codes - Klipper 文档 (klipper3d.org)](https://www.klipper3d.org/zh/G-Codes.html)](https://www.klipper3d.org/zh/Overview.html)\n\n[G-code - RepRap](https://reprap.org/wiki/G-code)\n\n[3D 打印机 G 代码命令：完整列表和教程_3d打印机g代码-CSDN博客](https://blog.csdn.net/acktomas/article/details/125552309)\n\n[3D打印机DIY之六------G代码命令_g代码m300-CSDN博客](https://blog.csdn.net/qlexcel/article/details/103466638)\n\n### G指令\n\n#### G0/G1: 直线移动\n\nG0和G1命令完全等价，作用就是让喷头线性移动到一个特定的位置，使用时，不需要所有的参数全部存在，但至少要有一个参数。\n\nG0 Xnnn Ynnn Znnn Ennn Fnnn Snnn / G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn\n\nXnnn表示X轴的移动位置；\n\nYnnn表示Y轴的移动位置；\n\nZnnn表示Z轴的移动位置；\n\nEnnn表示E轴（挤出头步进电机）的移动位置；\n\nFnnn表示移动速度，单位是毫米/每分钟；\n\nSnnn表示是否检查限位开关，S0不检查，S1检查，缺省值是S0；\n\n#### G28：复位\n\n打印机复位命令。执行时会让3个轴依次往限位开关的方向运行，碰到限位开关后还会减速做一次1mm左右的往返运动，来保证复位的准确性。如果在命令后面加上坐标值，则只会复位坐标值对应的坐标轴。（坐标值的数字会被忽略）\n\nG28 X0 Y72.3\n\n只会复位x轴和y轴。\n\n#### G29：Z轴高度三点测试\n\n这条命令会测试打印平面上三个点的Z轴高度，并在串口上输出结果。参数为Snnn，表示对测试结果的处理方式。S1表示更新内存中的Z轴高度值（重置系统会丢失），S2表示更新内存以及EEPROM中的Z轴高度值（重置系统不会丢失）。\n\n一般来说，只有使用高位限位开关（也就是说，Z轴的限位开关位于Z轴坐标最大处），且在挤出头上附带有Z轴高度测试微动开关的机型，适合使用G29命令测试Z轴高度。其他机械配置的机型，不适合使用G29命令。G29命令由固件配置\n\n#### G30：Z轴高度单点测试（单步）\n\n这条命令作为一个完整Z轴高度测试过程的一步，测试打印平面上一个点的Z轴高度，并在串口上输出结果。这个完整的Z轴高度测试过程，通常是由3D打印机控制软件连续发出的，通过参数控制G30的执行状态。因此在手动工作方式下，G30命令只适合不带参数运行\n\n#### G31：输出Z轴高度测试微动开关状态\n\n执行后会输出当前Z轴高度测试微动开关的当前状态，其中L表示微动开关没有触发。如果是处于触发状态，这里会输出H。\n\nG29命令、G30命令、G31命令只进行Z轴的高度测试，并不进行自动调平。\n\n#### G32：热床自动调平\n\n这条命令在G29命令的基础上，不仅测试打印平面上三个点的Z轴高度，而且还会根据测试的结果，对3D打印机的机械参数进行调整，实现热床自动调平。G32命令使用的参数与G29命令是一致的：Snnn，表示测试结果的处理方式。S1表示更新内存中的相关参数值（重置系统会丢失），S2表示更新内存以及EEPROM中的相关参数值（重置系统不会丢失）。\n\nG32命令执行完成时，不仅Z轴高度参数发生了改变，而且还会根据3D打印机的硬件配置，对热床进行相应的调平处理。\n\nG32命令会在3D打印机内存中构建一个转换矩阵（Transformation matrix），让未来3D打印机所处理的所有三维空间位置，都先经过这个矩阵的变换，保证在Z=0的情况下，正好与热床平面完全吻合\n\n#### G4: 暂停移动\n\n让喷头在当前位置停留一段时间。参数可以为：G4 Pnnn或G4 Snnn。Pnnn表示以毫秒为单位，Snnn表示以秒为单位。\n\nG4 P2000与G4 S2完全等价，都表示停顿2秒。\n\n在停顿过程中机器仍可以被控制，如挤出头温度。\n\n#### G20:使用英寸作为单位\n\n执行这条命令后，后面的命令都以英寸作为单位。\n\n#### G21: 使用毫米作为单位\n\n执行这条命令后，后面的命令都以毫米作为单位。\n\n#### G90/G91：设置坐标模式\n\n这两条命令用于设置当前坐标模式为绝对坐标模式(G90)或者相对坐标模式(G91)。没有参数。未设置时缺省值是绝对坐标模式\n\n#### G92:设置当前位置为某个坐标值\n\n把当前位置设定为某个坐标值，可以用来设置零点，如果参数为空表示把当前位置设置为所有轴的的零点。\n\n如：G92 X10 E90    ;表示把当前位置设置为x=10，喷头坐标=90\n\n再如：G92 E0       ；表示把当前喷头坐标设置为0\n\n#### G94/G95:进给速率单位\n\n使用了G94指令之后，所有的进给都是以mm/min为单位，即F100指刀具每分钟移动100毫米（默认的）\n\n使用了G95指令之后，所有的进给都是以mm/r为单位，即F100指主轴每转一转，刀具移动100毫米\n\n#### G17/G18/G19：选择加工平面\n\nG17–XY平面；\n\nG18–XZ平面；\n\nG19–YZ平面；\n\n### M指令\n\n#### M0:打印机停止\n\n打印机会终止任何动作，然后关机。所有的电机和加热器都会被关掉，这个时候只能通过reset按钮来重启控制器。\n\n#### M1: 打印机休眠\n\n打印机会终止任何动作，然后休眠。所有的马达和加热器都会被关掉，但是接收到G或M命令时，打印机可以被唤醒并进入工作状态。\n\n#### M17:启动所有步进电机\n\n#### M18:关闭所有步进电机\n\n#### M20:读取SD卡根目录中的文件\n\n读取SD卡根目录的文件，并通过串口输出文件名。\n\n#### M21:初始化SD卡\n\n初始化SD卡。如果在机器通电时插入SD卡，会默认初始化SD卡。开始其他SD卡功能时，SD卡一定要先初始化。本命令相当于文件系统中执行Mount动作。\n\n#### M22:卸载SD卡\n\n卸载SD卡，也就是执行Unmount动作。没有相关的参数。\n\n#### M23:选择SD卡中的文件\n\n选择一个SD卡上的文件。文件选择之后，可以执行打印、删除等动作。\n\n如：M23 filename.gcode   ;选中filename.gcode文件\n\n#### M24:开始打印SD卡中选中的文件\n\n开始打印通过M23命令选中的文件。\n\n#### M25:暂停SD卡打印\n\n暂停打印通过M23命令选定的文件。\n\n#### M27:报告SD卡打印进度\n\n获取SD卡打印进度。没有相关参数。\n\nM27命令的输出，格式为：SD printing byte 11518/1127578\n\n这条命令供上位机获取当前的3D打印进度信息，用于显示在电脑界面上。\n\n#### M28:开始往SD卡文件中写入数据\n\n接收到此命令后，后续接收到的命令（除了M29）都会被当成数据写入该文件。\n\n命令后面会跟着文件名，如果文件不存在则会被创建，如果存在则会被覆盖。接收到这条命令后，后续接收到的命令都会被写入该文件中，直到接收到M29命令。如：M28 filename.gcode  \n\n#### M29:停止往SD卡文件中写入数据\n\n接收到此命令后，后续接收到的命令要开始正常执行。\n\n#### M30:删除SD卡中的文件\n\n如：M30 filename.gcode     ;删除filename.gcode文件\n\n#### M32：创建子目录\n\n在SD卡上创建一个子目录。参数为：filename，表示待创建的子目录（包含目录名，以/分隔）；\n\n#### M82/M83：设置挤出头步进电机坐标模式\n\n与G90/G91命令类似，这两条命令用于设置挤出头当前坐标模式为绝对坐标模式(M82)或者相对坐标模式(M83)。没有参数。未设置时缺省值是绝对坐标模式。需要注意的是，G90/G91设置的坐标模式，同时对XYZE四个轴起作用，但M82/M83设置的坐标模式，只对E轴（挤出头步进电机）起作用。\n\n#### M84：设置步进电机自动关闭时间\n\n当3D打印机一段时间没有接收到步进电机运动指令之后，3D打印机（为了节能）会自动关闭步进电机。使用M84指令，可以设置这个自动关闭步进电机的时间。\n\nSnnn，表示步进电机关闭的时间，以秒为单位。\n\n如果使用M85时没有指定S参数，或者使用了S0参数，则代表取消3D打印机自动关闭功能，挤出头、热床等在工作完成之后，一直会处于当前状态，而不会被自动关闭。\n\n#### M73：获取当前打印进度\n\n告诉固件当前的构建进度百分比。预计这台机器会在显示屏上显示出来。如果百分比恰好为0，则向主机发送“构建开始”通知。如果百分比恰好为100，则向主机发送“构建结束”通知。\n\n#### M105: 获取当前温度（单位：℃）\n\n获取当前温度值，包括挤出头和热床的温度。\n\nX，表示输出ADC测量的原始值；\n\nM105命令的输出，格式为：T:18.97 /0 B:18.75 /0 B@:0 @:0\n\nT:之后的部分，代表挤出头的当前温度/目标温度；\n\nB:之后的部分代表热床的当前温度/目标温度。\n\n在PID温度控制模式下，B@:后面的数字代表热床当前的输出强度，是一个0~255的值，@:后面的数字，代表挤出头当前的输出强度，也是一个0~255的值。例子中，挤出头、热床都处于关闭状态，所以这个位置的值都是0。\n\n#### M104:设置挤出机（喷头）温度\n\n设置挤出头的目标温度。执行这条命令后，不需要等待达到这个温度，控制板继续执行下一条G-code语句。\n\nSnnn，表示目标温度；\n\nTnnn，表示对应的挤出头；\n\nP，表示要等待前面的指令完成之后，再开始设置挤出头温度；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。F1表示要触发；\n\n如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。\n\n如：M104 S190         ;将挤出机的温度设置为190度 \n\n#### M106: 打开风扇\n\n如：M106 S127    ;打开风扇（半速）。\n\n'S'表示 PWM值 (0-255). 可简单理解为：风扇有0-255级强度可选，其中 M106 S0 意味着风扇将被关掉。\n\nP表示风扇的数目，P0是第一个风扇，P1是第二个风扇\n\n#### M109: 等待挤出头加热达到目标温度\n\n设置挤出头的目标温度，并等待达到这个温度。\n\nSnnn，表示目标温度；\n\nTnnn，表示对应的挤出头；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。如： M109 S185      ;等待挤出头加热到185度\n\n#### M114: 获取挤出头当前位置\n\n输出挤出头当前位置。没有相关的参数。\n\nM114命令的输出，格式为：\n\nM114 X:20.00 Y:30.00 Z:10.000 E:0.0000\n\n#### M115: 获取3D打印机信息\n\n输出3D打印机信息。没有相关的参数。\n\nM115命令的输出，格式为：FIRMWARE_NAME:Repetier_0.92.3FIRMWARE_URL:…Printedfilament:0.00mPrintingtime:0days0hours0minSpeedMultiply:100FlowMultiply:100\n\n第一行是固件的版本信息，很长，没有列完整。第二行是已经打印了多少米耗材，打印时间是几天几小时几分钟。第三行是速度系数，参考M220命令。第四行是流率系数，参考M221命令。\n\n#### M140 设置热床目标温度\n\n设置热床的目标温度。执行这条命令后，不需要等待达到这个温度，立即开始执行下一条G-code语句。\n\nSnnn表示目标温度；\n\nFnnn表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n#### M141:设置构建平台的温度\n\n可能用于特定的温控策略或多热床系统\n\nM141 S60将加热床设置为60摄氏度\n\n#### M190: 等待热床加热达到目标温度\n\n设置热床的目标温度，并等待达到这个温度。\n\nSnnn，表示目标温度；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n#### M204：设置PID参数\n\n设置挤出头温度控制的PID参数，\n\nSnnn表示对应的挤出头，无S参数表示使用当前挤出头；\n\nXnnn表示P参数；\n\nYnnn表示I参数；\n\nZnnn表示D参数；\n\n#### M220：设置速度\n\n设置3D打印机运行速度系数。\n\n命令参数为Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；\n\n3D打印机运行速度系数，是一个在25%到500%范围内变化的值。这个系数值在3D打印机运行过程中，与切片器给出的3D打印机运动速度基础值相乘，得到最终的3D打印机实际运动速度值。\n\nM220命令的输出，格式为：SpeedMultiply:100\n\n#### M221：设置流率\n\n设置3D打印机的流率系数（Flow rate）。\n\n命令参数为：Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；\n\n3D打印机流率系数，是在上位机切片软件通过耗材直径、喷头直径、层高以及3D打印速度等因素综合计算得到的E轴运动速度的基础上，叠加的一个E轴运动速度系数。简单地说，就是控制挤出头耗材挤出量的多少。这个系数可以在25%到500%范围内变化。\n\nM221命令的输出，格式为：FlowMultiply:100\n\n### T指令\n\n#### T0/T1/T2/T3 命令，选择不同的工具或挤出机\n\nT0 选择第一个挤出机；T1 选择第二个挤出机；T2 选择第三个挤出机；T3 选择第四个挤出机\n\n#### 节选注释\n\n```\nM106 P2 S204    //打开第三个风扇，PWM值为204\n;LAYER_CHANGE\n;Z:16.8\n;HEIGHT:0.199999\n;BEFORE_LAYER_CHANGE\n;16.8\nG92 E0    //设置喷头当前位置为零点\nM106 P2 S0    //关闭第二个风扇\n\nG1 E-.35 F2400  //挤出机回抽挤出0.35mm，速度设置为2400mm/min\n;WIPE_START\nG1 F9473.877    //速度设置为9473.877mm/min\nG1 X320.911 Y304.914 E-.11658    //直线插补，移动到（320.911，304.914）位置，并回抽0.11658\nG1 X321.066 Y304.753 E-.03342    //直线插补，移动到（321.066，304.753）位置，并回抽0.03342\n;WIPE_END\nEXCLUDE_OBJECT_END NAME=ksr_fdmtest_w4.stl_id_0_copy_0\n;_SET_FAN_SPEED_CHANGING_LAYER\nEXCLUDE_OBJECT_START NAME=ksr_fdmtest_w4.stl_id_0_copy_0\nG17    //选择XY平面\nG3 Z17 I.035 J-1.216 P1  F30000    //圆弧插补，Z轴位置为17mm，圆心坐标为（321.066+0.035，304.753-1.216）,P1表示为顺时针，速度为30000mm/min\nG1 X43.587 Y296.746 Z17    //直线插补，移动到（321.066，304.753，17）位置\nG1 Z16.8    //直线插补，移动到（321.066，304.753，16.8）位置\nG1 E.5 F2400    //挤出机挤出0.5mm，速度设置为2400mm/min\n```\n\n### 二、CNC数控编程\n\n#### 学习资料\n\n[数控机床编程入门【G-code】 | 学习软件编程 (hubwiz.com)](http://blog.hubwiz.com/2021/06/26/g-code-tutorial/)\n\n#### G00–快速定位\n\nG00命令以最大速度将机器从当前位置移动到指定的坐标。机器将同时移动所有轴，以便同时完成行程。 结果是直线移动到新的位置点。\n\n#### G01–线性插值\n\nG01 命令指示机器以设定速度直线移动。我们用X、Y和Z值指定最终位置，用F值指定速度。 CNC控制器计算（插值）要经过的中间点的坐标，以获得直线。\n\n#### G02–顺时针环形插值\n\nG02命令要求机器以圆形模式顺时针移动。它与 G01 命令的概念相同，在执行适当的加工过程时使用。除了 终点参数，在这里我们还需要定义旋转中心，或弧线起点与弧线中心点的距离。起点实际上是上一个命令的 终点或当前点。\n\n#### G03–逆时针环形插值\n\n与 G02 一样，G03 命令指示机器以圆形模式移动，区别在于G03是逆时针运动。所有其他功能和规则与 G02 命令相同。\n\n#### G20/G21 – 单位选择\n\nG20 和 G21 命令定义 G-code单位，英寸或毫米。G20 = 英寸；G21 = 毫米\n\n#### G17/G18/G18 – 工作面选择\n\nG17–XY平面；G18–XZ平面；G19–YZ平面\n\n#### G28–返回home\n\nG28命令要求机器将移动到其参考点或home位置。为了避免碰撞，我们可以包括一个带有 X、Y 和 Z 参数的 中间点。该工具将在转到参考点之前通过该点。\n\n#### G90/G91 – 定位模式\n\n使用 G90 和 G91 命令，我们告诉机器如何解析坐标值。G90为绝对模式，G91为相对模式。\n\n#### 其他代码\n\n```\n- M00–程序停止\n- M02–程序结束\n- M03–主轴打开–顺时针\n- M04–主轴打开–逆时针\n- M05–主轴停止\n- M06–工具更改\n- M08–启用Flood Colant\n- M09–禁用Flood Colant\n- M30 – 程序结束\n- M104–启动挤出加热\n- M109–等到挤出器到达T0\n- M140–开始底板加热\n- M190–等到底板到达T0\n- M106–设置风扇速度\n```\n\n#### 代码解释\n\n```\n%\nG21 G17 G90 F100                     //G21单位选择毫米，G17选择XY平面，G90选择绝对模式，F100代表转速\nM03 S1000                            //主轴打开-顺时针，速度为1000转\nG00 X5 Y5                 ; point B  //快速移动到（5，5）\nG01 X5 Y5 Z-1             ; point B  //直线插补移动到（5，5，-1）\nG01 X5 Y15 Z-1            ; point C  //直线插补移动到（5，15，-1）\nG02 X9 Y19 Z-1 I4 J0      ; point D  //顺时针环形插补移动到（9，19，-1），圆心为（9，15）\nG01 X23 Y19 Z-1           ; point E  //直线插补移动到（23，19，-1）\nG01 X32 Y5 Z-1            ; point F  //直线插补移动到（32，5，-1）\nG01 X21 Y5 Z-1            ; point G  //直线插补移动到（21，5，-1）\nG01 X21 Y8 Z-1            ; point H  //直线插补移动到（21，8，-1）\nG03 X19 Y10 Z-1 I-2 J0    ; point I  //逆时针环形插补移动到（19，10，-1），圆心为（19，8）\nG01 X13 Y10 Z-1           ; point J  //直线插补移动到（13，10，-1）\nG03 X11 Y8 Z-1 I0 J-2     ; point K  //逆时针环形插补移动到（11，8，-1），圆心为（13，8）\nG01 X11 Y5 Z-1            ; point L  //直线插补移动到（11，5，-1）\nG01 X5 Y5 Z-1             ; point B  //直线插补移动到（5，5，-1）\nG01 X5 Y5 Z0                         //直线插补移动到（5，5，0）\nG28  X0 Y0                           //返回零点（0，0，0）\nM05                                  //关闭主轴\nM30                                  //程序结束\n%\n```\n","slug":"Work No.4","published":1,"updated":"2024-07-26T09:52:54.877Z","_id":"clz0qu1nc0001rcfbcdhs3u4m","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Gcode学习\"><a href=\"#Gcode学习\" class=\"headerlink\" title=\"Gcode学习\"></a>Gcode学习</h1><h3 id=\"一、3D打印机编程\"><a href=\"#一、3D打印机编程\" class=\"headerlink\" title=\"一、3D打印机编程\"></a>一、3D打印机编程</h3><h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"https://www.klipper3d.org/zh/Overview.html\"><a href=\"https://www.klipper3d.org/zh/G-Codes.html\">G-Codes - Klipper 文档 (klipper3d.org)</a></a></p>\n<p><a href=\"https://reprap.org/wiki/G-code\">G-code - RepRap</a></p>\n<p><a href=\"https://blog.csdn.net/acktomas/article/details/125552309\">3D 打印机 G 代码命令：完整列表和教程_3d打印机g代码-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qlexcel/article/details/103466638\">3D打印机DIY之六——G代码命令_g代码m300-CSDN博客</a></p>\n<h3 id=\"G指令\"><a href=\"#G指令\" class=\"headerlink\" title=\"G指令\"></a>G指令</h3><h4 id=\"G0-G1-直线移动\"><a href=\"#G0-G1-直线移动\" class=\"headerlink\" title=\"G0&#x2F;G1: 直线移动\"></a>G0&#x2F;G1: 直线移动</h4><p>G0和G1命令完全等价，作用就是让喷头线性移动到一个特定的位置，使用时，不需要所有的参数全部存在，但至少要有一个参数。</p>\n<p>G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn &#x2F; G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn</p>\n<p>Xnnn表示X轴的移动位置；</p>\n<p>Ynnn表示Y轴的移动位置；</p>\n<p>Znnn表示Z轴的移动位置；</p>\n<p>Ennn表示E轴（挤出头步进电机）的移动位置；</p>\n<p>Fnnn表示移动速度，单位是毫米&#x2F;每分钟；</p>\n<p>Snnn表示是否检查限位开关，S0不检查，S1检查，缺省值是S0；</p>\n<h4 id=\"G28：复位\"><a href=\"#G28：复位\" class=\"headerlink\" title=\"G28：复位\"></a>G28：复位</h4><p>打印机复位命令。执行时会让3个轴依次往限位开关的方向运行，碰到限位开关后还会减速做一次1mm左右的往返运动，来保证复位的准确性。如果在命令后面加上坐标值，则只会复位坐标值对应的坐标轴。（坐标值的数字会被忽略）</p>\n<p>G28 X0 Y72.3</p>\n<p>只会复位x轴和y轴。</p>\n<h4 id=\"G29：Z轴高度三点测试\"><a href=\"#G29：Z轴高度三点测试\" class=\"headerlink\" title=\"G29：Z轴高度三点测试\"></a>G29：Z轴高度三点测试</h4><p>这条命令会测试打印平面上三个点的Z轴高度，并在串口上输出结果。参数为Snnn，表示对测试结果的处理方式。S1表示更新内存中的Z轴高度值（重置系统会丢失），S2表示更新内存以及EEPROM中的Z轴高度值（重置系统不会丢失）。</p>\n<p>一般来说，只有使用高位限位开关（也就是说，Z轴的限位开关位于Z轴坐标最大处），且在挤出头上附带有Z轴高度测试微动开关的机型，适合使用G29命令测试Z轴高度。其他机械配置的机型，不适合使用G29命令。G29命令由固件配置</p>\n<h4 id=\"G30：Z轴高度单点测试（单步）\"><a href=\"#G30：Z轴高度单点测试（单步）\" class=\"headerlink\" title=\"G30：Z轴高度单点测试（单步）\"></a>G30：Z轴高度单点测试（单步）</h4><p>这条命令作为一个完整Z轴高度测试过程的一步，测试打印平面上一个点的Z轴高度，并在串口上输出结果。这个完整的Z轴高度测试过程，通常是由3D打印机控制软件连续发出的，通过参数控制G30的执行状态。因此在手动工作方式下，G30命令只适合不带参数运行</p>\n<h4 id=\"G31：输出Z轴高度测试微动开关状态\"><a href=\"#G31：输出Z轴高度测试微动开关状态\" class=\"headerlink\" title=\"G31：输出Z轴高度测试微动开关状态\"></a>G31：输出Z轴高度测试微动开关状态</h4><p>执行后会输出当前Z轴高度测试微动开关的当前状态，其中L表示微动开关没有触发。如果是处于触发状态，这里会输出H。</p>\n<p>G29命令、G30命令、G31命令只进行Z轴的高度测试，并不进行自动调平。</p>\n<h4 id=\"G32：热床自动调平\"><a href=\"#G32：热床自动调平\" class=\"headerlink\" title=\"G32：热床自动调平\"></a>G32：热床自动调平</h4><p>这条命令在G29命令的基础上，不仅测试打印平面上三个点的Z轴高度，而且还会根据测试的结果，对3D打印机的机械参数进行调整，实现热床自动调平。G32命令使用的参数与G29命令是一致的：Snnn，表示测试结果的处理方式。S1表示更新内存中的相关参数值（重置系统会丢失），S2表示更新内存以及EEPROM中的相关参数值（重置系统不会丢失）。</p>\n<p>G32命令执行完成时，不仅Z轴高度参数发生了改变，而且还会根据3D打印机的硬件配置，对热床进行相应的调平处理。</p>\n<p>G32命令会在3D打印机内存中构建一个转换矩阵（Transformation matrix），让未来3D打印机所处理的所有三维空间位置，都先经过这个矩阵的变换，保证在Z&#x3D;0的情况下，正好与热床平面完全吻合</p>\n<h4 id=\"G4-暂停移动\"><a href=\"#G4-暂停移动\" class=\"headerlink\" title=\"G4: 暂停移动\"></a>G4: 暂停移动</h4><p>让喷头在当前位置停留一段时间。参数可以为：G4 Pnnn或G4 Snnn。Pnnn表示以毫秒为单位，Snnn表示以秒为单位。</p>\n<p>G4 P2000与G4 S2完全等价，都表示停顿2秒。</p>\n<p>在停顿过程中机器仍可以被控制，如挤出头温度。</p>\n<h4 id=\"G20-使用英寸作为单位\"><a href=\"#G20-使用英寸作为单位\" class=\"headerlink\" title=\"G20:使用英寸作为单位\"></a>G20:使用英寸作为单位</h4><p>执行这条命令后，后面的命令都以英寸作为单位。</p>\n<h4 id=\"G21-使用毫米作为单位\"><a href=\"#G21-使用毫米作为单位\" class=\"headerlink\" title=\"G21: 使用毫米作为单位\"></a>G21: 使用毫米作为单位</h4><p>执行这条命令后，后面的命令都以毫米作为单位。</p>\n<h4 id=\"G90-G91：设置坐标模式\"><a href=\"#G90-G91：设置坐标模式\" class=\"headerlink\" title=\"G90&#x2F;G91：设置坐标模式\"></a>G90&#x2F;G91：设置坐标模式</h4><p>这两条命令用于设置当前坐标模式为绝对坐标模式(G90)或者相对坐标模式(G91)。没有参数。未设置时缺省值是绝对坐标模式</p>\n<h4 id=\"G92-设置当前位置为某个坐标值\"><a href=\"#G92-设置当前位置为某个坐标值\" class=\"headerlink\" title=\"G92:设置当前位置为某个坐标值\"></a>G92:设置当前位置为某个坐标值</h4><p>把当前位置设定为某个坐标值，可以用来设置零点，如果参数为空表示把当前位置设置为所有轴的的零点。</p>\n<p>如：G92 X10 E90    ;表示把当前位置设置为x&#x3D;10，喷头坐标&#x3D;90</p>\n<p>再如：G92 E0       ；表示把当前喷头坐标设置为0</p>\n<h4 id=\"G94-G95-进给速率单位\"><a href=\"#G94-G95-进给速率单位\" class=\"headerlink\" title=\"G94&#x2F;G95:进给速率单位\"></a>G94&#x2F;G95:进给速率单位</h4><p>使用了G94指令之后，所有的进给都是以mm&#x2F;min为单位，即F100指刀具每分钟移动100毫米（默认的）</p>\n<p>使用了G95指令之后，所有的进给都是以mm&#x2F;r为单位，即F100指主轴每转一转，刀具移动100毫米</p>\n<h4 id=\"G17-G18-G19：选择加工平面\"><a href=\"#G17-G18-G19：选择加工平面\" class=\"headerlink\" title=\"G17&#x2F;G18&#x2F;G19：选择加工平面\"></a>G17&#x2F;G18&#x2F;G19：选择加工平面</h4><p>G17–XY平面；</p>\n<p>G18–XZ平面；</p>\n<p>G19–YZ平面；</p>\n<h3 id=\"M指令\"><a href=\"#M指令\" class=\"headerlink\" title=\"M指令\"></a>M指令</h3><h4 id=\"M0-打印机停止\"><a href=\"#M0-打印机停止\" class=\"headerlink\" title=\"M0:打印机停止\"></a>M0:打印机停止</h4><p>打印机会终止任何动作，然后关机。所有的电机和加热器都会被关掉，这个时候只能通过reset按钮来重启控制器。</p>\n<h4 id=\"M1-打印机休眠\"><a href=\"#M1-打印机休眠\" class=\"headerlink\" title=\"M1: 打印机休眠\"></a>M1: 打印机休眠</h4><p>打印机会终止任何动作，然后休眠。所有的马达和加热器都会被关掉，但是接收到G或M命令时，打印机可以被唤醒并进入工作状态。</p>\n<h4 id=\"M17-启动所有步进电机\"><a href=\"#M17-启动所有步进电机\" class=\"headerlink\" title=\"M17:启动所有步进电机\"></a>M17:启动所有步进电机</h4><h4 id=\"M18-关闭所有步进电机\"><a href=\"#M18-关闭所有步进电机\" class=\"headerlink\" title=\"M18:关闭所有步进电机\"></a>M18:关闭所有步进电机</h4><h4 id=\"M20-读取SD卡根目录中的文件\"><a href=\"#M20-读取SD卡根目录中的文件\" class=\"headerlink\" title=\"M20:读取SD卡根目录中的文件\"></a>M20:读取SD卡根目录中的文件</h4><p>读取SD卡根目录的文件，并通过串口输出文件名。</p>\n<h4 id=\"M21-初始化SD卡\"><a href=\"#M21-初始化SD卡\" class=\"headerlink\" title=\"M21:初始化SD卡\"></a>M21:初始化SD卡</h4><p>初始化SD卡。如果在机器通电时插入SD卡，会默认初始化SD卡。开始其他SD卡功能时，SD卡一定要先初始化。本命令相当于文件系统中执行Mount动作。</p>\n<h4 id=\"M22-卸载SD卡\"><a href=\"#M22-卸载SD卡\" class=\"headerlink\" title=\"M22:卸载SD卡\"></a>M22:卸载SD卡</h4><p>卸载SD卡，也就是执行Unmount动作。没有相关的参数。</p>\n<h4 id=\"M23-选择SD卡中的文件\"><a href=\"#M23-选择SD卡中的文件\" class=\"headerlink\" title=\"M23:选择SD卡中的文件\"></a>M23:选择SD卡中的文件</h4><p>选择一个SD卡上的文件。文件选择之后，可以执行打印、删除等动作。</p>\n<p>如：M23 filename.gcode   ;选中filename.gcode文件</p>\n<h4 id=\"M24-开始打印SD卡中选中的文件\"><a href=\"#M24-开始打印SD卡中选中的文件\" class=\"headerlink\" title=\"M24:开始打印SD卡中选中的文件\"></a>M24:开始打印SD卡中选中的文件</h4><p>开始打印通过M23命令选中的文件。</p>\n<h4 id=\"M25-暂停SD卡打印\"><a href=\"#M25-暂停SD卡打印\" class=\"headerlink\" title=\"M25:暂停SD卡打印\"></a>M25:暂停SD卡打印</h4><p>暂停打印通过M23命令选定的文件。</p>\n<h4 id=\"M27-报告SD卡打印进度\"><a href=\"#M27-报告SD卡打印进度\" class=\"headerlink\" title=\"M27:报告SD卡打印进度\"></a>M27:报告SD卡打印进度</h4><p>获取SD卡打印进度。没有相关参数。</p>\n<p>M27命令的输出，格式为：SD printing byte 11518&#x2F;1127578</p>\n<p>这条命令供上位机获取当前的3D打印进度信息，用于显示在电脑界面上。</p>\n<h4 id=\"M28-开始往SD卡文件中写入数据\"><a href=\"#M28-开始往SD卡文件中写入数据\" class=\"headerlink\" title=\"M28:开始往SD卡文件中写入数据\"></a>M28:开始往SD卡文件中写入数据</h4><p>接收到此命令后，后续接收到的命令（除了M29）都会被当成数据写入该文件。</p>\n<p>命令后面会跟着文件名，如果文件不存在则会被创建，如果存在则会被覆盖。接收到这条命令后，后续接收到的命令都会被写入该文件中，直到接收到M29命令。如：M28 filename.gcode  </p>\n<h4 id=\"M29-停止往SD卡文件中写入数据\"><a href=\"#M29-停止往SD卡文件中写入数据\" class=\"headerlink\" title=\"M29:停止往SD卡文件中写入数据\"></a>M29:停止往SD卡文件中写入数据</h4><p>接收到此命令后，后续接收到的命令要开始正常执行。</p>\n<h4 id=\"M30-删除SD卡中的文件\"><a href=\"#M30-删除SD卡中的文件\" class=\"headerlink\" title=\"M30:删除SD卡中的文件\"></a>M30:删除SD卡中的文件</h4><p>如：M30 filename.gcode     ;删除filename.gcode文件</p>\n<h4 id=\"M32：创建子目录\"><a href=\"#M32：创建子目录\" class=\"headerlink\" title=\"M32：创建子目录\"></a>M32：创建子目录</h4><p>在SD卡上创建一个子目录。参数为：filename，表示待创建的子目录（包含目录名，以&#x2F;分隔）；</p>\n<h4 id=\"M82-M83：设置挤出头步进电机坐标模式\"><a href=\"#M82-M83：设置挤出头步进电机坐标模式\" class=\"headerlink\" title=\"M82&#x2F;M83：设置挤出头步进电机坐标模式\"></a>M82&#x2F;M83：设置挤出头步进电机坐标模式</h4><p>与G90&#x2F;G91命令类似，这两条命令用于设置挤出头当前坐标模式为绝对坐标模式(M82)或者相对坐标模式(M83)。没有参数。未设置时缺省值是绝对坐标模式。需要注意的是，G90&#x2F;G91设置的坐标模式，同时对XYZE四个轴起作用，但M82&#x2F;M83设置的坐标模式，只对E轴（挤出头步进电机）起作用。</p>\n<h4 id=\"M84：设置步进电机自动关闭时间\"><a href=\"#M84：设置步进电机自动关闭时间\" class=\"headerlink\" title=\"M84：设置步进电机自动关闭时间\"></a>M84：设置步进电机自动关闭时间</h4><p>当3D打印机一段时间没有接收到步进电机运动指令之后，3D打印机（为了节能）会自动关闭步进电机。使用M84指令，可以设置这个自动关闭步进电机的时间。</p>\n<p>Snnn，表示步进电机关闭的时间，以秒为单位。</p>\n<p>如果使用M85时没有指定S参数，或者使用了S0参数，则代表取消3D打印机自动关闭功能，挤出头、热床等在工作完成之后，一直会处于当前状态，而不会被自动关闭。</p>\n<h4 id=\"M73：获取当前打印进度\"><a href=\"#M73：获取当前打印进度\" class=\"headerlink\" title=\"M73：获取当前打印进度\"></a>M73：获取当前打印进度</h4><p>告诉固件当前的构建进度百分比。预计这台机器会在显示屏上显示出来。如果百分比恰好为0，则向主机发送“构建开始”通知。如果百分比恰好为100，则向主机发送“构建结束”通知。</p>\n<h4 id=\"M105-获取当前温度（单位：℃）\"><a href=\"#M105-获取当前温度（单位：℃）\" class=\"headerlink\" title=\"M105: 获取当前温度（单位：℃）\"></a>M105: 获取当前温度（单位：℃）</h4><p>获取当前温度值，包括挤出头和热床的温度。</p>\n<p>X，表示输出ADC测量的原始值；</p>\n<p>M105命令的输出，格式为：T:18.97 &#x2F;0 B:18.75 &#x2F;0 B@:0 @:0</p>\n<p>T:之后的部分，代表挤出头的当前温度&#x2F;目标温度；</p>\n<p>B:之后的部分代表热床的当前温度&#x2F;目标温度。</p>\n<p>在PID温度控制模式下，B@:后面的数字代表热床当前的输出强度，是一个0<del>255的值，@:后面的数字，代表挤出头当前的输出强度，也是一个0</del>255的值。例子中，挤出头、热床都处于关闭状态，所以这个位置的值都是0。</p>\n<h4 id=\"M104-设置挤出机（喷头）温度\"><a href=\"#M104-设置挤出机（喷头）温度\" class=\"headerlink\" title=\"M104:设置挤出机（喷头）温度\"></a>M104:设置挤出机（喷头）温度</h4><p>设置挤出头的目标温度。执行这条命令后，不需要等待达到这个温度，控制板继续执行下一条G-code语句。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Tnnn，表示对应的挤出头；</p>\n<p>P，表示要等待前面的指令完成之后，再开始设置挤出头温度；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。F1表示要触发；</p>\n<p>如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。</p>\n<p>如：M104 S190         ;将挤出机的温度设置为190度 </p>\n<h4 id=\"M106-打开风扇\"><a href=\"#M106-打开风扇\" class=\"headerlink\" title=\"M106: 打开风扇\"></a>M106: 打开风扇</h4><p>如：M106 S127    ;打开风扇（半速）。</p>\n<p>‘S’表示 PWM值 (0-255). 可简单理解为：风扇有0-255级强度可选，其中 M106 S0 意味着风扇将被关掉。</p>\n<p>P表示风扇的数目，P0是第一个风扇，P1是第二个风扇</p>\n<h4 id=\"M109-等待挤出头加热达到目标温度\"><a href=\"#M109-等待挤出头加热达到目标温度\" class=\"headerlink\" title=\"M109: 等待挤出头加热达到目标温度\"></a>M109: 等待挤出头加热达到目标温度</h4><p>设置挤出头的目标温度，并等待达到这个温度。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Tnnn，表示对应的挤出头；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<p>如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。如： M109 S185      ;等待挤出头加热到185度</p>\n<h4 id=\"M114-获取挤出头当前位置\"><a href=\"#M114-获取挤出头当前位置\" class=\"headerlink\" title=\"M114: 获取挤出头当前位置\"></a>M114: 获取挤出头当前位置</h4><p>输出挤出头当前位置。没有相关的参数。</p>\n<p>M114命令的输出，格式为：</p>\n<p>M114 X:20.00 Y:30.00 Z:10.000 E:0.0000</p>\n<h4 id=\"M115-获取3D打印机信息\"><a href=\"#M115-获取3D打印机信息\" class=\"headerlink\" title=\"M115: 获取3D打印机信息\"></a>M115: 获取3D打印机信息</h4><p>输出3D打印机信息。没有相关的参数。</p>\n<p>M115命令的输出，格式为：FIRMWARE_NAME:Repetier_0.92.3FIRMWARE_URL:…Printedfilament:0.00mPrintingtime:0days0hours0minSpeedMultiply:100FlowMultiply:100</p>\n<p>第一行是固件的版本信息，很长，没有列完整。第二行是已经打印了多少米耗材，打印时间是几天几小时几分钟。第三行是速度系数，参考M220命令。第四行是流率系数，参考M221命令。</p>\n<h4 id=\"M140-设置热床目标温度\"><a href=\"#M140-设置热床目标温度\" class=\"headerlink\" title=\"M140 设置热床目标温度\"></a>M140 设置热床目标温度</h4><p>设置热床的目标温度。执行这条命令后，不需要等待达到这个温度，立即开始执行下一条G-code语句。</p>\n<p>Snnn表示目标温度；</p>\n<p>Fnnn表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<h4 id=\"M141-设置构建平台的温度\"><a href=\"#M141-设置构建平台的温度\" class=\"headerlink\" title=\"M141:设置构建平台的温度\"></a>M141:设置构建平台的温度</h4><p>可能用于特定的温控策略或多热床系统</p>\n<p>M141 S60将加热床设置为60摄氏度</p>\n<h4 id=\"M190-等待热床加热达到目标温度\"><a href=\"#M190-等待热床加热达到目标温度\" class=\"headerlink\" title=\"M190: 等待热床加热达到目标温度\"></a>M190: 等待热床加热达到目标温度</h4><p>设置热床的目标温度，并等待达到这个温度。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<h4 id=\"M204：设置PID参数\"><a href=\"#M204：设置PID参数\" class=\"headerlink\" title=\"M204：设置PID参数\"></a>M204：设置PID参数</h4><p>设置挤出头温度控制的PID参数，</p>\n<p>Snnn表示对应的挤出头，无S参数表示使用当前挤出头；</p>\n<p>Xnnn表示P参数；</p>\n<p>Ynnn表示I参数；</p>\n<p>Znnn表示D参数；</p>\n<h4 id=\"M220：设置速度\"><a href=\"#M220：设置速度\" class=\"headerlink\" title=\"M220：设置速度\"></a>M220：设置速度</h4><p>设置3D打印机运行速度系数。</p>\n<p>命令参数为Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；</p>\n<p>3D打印机运行速度系数，是一个在25%到500%范围内变化的值。这个系数值在3D打印机运行过程中，与切片器给出的3D打印机运动速度基础值相乘，得到最终的3D打印机实际运动速度值。</p>\n<p>M220命令的输出，格式为：SpeedMultiply:100</p>\n<h4 id=\"M221：设置流率\"><a href=\"#M221：设置流率\" class=\"headerlink\" title=\"M221：设置流率\"></a>M221：设置流率</h4><p>设置3D打印机的流率系数（Flow rate）。</p>\n<p>命令参数为：Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；</p>\n<p>3D打印机流率系数，是在上位机切片软件通过耗材直径、喷头直径、层高以及3D打印速度等因素综合计算得到的E轴运动速度的基础上，叠加的一个E轴运动速度系数。简单地说，就是控制挤出头耗材挤出量的多少。这个系数可以在25%到500%范围内变化。</p>\n<p>M221命令的输出，格式为：FlowMultiply:100</p>\n<h3 id=\"T指令\"><a href=\"#T指令\" class=\"headerlink\" title=\"T指令\"></a>T指令</h3><h4 id=\"T0-T1-T2-T3-命令，选择不同的工具或挤出机\"><a href=\"#T0-T1-T2-T3-命令，选择不同的工具或挤出机\" class=\"headerlink\" title=\"T0&#x2F;T1&#x2F;T2&#x2F;T3 命令，选择不同的工具或挤出机\"></a>T0&#x2F;T1&#x2F;T2&#x2F;T3 命令，选择不同的工具或挤出机</h4><p>T0 选择第一个挤出机；T1 选择第二个挤出机；T2 选择第三个挤出机；T3 选择第四个挤出机</p>\n<h4 id=\"节选注释\"><a href=\"#节选注释\" class=\"headerlink\" title=\"节选注释\"></a>节选注释</h4><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">M106 P2 S204    //打开第三个风扇，PWM值为<span class=\"hljs-number\">204</span><br><span class=\"hljs-comment\">;LAYER_CHANGE</span><br><span class=\"hljs-comment\">;Z:16.8</span><br><span class=\"hljs-comment\">;HEIGHT:0.199999</span><br><span class=\"hljs-comment\">;BEFORE_LAYER_CHANGE</span><br><span class=\"hljs-comment\">;16.8</span><br>G92 E0    //设置喷头当前位置为零点<br>M106 P2 S0    //关闭第二个风扇<br><br>G1 E-.<span class=\"hljs-number\">35</span> F2400  //挤出机回抽挤出<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">35m</span>m，速度设置为<span class=\"hljs-number\">2400m</span>m/min<br><span class=\"hljs-comment\">;WIPE_START</span><br>G1 F<span class=\"hljs-number\">9473.877</span>    //速度设置为<span class=\"hljs-number\">9473</span>.<span class=\"hljs-number\">877m</span>m/min<br>G1 X<span class=\"hljs-number\">320.911</span> Y<span class=\"hljs-number\">304.914</span> E-.<span class=\"hljs-number\">11658</span>    //直线插补，移动到（<span class=\"hljs-number\">320.911</span>，<span class=\"hljs-number\">304.914</span>）位置，并回抽<span class=\"hljs-number\">0.11658</span><br>G1 X<span class=\"hljs-number\">321.066</span> Y<span class=\"hljs-number\">304.753</span> E-.<span class=\"hljs-number\">03342</span>    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>）位置，并回抽<span class=\"hljs-number\">0.03342</span><br><span class=\"hljs-comment\">;WIPE_END</span><br>EXCLUDE_OBJECT_END NAME=ksr_fdmtest_w4.stl_id_0_copy_0<br><span class=\"hljs-comment\">;_SET_FAN_SPEED_CHANGING_LAYER</span><br>EXCLUDE_OBJECT_START NAME=ksr_fdmtest_w4.stl_id_0_copy_0<br>G17    //选择XY平面<br>G3 Z17 I.<span class=\"hljs-number\">035</span> J-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">216</span> P1  F30000    //圆弧插补，Z轴位置为<span class=\"hljs-number\">17m</span>m，圆心坐标为（<span class=\"hljs-number\">321.066</span>+<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">035，304</span>.<span class=\"hljs-number\">753-1.216</span>）,P1表示为顺时针，速度为<span class=\"hljs-number\">30000m</span>m/min<br>G1 X43.<span class=\"hljs-number\">587</span> Y<span class=\"hljs-number\">296.746</span> Z17    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>，<span class=\"hljs-number\">17</span>）位置<br>G1 Z16.<span class=\"hljs-number\">8</span>    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>，<span class=\"hljs-number\">16</span>.<span class=\"hljs-number\">8</span>）位置<br>G1 E.<span class=\"hljs-number\">5</span> F2400    //挤出机挤出<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5m</span>m，速度设置为<span class=\"hljs-number\">2400m</span>m/min<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"二、CNC数控编程\"><a href=\"#二、CNC数控编程\" class=\"headerlink\" title=\"二、CNC数控编程\"></a>二、CNC数控编程</h3><h4 id=\"学习资料-1\"><a href=\"#学习资料-1\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h4><p><a href=\"http://blog.hubwiz.com/2021/06/26/g-code-tutorial/\">数控机床编程入门【G-code】 | 学习软件编程 (hubwiz.com)</a></p>\n<h4 id=\"G00–快速定位\"><a href=\"#G00–快速定位\" class=\"headerlink\" title=\"G00–快速定位\"></a>G00–快速定位</h4><p>G00命令以最大速度将机器从当前位置移动到指定的坐标。机器将同时移动所有轴，以便同时完成行程。 结果是直线移动到新的位置点。</p>\n<h4 id=\"G01–线性插值\"><a href=\"#G01–线性插值\" class=\"headerlink\" title=\"G01–线性插值\"></a>G01–线性插值</h4><p>G01 命令指示机器以设定速度直线移动。我们用X、Y和Z值指定最终位置，用F值指定速度。 CNC控制器计算（插值）要经过的中间点的坐标，以获得直线。</p>\n<h4 id=\"G02–顺时针环形插值\"><a href=\"#G02–顺时针环形插值\" class=\"headerlink\" title=\"G02–顺时针环形插值\"></a>G02–顺时针环形插值</h4><p>G02命令要求机器以圆形模式顺时针移动。它与 G01 命令的概念相同，在执行适当的加工过程时使用。除了 终点参数，在这里我们还需要定义旋转中心，或弧线起点与弧线中心点的距离。起点实际上是上一个命令的 终点或当前点。</p>\n<h4 id=\"G03–逆时针环形插值\"><a href=\"#G03–逆时针环形插值\" class=\"headerlink\" title=\"G03–逆时针环形插值\"></a>G03–逆时针环形插值</h4><p>与 G02 一样，G03 命令指示机器以圆形模式移动，区别在于G03是逆时针运动。所有其他功能和规则与 G02 命令相同。</p>\n<h4 id=\"G20-G21-–-单位选择\"><a href=\"#G20-G21-–-单位选择\" class=\"headerlink\" title=\"G20&#x2F;G21 – 单位选择\"></a>G20&#x2F;G21 – 单位选择</h4><p>G20 和 G21 命令定义 G-code单位，英寸或毫米。G20 &#x3D; 英寸；G21 &#x3D; 毫米</p>\n<h4 id=\"G17-G18-G18-–-工作面选择\"><a href=\"#G17-G18-G18-–-工作面选择\" class=\"headerlink\" title=\"G17&#x2F;G18&#x2F;G18 – 工作面选择\"></a>G17&#x2F;G18&#x2F;G18 – 工作面选择</h4><p>G17–XY平面；G18–XZ平面；G19–YZ平面</p>\n<h4 id=\"G28–返回home\"><a href=\"#G28–返回home\" class=\"headerlink\" title=\"G28–返回home\"></a>G28–返回home</h4><p>G28命令要求机器将移动到其参考点或home位置。为了避免碰撞，我们可以包括一个带有 X、Y 和 Z 参数的 中间点。该工具将在转到参考点之前通过该点。</p>\n<h4 id=\"G90-G91-–-定位模式\"><a href=\"#G90-G91-–-定位模式\" class=\"headerlink\" title=\"G90&#x2F;G91 – 定位模式\"></a>G90&#x2F;G91 – 定位模式</h4><p>使用 G90 和 G91 命令，我们告诉机器如何解析坐标值。G90为绝对模式，G91为相对模式。</p>\n<h4 id=\"其他代码\"><a href=\"#其他代码\" class=\"headerlink\" title=\"其他代码\"></a>其他代码</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">- </span>M00–程序停止<br><span class=\"hljs-bullet\">- </span>M02–程序结束<br><span class=\"hljs-bullet\">- </span>M03–主轴打开–顺时针<br><span class=\"hljs-bullet\">- </span>M04–主轴打开–逆时针<br><span class=\"hljs-bullet\">- </span>M05–主轴停止<br><span class=\"hljs-bullet\">- </span>M06–工具更改<br><span class=\"hljs-bullet\">- </span>M08–启用Flood Colant<br><span class=\"hljs-bullet\">- </span>M09–禁用Flood Colant<br><span class=\"hljs-bullet\">- </span>M30 – 程序结束<br><span class=\"hljs-bullet\">- </span>M104–启动挤出加热<br><span class=\"hljs-bullet\">- </span>M109–等到挤出器到达T0<br><span class=\"hljs-bullet\">- </span>M140–开始底板加热<br><span class=\"hljs-bullet\">- </span>M190–等到底板到达T0<br><span class=\"hljs-bullet\">- </span>M106–设置风扇速度<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h4><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">%<br>G21 G17 G90 F100                     <span class=\"hljs-comment\">//G21单位选择毫米，G17选择XY平面，G90选择绝对模式，F100代表转速</span><br>M03 S1000                            <span class=\"hljs-comment\">//主轴打开-顺时针，速度为1000转</span><br>G00 X5 Y5                 ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//快速移动到（5，5）</span><br>G01 X5 Y5 Z<span class=\"hljs-number\">-1</span>             ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//直线插补移动到（5，5，-1）</span><br>G01 X5 Y15 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> C  <span class=\"hljs-comment\">//直线插补移动到（5，15，-1）</span><br>G02 X9 Y19 Z<span class=\"hljs-number\">-1</span> I4 J0      ; <span class=\"hljs-built_in\">point</span> D  <span class=\"hljs-comment\">//顺时针环形插补移动到（9，19，-1），圆心为（9，15）</span><br>G01 X23 Y19 Z<span class=\"hljs-number\">-1</span>           ; <span class=\"hljs-built_in\">point</span> E  <span class=\"hljs-comment\">//直线插补移动到（23，19，-1）</span><br>G01 X32 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> F  <span class=\"hljs-comment\">//直线插补移动到（32，5，-1）</span><br>G01 X21 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> G  <span class=\"hljs-comment\">//直线插补移动到（21，5，-1）</span><br>G01 X21 Y8 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> H  <span class=\"hljs-comment\">//直线插补移动到（21，8，-1）</span><br>G03 X19 Y10 Z<span class=\"hljs-number\">-1</span> I<span class=\"hljs-number\">-2</span> J0    ; <span class=\"hljs-built_in\">point</span> I  <span class=\"hljs-comment\">//逆时针环形插补移动到（19，10，-1），圆心为（19，8）</span><br>G01 X13 Y10 Z<span class=\"hljs-number\">-1</span>           ; <span class=\"hljs-built_in\">point</span> J  <span class=\"hljs-comment\">//直线插补移动到（13，10，-1）</span><br>G03 X11 Y8 Z<span class=\"hljs-number\">-1</span> I0 J<span class=\"hljs-number\">-2</span>     ; <span class=\"hljs-built_in\">point</span> K  <span class=\"hljs-comment\">//逆时针环形插补移动到（11，8，-1），圆心为（13，8）</span><br>G01 X11 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> L  <span class=\"hljs-comment\">//直线插补移动到（11，5，-1）</span><br>G01 X5 Y5 Z<span class=\"hljs-number\">-1</span>             ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//直线插补移动到（5，5，-1）</span><br>G01 X5 Y5 Z0                         <span class=\"hljs-comment\">//直线插补移动到（5，5，0）</span><br>G28  X0 Y0                           <span class=\"hljs-comment\">//返回零点（0，0，0）</span><br>M05                                  <span class=\"hljs-comment\">//关闭主轴</span><br>M30                                  <span class=\"hljs-comment\">//程序结束</span><br>%<br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Gcode学习\"><a href=\"#Gcode学习\" class=\"headerlink\" title=\"Gcode学习\"></a>Gcode学习</h1><h3 id=\"一、3D打印机编程\"><a href=\"#一、3D打印机编程\" class=\"headerlink\" title=\"一、3D打印机编程\"></a>一、3D打印机编程</h3><h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"https://www.klipper3d.org/zh/Overview.html\"><a href=\"https://www.klipper3d.org/zh/G-Codes.html\">G-Codes - Klipper 文档 (klipper3d.org)</a></a></p>\n<p><a href=\"https://reprap.org/wiki/G-code\">G-code - RepRap</a></p>\n<p><a href=\"https://blog.csdn.net/acktomas/article/details/125552309\">3D 打印机 G 代码命令：完整列表和教程_3d打印机g代码-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qlexcel/article/details/103466638\">3D打印机DIY之六——G代码命令_g代码m300-CSDN博客</a></p>\n<h3 id=\"G指令\"><a href=\"#G指令\" class=\"headerlink\" title=\"G指令\"></a>G指令</h3><h4 id=\"G0-G1-直线移动\"><a href=\"#G0-G1-直线移动\" class=\"headerlink\" title=\"G0&#x2F;G1: 直线移动\"></a>G0&#x2F;G1: 直线移动</h4><p>G0和G1命令完全等价，作用就是让喷头线性移动到一个特定的位置，使用时，不需要所有的参数全部存在，但至少要有一个参数。</p>\n<p>G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn &#x2F; G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn</p>\n<p>Xnnn表示X轴的移动位置；</p>\n<p>Ynnn表示Y轴的移动位置；</p>\n<p>Znnn表示Z轴的移动位置；</p>\n<p>Ennn表示E轴（挤出头步进电机）的移动位置；</p>\n<p>Fnnn表示移动速度，单位是毫米&#x2F;每分钟；</p>\n<p>Snnn表示是否检查限位开关，S0不检查，S1检查，缺省值是S0；</p>\n<h4 id=\"G28：复位\"><a href=\"#G28：复位\" class=\"headerlink\" title=\"G28：复位\"></a>G28：复位</h4><p>打印机复位命令。执行时会让3个轴依次往限位开关的方向运行，碰到限位开关后还会减速做一次1mm左右的往返运动，来保证复位的准确性。如果在命令后面加上坐标值，则只会复位坐标值对应的坐标轴。（坐标值的数字会被忽略）</p>\n<p>G28 X0 Y72.3</p>\n<p>只会复位x轴和y轴。</p>\n<h4 id=\"G29：Z轴高度三点测试\"><a href=\"#G29：Z轴高度三点测试\" class=\"headerlink\" title=\"G29：Z轴高度三点测试\"></a>G29：Z轴高度三点测试</h4><p>这条命令会测试打印平面上三个点的Z轴高度，并在串口上输出结果。参数为Snnn，表示对测试结果的处理方式。S1表示更新内存中的Z轴高度值（重置系统会丢失），S2表示更新内存以及EEPROM中的Z轴高度值（重置系统不会丢失）。</p>\n<p>一般来说，只有使用高位限位开关（也就是说，Z轴的限位开关位于Z轴坐标最大处），且在挤出头上附带有Z轴高度测试微动开关的机型，适合使用G29命令测试Z轴高度。其他机械配置的机型，不适合使用G29命令。G29命令由固件配置</p>\n<h4 id=\"G30：Z轴高度单点测试（单步）\"><a href=\"#G30：Z轴高度单点测试（单步）\" class=\"headerlink\" title=\"G30：Z轴高度单点测试（单步）\"></a>G30：Z轴高度单点测试（单步）</h4><p>这条命令作为一个完整Z轴高度测试过程的一步，测试打印平面上一个点的Z轴高度，并在串口上输出结果。这个完整的Z轴高度测试过程，通常是由3D打印机控制软件连续发出的，通过参数控制G30的执行状态。因此在手动工作方式下，G30命令只适合不带参数运行</p>\n<h4 id=\"G31：输出Z轴高度测试微动开关状态\"><a href=\"#G31：输出Z轴高度测试微动开关状态\" class=\"headerlink\" title=\"G31：输出Z轴高度测试微动开关状态\"></a>G31：输出Z轴高度测试微动开关状态</h4><p>执行后会输出当前Z轴高度测试微动开关的当前状态，其中L表示微动开关没有触发。如果是处于触发状态，这里会输出H。</p>\n<p>G29命令、G30命令、G31命令只进行Z轴的高度测试，并不进行自动调平。</p>\n<h4 id=\"G32：热床自动调平\"><a href=\"#G32：热床自动调平\" class=\"headerlink\" title=\"G32：热床自动调平\"></a>G32：热床自动调平</h4><p>这条命令在G29命令的基础上，不仅测试打印平面上三个点的Z轴高度，而且还会根据测试的结果，对3D打印机的机械参数进行调整，实现热床自动调平。G32命令使用的参数与G29命令是一致的：Snnn，表示测试结果的处理方式。S1表示更新内存中的相关参数值（重置系统会丢失），S2表示更新内存以及EEPROM中的相关参数值（重置系统不会丢失）。</p>\n<p>G32命令执行完成时，不仅Z轴高度参数发生了改变，而且还会根据3D打印机的硬件配置，对热床进行相应的调平处理。</p>\n<p>G32命令会在3D打印机内存中构建一个转换矩阵（Transformation matrix），让未来3D打印机所处理的所有三维空间位置，都先经过这个矩阵的变换，保证在Z&#x3D;0的情况下，正好与热床平面完全吻合</p>\n<h4 id=\"G4-暂停移动\"><a href=\"#G4-暂停移动\" class=\"headerlink\" title=\"G4: 暂停移动\"></a>G4: 暂停移动</h4><p>让喷头在当前位置停留一段时间。参数可以为：G4 Pnnn或G4 Snnn。Pnnn表示以毫秒为单位，Snnn表示以秒为单位。</p>\n<p>G4 P2000与G4 S2完全等价，都表示停顿2秒。</p>\n<p>在停顿过程中机器仍可以被控制，如挤出头温度。</p>\n<h4 id=\"G20-使用英寸作为单位\"><a href=\"#G20-使用英寸作为单位\" class=\"headerlink\" title=\"G20:使用英寸作为单位\"></a>G20:使用英寸作为单位</h4><p>执行这条命令后，后面的命令都以英寸作为单位。</p>\n<h4 id=\"G21-使用毫米作为单位\"><a href=\"#G21-使用毫米作为单位\" class=\"headerlink\" title=\"G21: 使用毫米作为单位\"></a>G21: 使用毫米作为单位</h4><p>执行这条命令后，后面的命令都以毫米作为单位。</p>\n<h4 id=\"G90-G91：设置坐标模式\"><a href=\"#G90-G91：设置坐标模式\" class=\"headerlink\" title=\"G90&#x2F;G91：设置坐标模式\"></a>G90&#x2F;G91：设置坐标模式</h4><p>这两条命令用于设置当前坐标模式为绝对坐标模式(G90)或者相对坐标模式(G91)。没有参数。未设置时缺省值是绝对坐标模式</p>\n<h4 id=\"G92-设置当前位置为某个坐标值\"><a href=\"#G92-设置当前位置为某个坐标值\" class=\"headerlink\" title=\"G92:设置当前位置为某个坐标值\"></a>G92:设置当前位置为某个坐标值</h4><p>把当前位置设定为某个坐标值，可以用来设置零点，如果参数为空表示把当前位置设置为所有轴的的零点。</p>\n<p>如：G92 X10 E90    ;表示把当前位置设置为x&#x3D;10，喷头坐标&#x3D;90</p>\n<p>再如：G92 E0       ；表示把当前喷头坐标设置为0</p>\n<h4 id=\"G94-G95-进给速率单位\"><a href=\"#G94-G95-进给速率单位\" class=\"headerlink\" title=\"G94&#x2F;G95:进给速率单位\"></a>G94&#x2F;G95:进给速率单位</h4><p>使用了G94指令之后，所有的进给都是以mm&#x2F;min为单位，即F100指刀具每分钟移动100毫米（默认的）</p>\n<p>使用了G95指令之后，所有的进给都是以mm&#x2F;r为单位，即F100指主轴每转一转，刀具移动100毫米</p>\n<h4 id=\"G17-G18-G19：选择加工平面\"><a href=\"#G17-G18-G19：选择加工平面\" class=\"headerlink\" title=\"G17&#x2F;G18&#x2F;G19：选择加工平面\"></a>G17&#x2F;G18&#x2F;G19：选择加工平面</h4><p>G17–XY平面；</p>\n<p>G18–XZ平面；</p>\n<p>G19–YZ平面；</p>\n<h3 id=\"M指令\"><a href=\"#M指令\" class=\"headerlink\" title=\"M指令\"></a>M指令</h3><h4 id=\"M0-打印机停止\"><a href=\"#M0-打印机停止\" class=\"headerlink\" title=\"M0:打印机停止\"></a>M0:打印机停止</h4><p>打印机会终止任何动作，然后关机。所有的电机和加热器都会被关掉，这个时候只能通过reset按钮来重启控制器。</p>\n<h4 id=\"M1-打印机休眠\"><a href=\"#M1-打印机休眠\" class=\"headerlink\" title=\"M1: 打印机休眠\"></a>M1: 打印机休眠</h4><p>打印机会终止任何动作，然后休眠。所有的马达和加热器都会被关掉，但是接收到G或M命令时，打印机可以被唤醒并进入工作状态。</p>\n<h4 id=\"M17-启动所有步进电机\"><a href=\"#M17-启动所有步进电机\" class=\"headerlink\" title=\"M17:启动所有步进电机\"></a>M17:启动所有步进电机</h4><h4 id=\"M18-关闭所有步进电机\"><a href=\"#M18-关闭所有步进电机\" class=\"headerlink\" title=\"M18:关闭所有步进电机\"></a>M18:关闭所有步进电机</h4><h4 id=\"M20-读取SD卡根目录中的文件\"><a href=\"#M20-读取SD卡根目录中的文件\" class=\"headerlink\" title=\"M20:读取SD卡根目录中的文件\"></a>M20:读取SD卡根目录中的文件</h4><p>读取SD卡根目录的文件，并通过串口输出文件名。</p>\n<h4 id=\"M21-初始化SD卡\"><a href=\"#M21-初始化SD卡\" class=\"headerlink\" title=\"M21:初始化SD卡\"></a>M21:初始化SD卡</h4><p>初始化SD卡。如果在机器通电时插入SD卡，会默认初始化SD卡。开始其他SD卡功能时，SD卡一定要先初始化。本命令相当于文件系统中执行Mount动作。</p>\n<h4 id=\"M22-卸载SD卡\"><a href=\"#M22-卸载SD卡\" class=\"headerlink\" title=\"M22:卸载SD卡\"></a>M22:卸载SD卡</h4><p>卸载SD卡，也就是执行Unmount动作。没有相关的参数。</p>\n<h4 id=\"M23-选择SD卡中的文件\"><a href=\"#M23-选择SD卡中的文件\" class=\"headerlink\" title=\"M23:选择SD卡中的文件\"></a>M23:选择SD卡中的文件</h4><p>选择一个SD卡上的文件。文件选择之后，可以执行打印、删除等动作。</p>\n<p>如：M23 filename.gcode   ;选中filename.gcode文件</p>\n<h4 id=\"M24-开始打印SD卡中选中的文件\"><a href=\"#M24-开始打印SD卡中选中的文件\" class=\"headerlink\" title=\"M24:开始打印SD卡中选中的文件\"></a>M24:开始打印SD卡中选中的文件</h4><p>开始打印通过M23命令选中的文件。</p>\n<h4 id=\"M25-暂停SD卡打印\"><a href=\"#M25-暂停SD卡打印\" class=\"headerlink\" title=\"M25:暂停SD卡打印\"></a>M25:暂停SD卡打印</h4><p>暂停打印通过M23命令选定的文件。</p>\n<h4 id=\"M27-报告SD卡打印进度\"><a href=\"#M27-报告SD卡打印进度\" class=\"headerlink\" title=\"M27:报告SD卡打印进度\"></a>M27:报告SD卡打印进度</h4><p>获取SD卡打印进度。没有相关参数。</p>\n<p>M27命令的输出，格式为：SD printing byte 11518&#x2F;1127578</p>\n<p>这条命令供上位机获取当前的3D打印进度信息，用于显示在电脑界面上。</p>\n<h4 id=\"M28-开始往SD卡文件中写入数据\"><a href=\"#M28-开始往SD卡文件中写入数据\" class=\"headerlink\" title=\"M28:开始往SD卡文件中写入数据\"></a>M28:开始往SD卡文件中写入数据</h4><p>接收到此命令后，后续接收到的命令（除了M29）都会被当成数据写入该文件。</p>\n<p>命令后面会跟着文件名，如果文件不存在则会被创建，如果存在则会被覆盖。接收到这条命令后，后续接收到的命令都会被写入该文件中，直到接收到M29命令。如：M28 filename.gcode  </p>\n<h4 id=\"M29-停止往SD卡文件中写入数据\"><a href=\"#M29-停止往SD卡文件中写入数据\" class=\"headerlink\" title=\"M29:停止往SD卡文件中写入数据\"></a>M29:停止往SD卡文件中写入数据</h4><p>接收到此命令后，后续接收到的命令要开始正常执行。</p>\n<h4 id=\"M30-删除SD卡中的文件\"><a href=\"#M30-删除SD卡中的文件\" class=\"headerlink\" title=\"M30:删除SD卡中的文件\"></a>M30:删除SD卡中的文件</h4><p>如：M30 filename.gcode     ;删除filename.gcode文件</p>\n<h4 id=\"M32：创建子目录\"><a href=\"#M32：创建子目录\" class=\"headerlink\" title=\"M32：创建子目录\"></a>M32：创建子目录</h4><p>在SD卡上创建一个子目录。参数为：filename，表示待创建的子目录（包含目录名，以&#x2F;分隔）；</p>\n<h4 id=\"M82-M83：设置挤出头步进电机坐标模式\"><a href=\"#M82-M83：设置挤出头步进电机坐标模式\" class=\"headerlink\" title=\"M82&#x2F;M83：设置挤出头步进电机坐标模式\"></a>M82&#x2F;M83：设置挤出头步进电机坐标模式</h4><p>与G90&#x2F;G91命令类似，这两条命令用于设置挤出头当前坐标模式为绝对坐标模式(M82)或者相对坐标模式(M83)。没有参数。未设置时缺省值是绝对坐标模式。需要注意的是，G90&#x2F;G91设置的坐标模式，同时对XYZE四个轴起作用，但M82&#x2F;M83设置的坐标模式，只对E轴（挤出头步进电机）起作用。</p>\n<h4 id=\"M84：设置步进电机自动关闭时间\"><a href=\"#M84：设置步进电机自动关闭时间\" class=\"headerlink\" title=\"M84：设置步进电机自动关闭时间\"></a>M84：设置步进电机自动关闭时间</h4><p>当3D打印机一段时间没有接收到步进电机运动指令之后，3D打印机（为了节能）会自动关闭步进电机。使用M84指令，可以设置这个自动关闭步进电机的时间。</p>\n<p>Snnn，表示步进电机关闭的时间，以秒为单位。</p>\n<p>如果使用M85时没有指定S参数，或者使用了S0参数，则代表取消3D打印机自动关闭功能，挤出头、热床等在工作完成之后，一直会处于当前状态，而不会被自动关闭。</p>\n<h4 id=\"M73：获取当前打印进度\"><a href=\"#M73：获取当前打印进度\" class=\"headerlink\" title=\"M73：获取当前打印进度\"></a>M73：获取当前打印进度</h4><p>告诉固件当前的构建进度百分比。预计这台机器会在显示屏上显示出来。如果百分比恰好为0，则向主机发送“构建开始”通知。如果百分比恰好为100，则向主机发送“构建结束”通知。</p>\n<h4 id=\"M105-获取当前温度（单位：℃）\"><a href=\"#M105-获取当前温度（单位：℃）\" class=\"headerlink\" title=\"M105: 获取当前温度（单位：℃）\"></a>M105: 获取当前温度（单位：℃）</h4><p>获取当前温度值，包括挤出头和热床的温度。</p>\n<p>X，表示输出ADC测量的原始值；</p>\n<p>M105命令的输出，格式为：T:18.97 &#x2F;0 B:18.75 &#x2F;0 B@:0 @:0</p>\n<p>T:之后的部分，代表挤出头的当前温度&#x2F;目标温度；</p>\n<p>B:之后的部分代表热床的当前温度&#x2F;目标温度。</p>\n<p>在PID温度控制模式下，B@:后面的数字代表热床当前的输出强度，是一个0<del>255的值，@:后面的数字，代表挤出头当前的输出强度，也是一个0</del>255的值。例子中，挤出头、热床都处于关闭状态，所以这个位置的值都是0。</p>\n<h4 id=\"M104-设置挤出机（喷头）温度\"><a href=\"#M104-设置挤出机（喷头）温度\" class=\"headerlink\" title=\"M104:设置挤出机（喷头）温度\"></a>M104:设置挤出机（喷头）温度</h4><p>设置挤出头的目标温度。执行这条命令后，不需要等待达到这个温度，控制板继续执行下一条G-code语句。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Tnnn，表示对应的挤出头；</p>\n<p>P，表示要等待前面的指令完成之后，再开始设置挤出头温度；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。F1表示要触发；</p>\n<p>如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。</p>\n<p>如：M104 S190         ;将挤出机的温度设置为190度 </p>\n<h4 id=\"M106-打开风扇\"><a href=\"#M106-打开风扇\" class=\"headerlink\" title=\"M106: 打开风扇\"></a>M106: 打开风扇</h4><p>如：M106 S127    ;打开风扇（半速）。</p>\n<p>‘S’表示 PWM值 (0-255). 可简单理解为：风扇有0-255级强度可选，其中 M106 S0 意味着风扇将被关掉。</p>\n<p>P表示风扇的数目，P0是第一个风扇，P1是第二个风扇</p>\n<h4 id=\"M109-等待挤出头加热达到目标温度\"><a href=\"#M109-等待挤出头加热达到目标温度\" class=\"headerlink\" title=\"M109: 等待挤出头加热达到目标温度\"></a>M109: 等待挤出头加热达到目标温度</h4><p>设置挤出头的目标温度，并等待达到这个温度。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Tnnn，表示对应的挤出头；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<p>如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。如： M109 S185      ;等待挤出头加热到185度</p>\n<h4 id=\"M114-获取挤出头当前位置\"><a href=\"#M114-获取挤出头当前位置\" class=\"headerlink\" title=\"M114: 获取挤出头当前位置\"></a>M114: 获取挤出头当前位置</h4><p>输出挤出头当前位置。没有相关的参数。</p>\n<p>M114命令的输出，格式为：</p>\n<p>M114 X:20.00 Y:30.00 Z:10.000 E:0.0000</p>\n<h4 id=\"M115-获取3D打印机信息\"><a href=\"#M115-获取3D打印机信息\" class=\"headerlink\" title=\"M115: 获取3D打印机信息\"></a>M115: 获取3D打印机信息</h4><p>输出3D打印机信息。没有相关的参数。</p>\n<p>M115命令的输出，格式为：FIRMWARE_NAME:Repetier_0.92.3FIRMWARE_URL:…Printedfilament:0.00mPrintingtime:0days0hours0minSpeedMultiply:100FlowMultiply:100</p>\n<p>第一行是固件的版本信息，很长，没有列完整。第二行是已经打印了多少米耗材，打印时间是几天几小时几分钟。第三行是速度系数，参考M220命令。第四行是流率系数，参考M221命令。</p>\n<h4 id=\"M140-设置热床目标温度\"><a href=\"#M140-设置热床目标温度\" class=\"headerlink\" title=\"M140 设置热床目标温度\"></a>M140 设置热床目标温度</h4><p>设置热床的目标温度。执行这条命令后，不需要等待达到这个温度，立即开始执行下一条G-code语句。</p>\n<p>Snnn表示目标温度；</p>\n<p>Fnnn表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<h4 id=\"M141-设置构建平台的温度\"><a href=\"#M141-设置构建平台的温度\" class=\"headerlink\" title=\"M141:设置构建平台的温度\"></a>M141:设置构建平台的温度</h4><p>可能用于特定的温控策略或多热床系统</p>\n<p>M141 S60将加热床设置为60摄氏度</p>\n<h4 id=\"M190-等待热床加热达到目标温度\"><a href=\"#M190-等待热床加热达到目标温度\" class=\"headerlink\" title=\"M190: 等待热床加热达到目标温度\"></a>M190: 等待热床加热达到目标温度</h4><p>设置热床的目标温度，并等待达到这个温度。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<h4 id=\"M204：设置PID参数\"><a href=\"#M204：设置PID参数\" class=\"headerlink\" title=\"M204：设置PID参数\"></a>M204：设置PID参数</h4><p>设置挤出头温度控制的PID参数，</p>\n<p>Snnn表示对应的挤出头，无S参数表示使用当前挤出头；</p>\n<p>Xnnn表示P参数；</p>\n<p>Ynnn表示I参数；</p>\n<p>Znnn表示D参数；</p>\n<h4 id=\"M220：设置速度\"><a href=\"#M220：设置速度\" class=\"headerlink\" title=\"M220：设置速度\"></a>M220：设置速度</h4><p>设置3D打印机运行速度系数。</p>\n<p>命令参数为Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；</p>\n<p>3D打印机运行速度系数，是一个在25%到500%范围内变化的值。这个系数值在3D打印机运行过程中，与切片器给出的3D打印机运动速度基础值相乘，得到最终的3D打印机实际运动速度值。</p>\n<p>M220命令的输出，格式为：SpeedMultiply:100</p>\n<h4 id=\"M221：设置流率\"><a href=\"#M221：设置流率\" class=\"headerlink\" title=\"M221：设置流率\"></a>M221：设置流率</h4><p>设置3D打印机的流率系数（Flow rate）。</p>\n<p>命令参数为：Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；</p>\n<p>3D打印机流率系数，是在上位机切片软件通过耗材直径、喷头直径、层高以及3D打印速度等因素综合计算得到的E轴运动速度的基础上，叠加的一个E轴运动速度系数。简单地说，就是控制挤出头耗材挤出量的多少。这个系数可以在25%到500%范围内变化。</p>\n<p>M221命令的输出，格式为：FlowMultiply:100</p>\n<h3 id=\"T指令\"><a href=\"#T指令\" class=\"headerlink\" title=\"T指令\"></a>T指令</h3><h4 id=\"T0-T1-T2-T3-命令，选择不同的工具或挤出机\"><a href=\"#T0-T1-T2-T3-命令，选择不同的工具或挤出机\" class=\"headerlink\" title=\"T0&#x2F;T1&#x2F;T2&#x2F;T3 命令，选择不同的工具或挤出机\"></a>T0&#x2F;T1&#x2F;T2&#x2F;T3 命令，选择不同的工具或挤出机</h4><p>T0 选择第一个挤出机；T1 选择第二个挤出机；T2 选择第三个挤出机；T3 选择第四个挤出机</p>\n<h4 id=\"节选注释\"><a href=\"#节选注释\" class=\"headerlink\" title=\"节选注释\"></a>节选注释</h4><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">M106 P2 S204    //打开第三个风扇，PWM值为<span class=\"hljs-number\">204</span><br><span class=\"hljs-comment\">;LAYER_CHANGE</span><br><span class=\"hljs-comment\">;Z:16.8</span><br><span class=\"hljs-comment\">;HEIGHT:0.199999</span><br><span class=\"hljs-comment\">;BEFORE_LAYER_CHANGE</span><br><span class=\"hljs-comment\">;16.8</span><br>G92 E0    //设置喷头当前位置为零点<br>M106 P2 S0    //关闭第二个风扇<br><br>G1 E-.<span class=\"hljs-number\">35</span> F2400  //挤出机回抽挤出<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">35m</span>m，速度设置为<span class=\"hljs-number\">2400m</span>m/min<br><span class=\"hljs-comment\">;WIPE_START</span><br>G1 F<span class=\"hljs-number\">9473.877</span>    //速度设置为<span class=\"hljs-number\">9473</span>.<span class=\"hljs-number\">877m</span>m/min<br>G1 X<span class=\"hljs-number\">320.911</span> Y<span class=\"hljs-number\">304.914</span> E-.<span class=\"hljs-number\">11658</span>    //直线插补，移动到（<span class=\"hljs-number\">320.911</span>，<span class=\"hljs-number\">304.914</span>）位置，并回抽<span class=\"hljs-number\">0.11658</span><br>G1 X<span class=\"hljs-number\">321.066</span> Y<span class=\"hljs-number\">304.753</span> E-.<span class=\"hljs-number\">03342</span>    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>）位置，并回抽<span class=\"hljs-number\">0.03342</span><br><span class=\"hljs-comment\">;WIPE_END</span><br>EXCLUDE_OBJECT_END NAME=ksr_fdmtest_w4.stl_id_0_copy_0<br><span class=\"hljs-comment\">;_SET_FAN_SPEED_CHANGING_LAYER</span><br>EXCLUDE_OBJECT_START NAME=ksr_fdmtest_w4.stl_id_0_copy_0<br>G17    //选择XY平面<br>G3 Z17 I.<span class=\"hljs-number\">035</span> J-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">216</span> P1  F30000    //圆弧插补，Z轴位置为<span class=\"hljs-number\">17m</span>m，圆心坐标为（<span class=\"hljs-number\">321.066</span>+<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">035，304</span>.<span class=\"hljs-number\">753-1.216</span>）,P1表示为顺时针，速度为<span class=\"hljs-number\">30000m</span>m/min<br>G1 X43.<span class=\"hljs-number\">587</span> Y<span class=\"hljs-number\">296.746</span> Z17    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>，<span class=\"hljs-number\">17</span>）位置<br>G1 Z16.<span class=\"hljs-number\">8</span>    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>，<span class=\"hljs-number\">16</span>.<span class=\"hljs-number\">8</span>）位置<br>G1 E.<span class=\"hljs-number\">5</span> F2400    //挤出机挤出<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5m</span>m，速度设置为<span class=\"hljs-number\">2400m</span>m/min<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"二、CNC数控编程\"><a href=\"#二、CNC数控编程\" class=\"headerlink\" title=\"二、CNC数控编程\"></a>二、CNC数控编程</h3><h4 id=\"学习资料-1\"><a href=\"#学习资料-1\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h4><p><a href=\"http://blog.hubwiz.com/2021/06/26/g-code-tutorial/\">数控机床编程入门【G-code】 | 学习软件编程 (hubwiz.com)</a></p>\n<h4 id=\"G00–快速定位\"><a href=\"#G00–快速定位\" class=\"headerlink\" title=\"G00–快速定位\"></a>G00–快速定位</h4><p>G00命令以最大速度将机器从当前位置移动到指定的坐标。机器将同时移动所有轴，以便同时完成行程。 结果是直线移动到新的位置点。</p>\n<h4 id=\"G01–线性插值\"><a href=\"#G01–线性插值\" class=\"headerlink\" title=\"G01–线性插值\"></a>G01–线性插值</h4><p>G01 命令指示机器以设定速度直线移动。我们用X、Y和Z值指定最终位置，用F值指定速度。 CNC控制器计算（插值）要经过的中间点的坐标，以获得直线。</p>\n<h4 id=\"G02–顺时针环形插值\"><a href=\"#G02–顺时针环形插值\" class=\"headerlink\" title=\"G02–顺时针环形插值\"></a>G02–顺时针环形插值</h4><p>G02命令要求机器以圆形模式顺时针移动。它与 G01 命令的概念相同，在执行适当的加工过程时使用。除了 终点参数，在这里我们还需要定义旋转中心，或弧线起点与弧线中心点的距离。起点实际上是上一个命令的 终点或当前点。</p>\n<h4 id=\"G03–逆时针环形插值\"><a href=\"#G03–逆时针环形插值\" class=\"headerlink\" title=\"G03–逆时针环形插值\"></a>G03–逆时针环形插值</h4><p>与 G02 一样，G03 命令指示机器以圆形模式移动，区别在于G03是逆时针运动。所有其他功能和规则与 G02 命令相同。</p>\n<h4 id=\"G20-G21-–-单位选择\"><a href=\"#G20-G21-–-单位选择\" class=\"headerlink\" title=\"G20&#x2F;G21 – 单位选择\"></a>G20&#x2F;G21 – 单位选择</h4><p>G20 和 G21 命令定义 G-code单位，英寸或毫米。G20 &#x3D; 英寸；G21 &#x3D; 毫米</p>\n<h4 id=\"G17-G18-G18-–-工作面选择\"><a href=\"#G17-G18-G18-–-工作面选择\" class=\"headerlink\" title=\"G17&#x2F;G18&#x2F;G18 – 工作面选择\"></a>G17&#x2F;G18&#x2F;G18 – 工作面选择</h4><p>G17–XY平面；G18–XZ平面；G19–YZ平面</p>\n<h4 id=\"G28–返回home\"><a href=\"#G28–返回home\" class=\"headerlink\" title=\"G28–返回home\"></a>G28–返回home</h4><p>G28命令要求机器将移动到其参考点或home位置。为了避免碰撞，我们可以包括一个带有 X、Y 和 Z 参数的 中间点。该工具将在转到参考点之前通过该点。</p>\n<h4 id=\"G90-G91-–-定位模式\"><a href=\"#G90-G91-–-定位模式\" class=\"headerlink\" title=\"G90&#x2F;G91 – 定位模式\"></a>G90&#x2F;G91 – 定位模式</h4><p>使用 G90 和 G91 命令，我们告诉机器如何解析坐标值。G90为绝对模式，G91为相对模式。</p>\n<h4 id=\"其他代码\"><a href=\"#其他代码\" class=\"headerlink\" title=\"其他代码\"></a>其他代码</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">- </span>M00–程序停止<br><span class=\"hljs-bullet\">- </span>M02–程序结束<br><span class=\"hljs-bullet\">- </span>M03–主轴打开–顺时针<br><span class=\"hljs-bullet\">- </span>M04–主轴打开–逆时针<br><span class=\"hljs-bullet\">- </span>M05–主轴停止<br><span class=\"hljs-bullet\">- </span>M06–工具更改<br><span class=\"hljs-bullet\">- </span>M08–启用Flood Colant<br><span class=\"hljs-bullet\">- </span>M09–禁用Flood Colant<br><span class=\"hljs-bullet\">- </span>M30 – 程序结束<br><span class=\"hljs-bullet\">- </span>M104–启动挤出加热<br><span class=\"hljs-bullet\">- </span>M109–等到挤出器到达T0<br><span class=\"hljs-bullet\">- </span>M140–开始底板加热<br><span class=\"hljs-bullet\">- </span>M190–等到底板到达T0<br><span class=\"hljs-bullet\">- </span>M106–设置风扇速度<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h4><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">%<br>G21 G17 G90 F100                     <span class=\"hljs-comment\">//G21单位选择毫米，G17选择XY平面，G90选择绝对模式，F100代表转速</span><br>M03 S1000                            <span class=\"hljs-comment\">//主轴打开-顺时针，速度为1000转</span><br>G00 X5 Y5                 ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//快速移动到（5，5）</span><br>G01 X5 Y5 Z<span class=\"hljs-number\">-1</span>             ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//直线插补移动到（5，5，-1）</span><br>G01 X5 Y15 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> C  <span class=\"hljs-comment\">//直线插补移动到（5，15，-1）</span><br>G02 X9 Y19 Z<span class=\"hljs-number\">-1</span> I4 J0      ; <span class=\"hljs-built_in\">point</span> D  <span class=\"hljs-comment\">//顺时针环形插补移动到（9，19，-1），圆心为（9，15）</span><br>G01 X23 Y19 Z<span class=\"hljs-number\">-1</span>           ; <span class=\"hljs-built_in\">point</span> E  <span class=\"hljs-comment\">//直线插补移动到（23，19，-1）</span><br>G01 X32 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> F  <span class=\"hljs-comment\">//直线插补移动到（32，5，-1）</span><br>G01 X21 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> G  <span class=\"hljs-comment\">//直线插补移动到（21，5，-1）</span><br>G01 X21 Y8 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> H  <span class=\"hljs-comment\">//直线插补移动到（21，8，-1）</span><br>G03 X19 Y10 Z<span class=\"hljs-number\">-1</span> I<span class=\"hljs-number\">-2</span> J0    ; <span class=\"hljs-built_in\">point</span> I  <span class=\"hljs-comment\">//逆时针环形插补移动到（19，10，-1），圆心为（19，8）</span><br>G01 X13 Y10 Z<span class=\"hljs-number\">-1</span>           ; <span class=\"hljs-built_in\">point</span> J  <span class=\"hljs-comment\">//直线插补移动到（13，10，-1）</span><br>G03 X11 Y8 Z<span class=\"hljs-number\">-1</span> I0 J<span class=\"hljs-number\">-2</span>     ; <span class=\"hljs-built_in\">point</span> K  <span class=\"hljs-comment\">//逆时针环形插补移动到（11，8，-1），圆心为（13，8）</span><br>G01 X11 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> L  <span class=\"hljs-comment\">//直线插补移动到（11，5，-1）</span><br>G01 X5 Y5 Z<span class=\"hljs-number\">-1</span>             ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//直线插补移动到（5，5，-1）</span><br>G01 X5 Y5 Z0                         <span class=\"hljs-comment\">//直线插补移动到（5，5，0）</span><br>G28  X0 Y0                           <span class=\"hljs-comment\">//返回零点（0，0，0）</span><br>M05                                  <span class=\"hljs-comment\">//关闭主轴</span><br>M30                                  <span class=\"hljs-comment\">//程序结束</span><br>%<br></code></pre></td></tr></table></figure>\n"},{"title":"Linux环境安装和配置","date":"2024-07-08T16:00:00.000Z","_content":"\n# Linux环境安装和配置\n\n## 一、安装VMware（16/17）\n\n安装版本：VMware® Workstation 16 Pro\n\n安装保姆链接：[安装虚拟机（VMware）保姆级教程（附安装包）_vmware虚拟机-CSDN博客](https://blog.csdn.net/weixin_74195551/article/details/127288338)\n\n破解链接：[VMware Workstation虚拟机合集+激活密钥_Win+Linux_10∕11∕12∕14∕15∕16∕17 - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn](https://www.52pojie.cn/thread-1804571-1-1.html)\n\n破解码：ZF3R0-FHED2-M80TY-8QYGC-NPKYF\n\nMobaXtem链接：[VMware虚拟机配置、连接MobaXterm_mobaxtem怎么连接虚拟机-CSDN博客](https://blog.csdn.net/qq_42578036/article/details/107710339)\n\n终极链接：[保姆级教程|VMware安装Ubuntu20.04(系统安装+网络配置+open-vm-tools安装+国内软件源更新)-CSDN博客](https://blog.csdn.net/lhl_blog/article/details/123406322)\n\n报错：\n\nVMware Workstation 无法连接到虚拟机\n\n点开虚拟机“属性”，在“兼容性”里面设置为以管理员身份运行此程序。\n\nVMware创建新的虚拟机，弹出“您已输入用户名，客户机操作将保留此用户名”错误提示\n\n【root】被系统占用了，让用户新建一个低权限的账户，修改用户名，不要再使用【root】，如：改为【user】或【your_name】\n\nVMware Ubuntu ping 百度不通\n\n选择 虚拟机->设置->网络适配器->自定义特定虚拟网络->选择VMnet1(桥接网络)->确定\n\n目的是确定我们使用的是VMnet1(桥接网络)，之后就可以ping通\n\n安装磁盘管理工具gparted并运行\n\n```\nsudo apt install gparted\nsudo gparted\n```\n\n报错是权限不足,那么修改挂载点的权限即可(注:所谓\"挂载\"的概念体现的是Linux\"一切皆文件\"的思想,物理世界中的一块硬盘在Linux系统的逻辑中也被映射为一个文件)\n\n```\nsudo mount -o remount -rw / \nsudo mount -o remount -rw /var/snap/firefox/common/host-hunspell\n```\n\n## 二、安装Ubuntu（22.04）\n\n安装版本：Linux Ubuntu22.04.4\n\n安装保姆链接：[ubuntu 22.04下载安装_ubuntu22.04下载-CSDN博客](https://blog.csdn.net/weixin_42640280/article/details/128351105)\n\n清华源：[清华大学开源软件镜像站 | Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/)\n\n步骤指令\n\n```\nsudo su //进入管理者模式\n\napt-get update //更新apt\n\napt-get install net-tools //安装ifconfig相关配件\n\napt-get install openssh-server //下载和安装ssh\n\nservice ssh restart //启动ssh\n```\n\n## 三、安装应用依赖第三方库\n\n将工程导入虚拟机中，tar -xvf 解压工程包\n\ngit clone 的所有包的位置可以随机放置，但是需要对每个包进行编译，编译参照readme文件或者网上查找，如果下载不下来，可以直接去官网直接下载zip格式，使用unzip xxx.zip进行安装\n\n```\nsudo apt-get install -y build-essential libsdl2-dev\n\ngit clone http://172.23.88.26:3333/zhangyufeng/libcrlog.git  //按照readme文档可以编译\n\nsudo apt-get install  libjson-c-dev\n\ngit clone https://github.com/protocolbuffers/protobuf.git\n\t//没安装成功，bash: ./autogen.sh: No such file or directory\n\t//在晚上的时候安装成功了，原因是高版本的缺失了./autogen.sh脚本，进行降版本就可以了，花费4小时\n\t//终极感谢博主：https://blog.csdn.net/jax_fanyang/article/details/135937002\n\t\n    1.11 点击链接下载3.21.12版本源码。https://github.com/protocolbuffers/protobuf/releases/tag/v2\n    1.12 cd protobuf-21.12/\n    1.13 ./autogen.sh\n    1.14 ./configure --prefix=/usr/local/protobuf\n    1.15 make\n    1.16 sudo make install\n    1.17 sudo vim /etc/profile\n    1.18 #添加以下内容：\n\n    #(动态库搜索路径) 程序加载运⾏期间查找动态链接库时指定除了系统默认路径之外的其他路径\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/protobuf/lib/\n    #(静态库搜索路径) 程序编译期间查找动态链接库时指定查找共享库的路径\n    export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/protobuf/lib/\n    #执⾏程序搜索路径\n    export PATH=$PATH:/usr/local/protobuf/bin/\n    #c程序头⽂件搜索路径\n    export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/local/protobuf/include/\n    #c++程序头⽂件搜索路径\n    export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/local/protobuf/include/\n    #pkg-config 路径\n    export PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/\n    1.18 source /etc/profile\n    1.19  protoc --version \n    执行之后应该看到==libprotoc 3.21.12==如果出现这个版本信息则安装成功\n    \ngit clone https://github.com/protobuf-c/protobuf-c  //按照readme文档可以编译\n\ngit clone https://github.com/eclipse/paho.mqtt.c.git\n\t\n\tbash\n    cd paho.mqtt.c\n    mkdir build && cd build\n    cmake ..\n    make\n    sudo make install\n\ngit clone https://github.com/eclipse/paho.mqtt.cpp.git（1.3.10）  //安装失败\n\ngit clone https://github.com/aliyun/aliyun-oss-cpp-sdk.git\n\n    cd <path/to/aliyun-oss-cpp-sdk>\n    mkdir build\n    cd build\n    cmake ..\n    \n    sudo apt-get install libcurl4-openssl-dev libssl-dev\n    make\n\ngit clone https://github.com/open-source-parsers/jsoncpp.git\n\n    mkdir -p build/debug\n    cd build/debug\n    cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G \"Unix Makefiles\" ../..\n    make\n\nsudo apt install libapr1-dev\n\nsudo apt install libaprutil1-dev\n\nsudo apt install libmxml-dev\n\nsudo apt-get install uuid-dev \n\ngit clone https://github.com/aliyun/aliyun-oss-c-sdk.git //好像安装有点问题\n\n    ./configure\n    make\n    make install\n\nhttps://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/102787/cn_zh/1558078831675/VodSDK-C_1.0.0.tar.gz?spm=a2c4g.11186623.0.0.65c71cd50vaal4&file=VodSDK-C_1.0.0.tar.gz //不知道怎么安装\n\n//找阿里云帮忙实现：[使用C/C++ SDK上传文件_视频点播(VOD)-阿里云帮助中心 (aliyun.com)](https://help.aliyun.com/zh/vod/developer-reference/upload-sdk-for-c-or-cpp?spm=a2c4g.11186623.0.0.61dd2c16XPqrTn#multiTask7060)\n\n    cmake .\n    make\n    make install\n\ngit clone https://github.com/ithewei/libhv\n\n    mkdir build\n    cd build\n    cmake ..\n    cmake --build .\n\nsudo apt-get install libboost-all-dev\n\ngit clone https://github.com/inotify-tools/inotify-tools.git//安装不知道成没成功\n\nsudo apt-get install libfreeimage3 libfreeimage-dev\n\ngit clone https://github.com/dpilger26/NumCpp.git\n\nsudo apt-get install libavformat-dev\n\nsudo apt-get install libswscale-dev\n```\n\n## 四、在PC上编译运行应用\n\nmake 编译程序\n\nmake clean 清除编译\n\n头文件所在位置：\n\n```\n/usr/include/\n\n/usr/local/include/\n\ncp  -r /usr/local/include/vod_sdk/ /usr/include/vod_sdk/  //缺失upload.h头文件，将他进行复制到usr/include/文件夹当中\n\n- 安装依赖\n  sudo apt install libjson-c-dev\n\n- 编译\n  make\n\n- 安装\n  sudo make install\n\n- 更新系统动态库\n  sudo ldconfig\n```\n\n运行项目\n\n先获得虚拟设备参数，导入config中\"/home/user/creality/userdata/config/\"\n\n开始编译主程序  make clean && make -j4（j4、j8代表进程速度，越高越快）\n\n获得各个文件的单独运行包，在vscode中运行./master-server，即可跑通实体机\n\nlinux中/opt目录用来**安装附加软件包**，是用户级的程序目录，可以理解为D:/Software。 安装到/opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。 opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。\n\n## 五、交叉编译到目标板运行\n\n交叉编译讲解：[交叉编译入门及必要配置方法总结_gcc-manifest.txt-CSDN博客](https://blog.csdn.net/lc315yuhuofei/article/details/103782049)\n\n虚拟机交叉编译教程：[立创泰山派学习05-虚拟机ubuntu安装交叉编译工具 - zbl1118 - 博客园 (cnblogs.com)](https://www.cnblogs.com/zblblog/p/18136017)\n\n## 六、知识点总结\n\n#### 1.交叉编译知识点\n\n交叉编译的目的是在一台架构A主机平台上编译另一种架构B目标平台的二进制文件或者库，交叉编译在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。 完整的Linux编译环境需要很多支持包，交叉编译使我们不需要花时间将各种支持包移植到目标板上\n\n主机平台：PC端 Windows 10 专业工作站版\n\n目标平台：Linux Ubuntu22.04.4/VMware® Workstation 16 Pro\n\n通常交叉编译工具链命名规则为：arch-core-kernel-system\n\narch：目标平台架构，如上文提到的arm，mips等；\n\ncore：有两种种情况，第一是CPU Core，如Cortex A8；第二是指定工具链的供应商。如果没有特殊指定，则留空不填。这一组命名比较灵活，有以厂家名称命名的，有以开发者命名的，也有以开发板命名的，或者直接是none或cross的；\n\nkernel： 目标平台的OS，见过的有linux，uclinux，bare-metal（无OS）；\n\nsystem：嵌入式应用二进制接口（Embedded Application Binary Interface），交叉编译工具链所选择的库函数和目标映像的规范，如gnu，gnueabi等。其中gnu等价于glibc+oabi；gnueabi等价于glibc+eabi。若不指定，则也可以留空不填；\n\n上述命名规则并不是统一的规范，使用的时候作为参考就行。我使用的交叉编译工具链名称为：gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu。\n\n获取交叉编译工具链两个途径：\n\n直接下载知名厂家已经编译好的工具链。\n\n```\nhttps://www.linaro.org/downloads/\nhttp://ftp.arm.linux.org.uk/pub/armlinux/toolchain/\nhttp://www.denx.de/en/Software/WebHome\nhttps://launchpad.net/gcc-arm-embedded\n```\n\n自己编译交叉编译工具链\n\n编译交叉编译工具链的工具：crosstool-NG、Buildroot、Embedded Linux Development Kit (ELDK)\n\n#### 2.Linux 系统编程知识点\n\n[Linux 系统编程从入门到进阶 学习指南-阿里云开发者社区 (aliyun.com)](https://developer.aliyun.com/article/1457993)\n\n什么是库函数？\n\n库函数是预编写的代码，存储在库文件中，供程序员使用。它们通过系统调用和操作系统的内核通信。例如，printf（） 是 C 语言的一个库函数，它内部使用 write（） 系统调用来和内核进行交互。\n\n[Linux C函数库大全 - 一觉醒来写程序 - 博客园 (cnblogs.com)](https://www.cnblogs.com/realjimmy/p/12844359.html)\n\n参考手册：[介紹 | Linux C API 参考手册 (gitbooks.io)](https://wizardforcel.gitbooks.io/linux-c-api-ref/content/index.html)\n\n**进程究竟是什么？**\n\n每当你启动一个程序，Linux 系统都会创建一个新的进程。这个进程有它自己的内存地址、系统资源和状态。简而言之，进程是程序的一个运行实例。\n\n**1.管道 （Pipe）**\n\n管道是 Linux 中用于进程间通信的一种机制。它们分为两种类型：**匿名管道**和**有名管道**。\n\n**2.信号 (Signals)**\n\n在 Linux 中，信号是一种用于进程间通信（IPC）的机制，允许操作系统或一个进程向另一个进程发送简单的消息。信号主要用于传递关于系统事件的通知，例如中断请求、程序异常、或其他重要事件。每个信号代表了一个特定类型的事件，并且进程可以根据收到的信号执行相应的动作。\n\n信号是异步的，意味着它们可以在任何时间点被发送到进程，通常与进程的正常控制流无关。信号的使用为进程提供了一种处理外部事件和错误的方式。\n\n**3.文件(Files)**\n\n文件在 Linux 系统中是一种基本的持久化存储机制，可用于**进程间通信**。多个进程可以通过对同一个文件的读取和写入来共享信息。\n\n**4.信号量(Semaphores)**\n信号量是一种在进程间或同一进程的不同线程间提供同步的机制。它是一个计数器，用于控制对共享资源的访问。当计数器值大于0时，表示资源可用；当值为0时，表示资源被占用。进程在访问共享资源前必须减少（wait）信号量，访问后必须增加（post）信号量。\n\n**5.共享内存(Shared Memory)**\n在 Linux 中，共享内存是进程间通信（IPC）的一种形式。当多个进程需要访问相同的数据时，使用共享内存是一种高效的方式。它允许两个或多个进程访问同一个物理内存区域，这使得数据传输不需要通过内核空间，从而提高了通信效率。\n\n**6.消息队列 (Message Queues)**\n\n消息队列是一种允许一个或多个进程向其写入消息，并由一个或多个进程读取消息的 IPC 机制。每条消息都由一个消息队列标识符（ID）识别， 且可以携带一个特定的类型。消息队列允许不同进程非阻塞地发送和接收记录或数据块，这些记录可以是不同类型和大小的。\n\n**7.套接字 (Sockets)**\n\n套接字是一种在不同进程间进行数据交换的通信机制。在 Linux 中，套接字可以用于同一台机器上的进程间通信（IPC）或不同机器上的网络通信。套接字支持多种通信协议，最常见的是TCP（可靠的、连接导向的协议）和UDP（无连接的、不可靠的协议）。\n\n## 七、常用指令\n\n```\n\nuname -m /*查看系统架构*/\nlscpu /*查看更多CPU情况*/\n\ntar -vxf [xxx.tar.gz压缩包]\nmv [现在的位置] [将要移动的位置]\n\npip list /*罗列所有的安装包*/\n\nmake clean  /*清理编译*/\nmake && make install  /*开始编译*/\n\ncp  -r /usr/local/include/vod_sdk/ /usr/include/vod_sdk/  /*复制文件夹到另一个文件夹上*/\n\nsudo apt-get autoremove xxx  /*卸载*/\n```\n\n常用指令汇总：[linux 常用命令【编程必备】-阿里云开发者社区 (aliyun.com)](https://developer.aliyun.com/article/1561151?spm=a2c6h.12873639.article-detail.33.657a1be0lxiKr4&scm=20140722.ID_community@@article@@1561151._.ID_community@@article@@1561151-OR_rec-V_1-RL_community@@article@@1457993)\n","source":"_posts/Work No.1.md","raw":"---\ntitle: Linux环境安装和配置\ntags: Linux\ndate: 2024-07-09\ncategories: Linux\n---\n\n# Linux环境安装和配置\n\n## 一、安装VMware（16/17）\n\n安装版本：VMware® Workstation 16 Pro\n\n安装保姆链接：[安装虚拟机（VMware）保姆级教程（附安装包）_vmware虚拟机-CSDN博客](https://blog.csdn.net/weixin_74195551/article/details/127288338)\n\n破解链接：[VMware Workstation虚拟机合集+激活密钥_Win+Linux_10∕11∕12∕14∕15∕16∕17 - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn](https://www.52pojie.cn/thread-1804571-1-1.html)\n\n破解码：ZF3R0-FHED2-M80TY-8QYGC-NPKYF\n\nMobaXtem链接：[VMware虚拟机配置、连接MobaXterm_mobaxtem怎么连接虚拟机-CSDN博客](https://blog.csdn.net/qq_42578036/article/details/107710339)\n\n终极链接：[保姆级教程|VMware安装Ubuntu20.04(系统安装+网络配置+open-vm-tools安装+国内软件源更新)-CSDN博客](https://blog.csdn.net/lhl_blog/article/details/123406322)\n\n报错：\n\nVMware Workstation 无法连接到虚拟机\n\n点开虚拟机“属性”，在“兼容性”里面设置为以管理员身份运行此程序。\n\nVMware创建新的虚拟机，弹出“您已输入用户名，客户机操作将保留此用户名”错误提示\n\n【root】被系统占用了，让用户新建一个低权限的账户，修改用户名，不要再使用【root】，如：改为【user】或【your_name】\n\nVMware Ubuntu ping 百度不通\n\n选择 虚拟机->设置->网络适配器->自定义特定虚拟网络->选择VMnet1(桥接网络)->确定\n\n目的是确定我们使用的是VMnet1(桥接网络)，之后就可以ping通\n\n安装磁盘管理工具gparted并运行\n\n```\nsudo apt install gparted\nsudo gparted\n```\n\n报错是权限不足,那么修改挂载点的权限即可(注:所谓\"挂载\"的概念体现的是Linux\"一切皆文件\"的思想,物理世界中的一块硬盘在Linux系统的逻辑中也被映射为一个文件)\n\n```\nsudo mount -o remount -rw / \nsudo mount -o remount -rw /var/snap/firefox/common/host-hunspell\n```\n\n## 二、安装Ubuntu（22.04）\n\n安装版本：Linux Ubuntu22.04.4\n\n安装保姆链接：[ubuntu 22.04下载安装_ubuntu22.04下载-CSDN博客](https://blog.csdn.net/weixin_42640280/article/details/128351105)\n\n清华源：[清华大学开源软件镜像站 | Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/)\n\n步骤指令\n\n```\nsudo su //进入管理者模式\n\napt-get update //更新apt\n\napt-get install net-tools //安装ifconfig相关配件\n\napt-get install openssh-server //下载和安装ssh\n\nservice ssh restart //启动ssh\n```\n\n## 三、安装应用依赖第三方库\n\n将工程导入虚拟机中，tar -xvf 解压工程包\n\ngit clone 的所有包的位置可以随机放置，但是需要对每个包进行编译，编译参照readme文件或者网上查找，如果下载不下来，可以直接去官网直接下载zip格式，使用unzip xxx.zip进行安装\n\n```\nsudo apt-get install -y build-essential libsdl2-dev\n\ngit clone http://172.23.88.26:3333/zhangyufeng/libcrlog.git  //按照readme文档可以编译\n\nsudo apt-get install  libjson-c-dev\n\ngit clone https://github.com/protocolbuffers/protobuf.git\n\t//没安装成功，bash: ./autogen.sh: No such file or directory\n\t//在晚上的时候安装成功了，原因是高版本的缺失了./autogen.sh脚本，进行降版本就可以了，花费4小时\n\t//终极感谢博主：https://blog.csdn.net/jax_fanyang/article/details/135937002\n\t\n    1.11 点击链接下载3.21.12版本源码。https://github.com/protocolbuffers/protobuf/releases/tag/v2\n    1.12 cd protobuf-21.12/\n    1.13 ./autogen.sh\n    1.14 ./configure --prefix=/usr/local/protobuf\n    1.15 make\n    1.16 sudo make install\n    1.17 sudo vim /etc/profile\n    1.18 #添加以下内容：\n\n    #(动态库搜索路径) 程序加载运⾏期间查找动态链接库时指定除了系统默认路径之外的其他路径\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/protobuf/lib/\n    #(静态库搜索路径) 程序编译期间查找动态链接库时指定查找共享库的路径\n    export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/protobuf/lib/\n    #执⾏程序搜索路径\n    export PATH=$PATH:/usr/local/protobuf/bin/\n    #c程序头⽂件搜索路径\n    export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/local/protobuf/include/\n    #c++程序头⽂件搜索路径\n    export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/local/protobuf/include/\n    #pkg-config 路径\n    export PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/\n    1.18 source /etc/profile\n    1.19  protoc --version \n    执行之后应该看到==libprotoc 3.21.12==如果出现这个版本信息则安装成功\n    \ngit clone https://github.com/protobuf-c/protobuf-c  //按照readme文档可以编译\n\ngit clone https://github.com/eclipse/paho.mqtt.c.git\n\t\n\tbash\n    cd paho.mqtt.c\n    mkdir build && cd build\n    cmake ..\n    make\n    sudo make install\n\ngit clone https://github.com/eclipse/paho.mqtt.cpp.git（1.3.10）  //安装失败\n\ngit clone https://github.com/aliyun/aliyun-oss-cpp-sdk.git\n\n    cd <path/to/aliyun-oss-cpp-sdk>\n    mkdir build\n    cd build\n    cmake ..\n    \n    sudo apt-get install libcurl4-openssl-dev libssl-dev\n    make\n\ngit clone https://github.com/open-source-parsers/jsoncpp.git\n\n    mkdir -p build/debug\n    cd build/debug\n    cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G \"Unix Makefiles\" ../..\n    make\n\nsudo apt install libapr1-dev\n\nsudo apt install libaprutil1-dev\n\nsudo apt install libmxml-dev\n\nsudo apt-get install uuid-dev \n\ngit clone https://github.com/aliyun/aliyun-oss-c-sdk.git //好像安装有点问题\n\n    ./configure\n    make\n    make install\n\nhttps://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/102787/cn_zh/1558078831675/VodSDK-C_1.0.0.tar.gz?spm=a2c4g.11186623.0.0.65c71cd50vaal4&file=VodSDK-C_1.0.0.tar.gz //不知道怎么安装\n\n//找阿里云帮忙实现：[使用C/C++ SDK上传文件_视频点播(VOD)-阿里云帮助中心 (aliyun.com)](https://help.aliyun.com/zh/vod/developer-reference/upload-sdk-for-c-or-cpp?spm=a2c4g.11186623.0.0.61dd2c16XPqrTn#multiTask7060)\n\n    cmake .\n    make\n    make install\n\ngit clone https://github.com/ithewei/libhv\n\n    mkdir build\n    cd build\n    cmake ..\n    cmake --build .\n\nsudo apt-get install libboost-all-dev\n\ngit clone https://github.com/inotify-tools/inotify-tools.git//安装不知道成没成功\n\nsudo apt-get install libfreeimage3 libfreeimage-dev\n\ngit clone https://github.com/dpilger26/NumCpp.git\n\nsudo apt-get install libavformat-dev\n\nsudo apt-get install libswscale-dev\n```\n\n## 四、在PC上编译运行应用\n\nmake 编译程序\n\nmake clean 清除编译\n\n头文件所在位置：\n\n```\n/usr/include/\n\n/usr/local/include/\n\ncp  -r /usr/local/include/vod_sdk/ /usr/include/vod_sdk/  //缺失upload.h头文件，将他进行复制到usr/include/文件夹当中\n\n- 安装依赖\n  sudo apt install libjson-c-dev\n\n- 编译\n  make\n\n- 安装\n  sudo make install\n\n- 更新系统动态库\n  sudo ldconfig\n```\n\n运行项目\n\n先获得虚拟设备参数，导入config中\"/home/user/creality/userdata/config/\"\n\n开始编译主程序  make clean && make -j4（j4、j8代表进程速度，越高越快）\n\n获得各个文件的单独运行包，在vscode中运行./master-server，即可跑通实体机\n\nlinux中/opt目录用来**安装附加软件包**，是用户级的程序目录，可以理解为D:/Software。 安装到/opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。 opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。\n\n## 五、交叉编译到目标板运行\n\n交叉编译讲解：[交叉编译入门及必要配置方法总结_gcc-manifest.txt-CSDN博客](https://blog.csdn.net/lc315yuhuofei/article/details/103782049)\n\n虚拟机交叉编译教程：[立创泰山派学习05-虚拟机ubuntu安装交叉编译工具 - zbl1118 - 博客园 (cnblogs.com)](https://www.cnblogs.com/zblblog/p/18136017)\n\n## 六、知识点总结\n\n#### 1.交叉编译知识点\n\n交叉编译的目的是在一台架构A主机平台上编译另一种架构B目标平台的二进制文件或者库，交叉编译在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。 完整的Linux编译环境需要很多支持包，交叉编译使我们不需要花时间将各种支持包移植到目标板上\n\n主机平台：PC端 Windows 10 专业工作站版\n\n目标平台：Linux Ubuntu22.04.4/VMware® Workstation 16 Pro\n\n通常交叉编译工具链命名规则为：arch-core-kernel-system\n\narch：目标平台架构，如上文提到的arm，mips等；\n\ncore：有两种种情况，第一是CPU Core，如Cortex A8；第二是指定工具链的供应商。如果没有特殊指定，则留空不填。这一组命名比较灵活，有以厂家名称命名的，有以开发者命名的，也有以开发板命名的，或者直接是none或cross的；\n\nkernel： 目标平台的OS，见过的有linux，uclinux，bare-metal（无OS）；\n\nsystem：嵌入式应用二进制接口（Embedded Application Binary Interface），交叉编译工具链所选择的库函数和目标映像的规范，如gnu，gnueabi等。其中gnu等价于glibc+oabi；gnueabi等价于glibc+eabi。若不指定，则也可以留空不填；\n\n上述命名规则并不是统一的规范，使用的时候作为参考就行。我使用的交叉编译工具链名称为：gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu。\n\n获取交叉编译工具链两个途径：\n\n直接下载知名厂家已经编译好的工具链。\n\n```\nhttps://www.linaro.org/downloads/\nhttp://ftp.arm.linux.org.uk/pub/armlinux/toolchain/\nhttp://www.denx.de/en/Software/WebHome\nhttps://launchpad.net/gcc-arm-embedded\n```\n\n自己编译交叉编译工具链\n\n编译交叉编译工具链的工具：crosstool-NG、Buildroot、Embedded Linux Development Kit (ELDK)\n\n#### 2.Linux 系统编程知识点\n\n[Linux 系统编程从入门到进阶 学习指南-阿里云开发者社区 (aliyun.com)](https://developer.aliyun.com/article/1457993)\n\n什么是库函数？\n\n库函数是预编写的代码，存储在库文件中，供程序员使用。它们通过系统调用和操作系统的内核通信。例如，printf（） 是 C 语言的一个库函数，它内部使用 write（） 系统调用来和内核进行交互。\n\n[Linux C函数库大全 - 一觉醒来写程序 - 博客园 (cnblogs.com)](https://www.cnblogs.com/realjimmy/p/12844359.html)\n\n参考手册：[介紹 | Linux C API 参考手册 (gitbooks.io)](https://wizardforcel.gitbooks.io/linux-c-api-ref/content/index.html)\n\n**进程究竟是什么？**\n\n每当你启动一个程序，Linux 系统都会创建一个新的进程。这个进程有它自己的内存地址、系统资源和状态。简而言之，进程是程序的一个运行实例。\n\n**1.管道 （Pipe）**\n\n管道是 Linux 中用于进程间通信的一种机制。它们分为两种类型：**匿名管道**和**有名管道**。\n\n**2.信号 (Signals)**\n\n在 Linux 中，信号是一种用于进程间通信（IPC）的机制，允许操作系统或一个进程向另一个进程发送简单的消息。信号主要用于传递关于系统事件的通知，例如中断请求、程序异常、或其他重要事件。每个信号代表了一个特定类型的事件，并且进程可以根据收到的信号执行相应的动作。\n\n信号是异步的，意味着它们可以在任何时间点被发送到进程，通常与进程的正常控制流无关。信号的使用为进程提供了一种处理外部事件和错误的方式。\n\n**3.文件(Files)**\n\n文件在 Linux 系统中是一种基本的持久化存储机制，可用于**进程间通信**。多个进程可以通过对同一个文件的读取和写入来共享信息。\n\n**4.信号量(Semaphores)**\n信号量是一种在进程间或同一进程的不同线程间提供同步的机制。它是一个计数器，用于控制对共享资源的访问。当计数器值大于0时，表示资源可用；当值为0时，表示资源被占用。进程在访问共享资源前必须减少（wait）信号量，访问后必须增加（post）信号量。\n\n**5.共享内存(Shared Memory)**\n在 Linux 中，共享内存是进程间通信（IPC）的一种形式。当多个进程需要访问相同的数据时，使用共享内存是一种高效的方式。它允许两个或多个进程访问同一个物理内存区域，这使得数据传输不需要通过内核空间，从而提高了通信效率。\n\n**6.消息队列 (Message Queues)**\n\n消息队列是一种允许一个或多个进程向其写入消息，并由一个或多个进程读取消息的 IPC 机制。每条消息都由一个消息队列标识符（ID）识别， 且可以携带一个特定的类型。消息队列允许不同进程非阻塞地发送和接收记录或数据块，这些记录可以是不同类型和大小的。\n\n**7.套接字 (Sockets)**\n\n套接字是一种在不同进程间进行数据交换的通信机制。在 Linux 中，套接字可以用于同一台机器上的进程间通信（IPC）或不同机器上的网络通信。套接字支持多种通信协议，最常见的是TCP（可靠的、连接导向的协议）和UDP（无连接的、不可靠的协议）。\n\n## 七、常用指令\n\n```\n\nuname -m /*查看系统架构*/\nlscpu /*查看更多CPU情况*/\n\ntar -vxf [xxx.tar.gz压缩包]\nmv [现在的位置] [将要移动的位置]\n\npip list /*罗列所有的安装包*/\n\nmake clean  /*清理编译*/\nmake && make install  /*开始编译*/\n\ncp  -r /usr/local/include/vod_sdk/ /usr/include/vod_sdk/  /*复制文件夹到另一个文件夹上*/\n\nsudo apt-get autoremove xxx  /*卸载*/\n```\n\n常用指令汇总：[linux 常用命令【编程必备】-阿里云开发者社区 (aliyun.com)](https://developer.aliyun.com/article/1561151?spm=a2c6h.12873639.article-detail.33.657a1be0lxiKr4&scm=20140722.ID_community@@article@@1561151._.ID_community@@article@@1561151-OR_rec-V_1-RL_community@@article@@1457993)\n","slug":"Work No.1","published":1,"updated":"2024-07-26T09:52:41.100Z","_id":"clz0qu1nd0002rcfbd74jfitf","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Linux环境安装和配置\"><a href=\"#Linux环境安装和配置\" class=\"headerlink\" title=\"Linux环境安装和配置\"></a>Linux环境安装和配置</h1><h2 id=\"一、安装VMware（16-17）\"><a href=\"#一、安装VMware（16-17）\" class=\"headerlink\" title=\"一、安装VMware（16&#x2F;17）\"></a>一、安装VMware（16&#x2F;17）</h2><p>安装版本：VMware® Workstation 16 Pro</p>\n<p>安装保姆链接：<a href=\"https://blog.csdn.net/weixin_74195551/article/details/127288338\">安装虚拟机（VMware）保姆级教程（附安装包）_vmware虚拟机-CSDN博客</a></p>\n<p>破解链接：<a href=\"https://www.52pojie.cn/thread-1804571-1-1.html\">VMware Workstation虚拟机合集+激活密钥_Win+Linux_10∕11∕12∕14∕15∕16∕17 - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>\n<p>破解码：ZF3R0-FHED2-M80TY-8QYGC-NPKYF</p>\n<p>MobaXtem链接：<a href=\"https://blog.csdn.net/qq_42578036/article/details/107710339\">VMware虚拟机配置、连接MobaXterm_mobaxtem怎么连接虚拟机-CSDN博客</a></p>\n<p>终极链接：<a href=\"https://blog.csdn.net/lhl_blog/article/details/123406322\">保姆级教程|VMware安装Ubuntu20.04(系统安装+网络配置+open-vm-tools安装+国内软件源更新)-CSDN博客</a></p>\n<p>报错：</p>\n<p>VMware Workstation 无法连接到虚拟机</p>\n<p>点开虚拟机“属性”，在“兼容性”里面设置为以管理员身份运行此程序。</p>\n<p>VMware创建新的虚拟机，弹出“您已输入用户名，客户机操作将保留此用户名”错误提示</p>\n<p>【root】被系统占用了，让用户新建一个低权限的账户，修改用户名，不要再使用【root】，如：改为【user】或【your_name】</p>\n<p>VMware Ubuntu ping 百度不通</p>\n<p>选择 虚拟机-&gt;设置-&gt;网络适配器-&gt;自定义特定虚拟网络-&gt;选择VMnet1(桥接网络)-&gt;确定</p>\n<p>目的是确定我们使用的是VMnet1(桥接网络)，之后就可以ping通</p>\n<p>安装磁盘管理工具gparted并运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> apt install gparted<br><span class=\"hljs-built_in\">sudo</span> gparted<br></code></pre></td></tr></table></figure>\n\n<p>报错是权限不足,那么修改挂载点的权限即可(注:所谓”挂载”的概念体现的是Linux”一切皆文件”的思想,物理世界中的一块硬盘在Linux系统的逻辑中也被映射为一个文件)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> mount -o remount -rw / <br><span class=\"hljs-built_in\">sudo</span> mount -o remount -rw /var/snap/firefox/common/host-hunspell<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、安装Ubuntu（22-04）\"><a href=\"#二、安装Ubuntu（22-04）\" class=\"headerlink\" title=\"二、安装Ubuntu（22.04）\"></a>二、安装Ubuntu（22.04）</h2><p>安装版本：Linux Ubuntu22.04.4</p>\n<p>安装保姆链接：<a href=\"https://blog.csdn.net/weixin_42640280/article/details/128351105\">ubuntu 22.04下载安装_ubuntu22.04下载-CSDN博客</a></p>\n<p>清华源：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/\">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>\n<p>步骤指令</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">sudo su <span class=\"hljs-comment\">//进入管理者模式</span><br><br>apt-<span class=\"hljs-built_in\">get</span> <span class=\"hljs-keyword\">update</span> <span class=\"hljs-comment\">//更新apt</span><br><br>apt-<span class=\"hljs-built_in\">get</span> install net-tools <span class=\"hljs-comment\">//安装ifconfig相关配件</span><br><br>apt-<span class=\"hljs-built_in\">get</span> install openssh-server <span class=\"hljs-comment\">//下载和安装ssh</span><br><br>service ssh restart <span class=\"hljs-comment\">//启动ssh</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三、安装应用依赖第三方库\"><a href=\"#三、安装应用依赖第三方库\" class=\"headerlink\" title=\"三、安装应用依赖第三方库\"></a>三、安装应用依赖第三方库</h2><p>将工程导入虚拟机中，tar -xvf 解压工程包</p>\n<p>git clone 的所有包的位置可以随机放置，但是需要对每个包进行编译，编译参照readme文件或者网上查找，如果下载不下来，可以直接去官网直接下载zip格式，使用unzip xxx.zip进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> apt-get install -y build-essential libsdl2-dev<br><br>git <span class=\"hljs-built_in\">clone</span> http://172.23.88.26:3333/zhangyufeng/libcrlog.git  //按照readme文档可以编译<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install  libjson-c-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/protocolbuffers/protobuf.git<br>\t//没安装成功，bash: ./autogen.sh: No such file or directory<br>\t//在晚上的时候安装成功了，原因是高版本的缺失了./autogen.sh脚本，进行降版本就可以了，花费4小时<br>\t//终极感谢博主：https://blog.csdn.net/jax_fanyang/article/details/135937002<br>\t<br>    1.11 点击链接下载3.21.12版本源码。https://github.com/protocolbuffers/protobuf/releases/tag/v2<br>    1.12 <span class=\"hljs-built_in\">cd</span> protobuf-21.12/<br>    1.13 ./autogen.sh<br>    1.14 ./configure --prefix=/usr/local/protobuf<br>    1.15 make<br>    1.16 <span class=\"hljs-built_in\">sudo</span> make install<br>    1.17 <span class=\"hljs-built_in\">sudo</span> vim /etc/profile<br>    1.18 <span class=\"hljs-comment\">#添加以下内容：</span><br><br>    <span class=\"hljs-comment\">#(动态库搜索路径) 程序加载运⾏期间查找动态链接库时指定除了系统默认路径之外的其他路径</span><br>    <span class=\"hljs-built_in\">export</span> LD_LIBRARY_PATH=<span class=\"hljs-variable\">$LD_LIBRARY_PATH</span>:/usr/local/protobuf/lib/<br>    <span class=\"hljs-comment\">#(静态库搜索路径) 程序编译期间查找动态链接库时指定查找共享库的路径</span><br>    <span class=\"hljs-built_in\">export</span> LIBRARY_PATH=<span class=\"hljs-variable\">$LIBRARY_PATH</span>:/usr/local/protobuf/lib/<br>    <span class=\"hljs-comment\">#执⾏程序搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$PATH</span>:/usr/local/protobuf/bin/<br>    <span class=\"hljs-comment\">#c程序头⽂件搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> C_INCLUDE_PATH=<span class=\"hljs-variable\">$C_INCLUDE_PATH</span>:/usr/local/protobuf/include/<br>    <span class=\"hljs-comment\">#c++程序头⽂件搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> CPLUS_INCLUDE_PATH=<span class=\"hljs-variable\">$CPLUS_INCLUDE_PATH</span>:/usr/local/protobuf/include/<br>    <span class=\"hljs-comment\">#pkg-config 路径</span><br>    <span class=\"hljs-built_in\">export</span> PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/<br>    1.18 <span class=\"hljs-built_in\">source</span> /etc/profile<br>    1.19  protoc --version <br>    执行之后应该看到==libprotoc 3.21.12==如果出现这个版本信息则安装成功<br>    <br>git <span class=\"hljs-built_in\">clone</span> https://github.com/protobuf-c/protobuf-c  //按照readme文档可以编译<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/eclipse/paho.mqtt.c.git<br>\t<br>\tbash<br>    <span class=\"hljs-built_in\">cd</span> paho.mqtt.c<br>    <span class=\"hljs-built_in\">mkdir</span> build &amp;&amp; <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    make<br>    <span class=\"hljs-built_in\">sudo</span> make install<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/eclipse/paho.mqtt.cpp.git（1.3.10）  //安装失败<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/aliyun/aliyun-oss-cpp-sdk.git<br><br>    <span class=\"hljs-built_in\">cd</span> &lt;path/to/aliyun-oss-cpp-sdk&gt;<br>    <span class=\"hljs-built_in\">mkdir</span> build<br>    <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    <br>    <span class=\"hljs-built_in\">sudo</span> apt-get install libcurl4-openssl-dev libssl-dev<br>    make<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/open-source-parsers/jsoncpp.git<br><br>    <span class=\"hljs-built_in\">mkdir</span> -p build/debug<br>    <span class=\"hljs-built_in\">cd</span> build/debug<br>    cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G <span class=\"hljs-string\">&quot;Unix Makefiles&quot;</span> ../..<br>    make<br><br><span class=\"hljs-built_in\">sudo</span> apt install libapr1-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt install libaprutil1-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt install libmxml-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install uuid-dev <br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/aliyun/aliyun-oss-c-sdk.git //好像安装有点问题<br><br>    ./configure<br>    make<br>    make install<br><br>https://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/102787/cn_zh/1558078831675/VodSDK-C_1.0.0.tar.gz?spm=a2c4g.11186623.0.0.65c71cd50vaal4&amp;file=VodSDK-C_1.0.0.tar.gz //不知道怎么安装<br><br>//找阿里云帮忙实现：[使用C/C++ SDK上传文件_视频点播(VOD)-阿里云帮助中心 (aliyun.com)](https://help.aliyun.com/zh/vod/developer-reference/upload-sdk-for-c-or-cpp?spm=a2c4g.11186623.0.0.61dd2c16XPqrTn#multiTask7060)<br><br>    cmake .<br>    make<br>    make install<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/ithewei/libhv<br><br>    <span class=\"hljs-built_in\">mkdir</span> build<br>    <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    cmake --build .<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libboost-all-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/inotify-tools/inotify-tools.git//安装不知道成没成功<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libfreeimage3 libfreeimage-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/dpilger26/NumCpp.git<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libavformat-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libswscale-dev<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、在PC上编译运行应用\"><a href=\"#四、在PC上编译运行应用\" class=\"headerlink\" title=\"四、在PC上编译运行应用\"></a>四、在PC上编译运行应用</h2><p>make 编译程序</p>\n<p>make clean 清除编译</p>\n<p>头文件所在位置：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">/usr/i</span>nclude/<br><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span><br><br>cp  -r <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-regexp\">/ /u</span>sr<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-regexp\">/  /</span><span class=\"hljs-regexp\">/缺失upload.h头文件，将他进行复制到usr/i</span>nclude/文件夹当中<br><br>- 安装依赖<br>  sudo apt install libjson-c-dev<br><br>- 编译<br>  make<br><br>- 安装<br>  sudo make install<br><br>- 更新系统动态库<br>  sudo ldconfig<br></code></pre></td></tr></table></figure>\n\n<p>运行项目</p>\n<p>先获得虚拟设备参数，导入config中”&#x2F;home&#x2F;user&#x2F;creality&#x2F;userdata&#x2F;config&#x2F;“</p>\n<p>开始编译主程序  make clean &amp;&amp; make -j4（j4、j8代表进程速度，越高越快）</p>\n<p>获得各个文件的单独运行包，在vscode中运行.&#x2F;master-server，即可跑通实体机</p>\n<p>linux中&#x2F;opt目录用来<strong>安装附加软件包</strong>，是用户级的程序目录，可以理解为D:&#x2F;Software。 安装到&#x2F;opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。 opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。</p>\n<h2 id=\"五、交叉编译到目标板运行\"><a href=\"#五、交叉编译到目标板运行\" class=\"headerlink\" title=\"五、交叉编译到目标板运行\"></a>五、交叉编译到目标板运行</h2><p>交叉编译讲解：<a href=\"https://blog.csdn.net/lc315yuhuofei/article/details/103782049\">交叉编译入门及必要配置方法总结_gcc-manifest.txt-CSDN博客</a></p>\n<p>虚拟机交叉编译教程：<a href=\"https://www.cnblogs.com/zblblog/p/18136017\">立创泰山派学习05-虚拟机ubuntu安装交叉编译工具 - zbl1118 - 博客园 (cnblogs.com)</a></p>\n<h2 id=\"六、知识点总结\"><a href=\"#六、知识点总结\" class=\"headerlink\" title=\"六、知识点总结\"></a>六、知识点总结</h2><h4 id=\"1-交叉编译知识点\"><a href=\"#1-交叉编译知识点\" class=\"headerlink\" title=\"1.交叉编译知识点\"></a>1.交叉编译知识点</h4><p>交叉编译的目的是在一台架构A主机平台上编译另一种架构B目标平台的二进制文件或者库，交叉编译在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。 完整的Linux编译环境需要很多支持包，交叉编译使我们不需要花时间将各种支持包移植到目标板上</p>\n<p>主机平台：PC端 Windows 10 专业工作站版</p>\n<p>目标平台：Linux Ubuntu22.04.4&#x2F;VMware® Workstation 16 Pro</p>\n<p>通常交叉编译工具链命名规则为：arch-core-kernel-system</p>\n<p>arch：目标平台架构，如上文提到的arm，mips等；</p>\n<p>core：有两种种情况，第一是CPU Core，如Cortex A8；第二是指定工具链的供应商。如果没有特殊指定，则留空不填。这一组命名比较灵活，有以厂家名称命名的，有以开发者命名的，也有以开发板命名的，或者直接是none或cross的；</p>\n<p>kernel： 目标平台的OS，见过的有linux，uclinux，bare-metal（无OS）；</p>\n<p>system：嵌入式应用二进制接口（Embedded Application Binary Interface），交叉编译工具链所选择的库函数和目标映像的规范，如gnu，gnueabi等。其中gnu等价于glibc+oabi；gnueabi等价于glibc+eabi。若不指定，则也可以留空不填；</p>\n<p>上述命名规则并不是统一的规范，使用的时候作为参考就行。我使用的交叉编译工具链名称为：gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu。</p>\n<p>获取交叉编译工具链两个途径：</p>\n<p>直接下载知名厂家已经编译好的工具链。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">https:<span class=\"hljs-regexp\">//</span>www.linaro.org<span class=\"hljs-regexp\">/downloads/</span><br>http:<span class=\"hljs-regexp\">//</span>ftp.arm.linux.org.uk<span class=\"hljs-regexp\">/pub/</span>armlinux<span class=\"hljs-regexp\">/toolchain/</span><br>http:<span class=\"hljs-regexp\">//</span>www.denx.de<span class=\"hljs-regexp\">/en/</span>Software/WebHome<br>https:<span class=\"hljs-regexp\">//</span>launchpad.net/gcc-arm-embedded<br></code></pre></td></tr></table></figure>\n\n<p>自己编译交叉编译工具链</p>\n<p>编译交叉编译工具链的工具：crosstool-NG、Buildroot、Embedded Linux Development Kit (ELDK)</p>\n<h4 id=\"2-Linux-系统编程知识点\"><a href=\"#2-Linux-系统编程知识点\" class=\"headerlink\" title=\"2.Linux 系统编程知识点\"></a>2.Linux 系统编程知识点</h4><p><a href=\"https://developer.aliyun.com/article/1457993\">Linux 系统编程从入门到进阶 学习指南-阿里云开发者社区 (aliyun.com)</a></p>\n<p>什么是库函数？</p>\n<p>库函数是预编写的代码，存储在库文件中，供程序员使用。它们通过系统调用和操作系统的内核通信。例如，printf（） 是 C 语言的一个库函数，它内部使用 write（） 系统调用来和内核进行交互。</p>\n<p><a href=\"https://www.cnblogs.com/realjimmy/p/12844359.html\">Linux C函数库大全 - 一觉醒来写程序 - 博客园 (cnblogs.com)</a></p>\n<p>参考手册：<a href=\"https://wizardforcel.gitbooks.io/linux-c-api-ref/content/index.html\">介紹 | Linux C API 参考手册 (gitbooks.io)</a></p>\n<p><strong>进程究竟是什么？</strong></p>\n<p>每当你启动一个程序，Linux 系统都会创建一个新的进程。这个进程有它自己的内存地址、系统资源和状态。简而言之，进程是程序的一个运行实例。</p>\n<p><strong>1.管道 （Pipe）</strong></p>\n<p>管道是 Linux 中用于进程间通信的一种机制。它们分为两种类型：<strong>匿名管道</strong>和<strong>有名管道</strong>。</p>\n<p><strong>2.信号 (Signals)</strong></p>\n<p>在 Linux 中，信号是一种用于进程间通信（IPC）的机制，允许操作系统或一个进程向另一个进程发送简单的消息。信号主要用于传递关于系统事件的通知，例如中断请求、程序异常、或其他重要事件。每个信号代表了一个特定类型的事件，并且进程可以根据收到的信号执行相应的动作。</p>\n<p>信号是异步的，意味着它们可以在任何时间点被发送到进程，通常与进程的正常控制流无关。信号的使用为进程提供了一种处理外部事件和错误的方式。</p>\n<p><strong>3.文件(Files)</strong></p>\n<p>文件在 Linux 系统中是一种基本的持久化存储机制，可用于<strong>进程间通信</strong>。多个进程可以通过对同一个文件的读取和写入来共享信息。</p>\n<p><strong>4.信号量(Semaphores)</strong><br>信号量是一种在进程间或同一进程的不同线程间提供同步的机制。它是一个计数器，用于控制对共享资源的访问。当计数器值大于0时，表示资源可用；当值为0时，表示资源被占用。进程在访问共享资源前必须减少（wait）信号量，访问后必须增加（post）信号量。</p>\n<p><strong>5.共享内存(Shared Memory)</strong><br>在 Linux 中，共享内存是进程间通信（IPC）的一种形式。当多个进程需要访问相同的数据时，使用共享内存是一种高效的方式。它允许两个或多个进程访问同一个物理内存区域，这使得数据传输不需要通过内核空间，从而提高了通信效率。</p>\n<p><strong>6.消息队列 (Message Queues)</strong></p>\n<p>消息队列是一种允许一个或多个进程向其写入消息，并由一个或多个进程读取消息的 IPC 机制。每条消息都由一个消息队列标识符（ID）识别， 且可以携带一个特定的类型。消息队列允许不同进程非阻塞地发送和接收记录或数据块，这些记录可以是不同类型和大小的。</p>\n<p><strong>7.套接字 (Sockets)</strong></p>\n<p>套接字是一种在不同进程间进行数据交换的通信机制。在 Linux 中，套接字可以用于同一台机器上的进程间通信（IPC）或不同机器上的网络通信。套接字支持多种通信协议，最常见的是TCP（可靠的、连接导向的协议）和UDP（无连接的、不可靠的协议）。</p>\n<h2 id=\"七、常用指令\"><a href=\"#七、常用指令\" class=\"headerlink\" title=\"七、常用指令\"></a>七、常用指令</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\"><br>uname <span class=\"hljs-operator\">-</span>m <span class=\"hljs-comment\">/*查看系统架构*/</span><br>lscpu <span class=\"hljs-comment\">/*查看更多CPU情况*/</span><br><br>tar <span class=\"hljs-operator\">-</span>vxf [xxx.tar.gz压缩包]<br>mv [现在的位置] [将要移动的位置]<br><br>pip list <span class=\"hljs-comment\">/*罗列所有的安装包*/</span><br><br>make clean  <span class=\"hljs-comment\">/*清理编译*/</span><br>make <span class=\"hljs-operator\">&amp;&amp;</span> make install  <span class=\"hljs-comment\">/*开始编译*/</span><br><br>cp  <span class=\"hljs-operator\">-</span>r <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-operator\">/</span> <span class=\"hljs-regexp\">/usr/</span>include<span class=\"hljs-regexp\">/vod_sdk/</span>  <span class=\"hljs-comment\">/*复制文件夹到另一个文件夹上*/</span><br><br>sudo apt<span class=\"hljs-operator\">-</span><span class=\"hljs-keyword\">get</span> autoremove xxx  <span class=\"hljs-comment\">/*卸载*/</span><br></code></pre></td></tr></table></figure>\n\n<p>常用指令汇总：<a href=\"https://developer.aliyun.com/article/1561151?spm=a2c6h.12873639.article-detail.33.657a1be0lxiKr4&scm=20140722.ID_community@@article@@1561151._.ID_community@@article@@1561151-OR_rec-V_1-RL_community@@article@@1457993\">linux 常用命令【编程必备】-阿里云开发者社区 (aliyun.com)</a></p>\n","excerpt":"","more":"<h1 id=\"Linux环境安装和配置\"><a href=\"#Linux环境安装和配置\" class=\"headerlink\" title=\"Linux环境安装和配置\"></a>Linux环境安装和配置</h1><h2 id=\"一、安装VMware（16-17）\"><a href=\"#一、安装VMware（16-17）\" class=\"headerlink\" title=\"一、安装VMware（16&#x2F;17）\"></a>一、安装VMware（16&#x2F;17）</h2><p>安装版本：VMware® Workstation 16 Pro</p>\n<p>安装保姆链接：<a href=\"https://blog.csdn.net/weixin_74195551/article/details/127288338\">安装虚拟机（VMware）保姆级教程（附安装包）_vmware虚拟机-CSDN博客</a></p>\n<p>破解链接：<a href=\"https://www.52pojie.cn/thread-1804571-1-1.html\">VMware Workstation虚拟机合集+激活密钥_Win+Linux_10∕11∕12∕14∕15∕16∕17 - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>\n<p>破解码：ZF3R0-FHED2-M80TY-8QYGC-NPKYF</p>\n<p>MobaXtem链接：<a href=\"https://blog.csdn.net/qq_42578036/article/details/107710339\">VMware虚拟机配置、连接MobaXterm_mobaxtem怎么连接虚拟机-CSDN博客</a></p>\n<p>终极链接：<a href=\"https://blog.csdn.net/lhl_blog/article/details/123406322\">保姆级教程|VMware安装Ubuntu20.04(系统安装+网络配置+open-vm-tools安装+国内软件源更新)-CSDN博客</a></p>\n<p>报错：</p>\n<p>VMware Workstation 无法连接到虚拟机</p>\n<p>点开虚拟机“属性”，在“兼容性”里面设置为以管理员身份运行此程序。</p>\n<p>VMware创建新的虚拟机，弹出“您已输入用户名，客户机操作将保留此用户名”错误提示</p>\n<p>【root】被系统占用了，让用户新建一个低权限的账户，修改用户名，不要再使用【root】，如：改为【user】或【your_name】</p>\n<p>VMware Ubuntu ping 百度不通</p>\n<p>选择 虚拟机-&gt;设置-&gt;网络适配器-&gt;自定义特定虚拟网络-&gt;选择VMnet1(桥接网络)-&gt;确定</p>\n<p>目的是确定我们使用的是VMnet1(桥接网络)，之后就可以ping通</p>\n<p>安装磁盘管理工具gparted并运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> apt install gparted<br><span class=\"hljs-built_in\">sudo</span> gparted<br></code></pre></td></tr></table></figure>\n\n<p>报错是权限不足,那么修改挂载点的权限即可(注:所谓”挂载”的概念体现的是Linux”一切皆文件”的思想,物理世界中的一块硬盘在Linux系统的逻辑中也被映射为一个文件)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> mount -o remount -rw / <br><span class=\"hljs-built_in\">sudo</span> mount -o remount -rw /var/snap/firefox/common/host-hunspell<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、安装Ubuntu（22-04）\"><a href=\"#二、安装Ubuntu（22-04）\" class=\"headerlink\" title=\"二、安装Ubuntu（22.04）\"></a>二、安装Ubuntu（22.04）</h2><p>安装版本：Linux Ubuntu22.04.4</p>\n<p>安装保姆链接：<a href=\"https://blog.csdn.net/weixin_42640280/article/details/128351105\">ubuntu 22.04下载安装_ubuntu22.04下载-CSDN博客</a></p>\n<p>清华源：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/\">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>\n<p>步骤指令</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">sudo su <span class=\"hljs-comment\">//进入管理者模式</span><br><br>apt-<span class=\"hljs-built_in\">get</span> <span class=\"hljs-keyword\">update</span> <span class=\"hljs-comment\">//更新apt</span><br><br>apt-<span class=\"hljs-built_in\">get</span> install net-tools <span class=\"hljs-comment\">//安装ifconfig相关配件</span><br><br>apt-<span class=\"hljs-built_in\">get</span> install openssh-server <span class=\"hljs-comment\">//下载和安装ssh</span><br><br>service ssh restart <span class=\"hljs-comment\">//启动ssh</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三、安装应用依赖第三方库\"><a href=\"#三、安装应用依赖第三方库\" class=\"headerlink\" title=\"三、安装应用依赖第三方库\"></a>三、安装应用依赖第三方库</h2><p>将工程导入虚拟机中，tar -xvf 解压工程包</p>\n<p>git clone 的所有包的位置可以随机放置，但是需要对每个包进行编译，编译参照readme文件或者网上查找，如果下载不下来，可以直接去官网直接下载zip格式，使用unzip xxx.zip进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> apt-get install -y build-essential libsdl2-dev<br><br>git <span class=\"hljs-built_in\">clone</span> http://172.23.88.26:3333/zhangyufeng/libcrlog.git  //按照readme文档可以编译<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install  libjson-c-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/protocolbuffers/protobuf.git<br>\t//没安装成功，bash: ./autogen.sh: No such file or directory<br>\t//在晚上的时候安装成功了，原因是高版本的缺失了./autogen.sh脚本，进行降版本就可以了，花费4小时<br>\t//终极感谢博主：https://blog.csdn.net/jax_fanyang/article/details/135937002<br>\t<br>    1.11 点击链接下载3.21.12版本源码。https://github.com/protocolbuffers/protobuf/releases/tag/v2<br>    1.12 <span class=\"hljs-built_in\">cd</span> protobuf-21.12/<br>    1.13 ./autogen.sh<br>    1.14 ./configure --prefix=/usr/local/protobuf<br>    1.15 make<br>    1.16 <span class=\"hljs-built_in\">sudo</span> make install<br>    1.17 <span class=\"hljs-built_in\">sudo</span> vim /etc/profile<br>    1.18 <span class=\"hljs-comment\">#添加以下内容：</span><br><br>    <span class=\"hljs-comment\">#(动态库搜索路径) 程序加载运⾏期间查找动态链接库时指定除了系统默认路径之外的其他路径</span><br>    <span class=\"hljs-built_in\">export</span> LD_LIBRARY_PATH=<span class=\"hljs-variable\">$LD_LIBRARY_PATH</span>:/usr/local/protobuf/lib/<br>    <span class=\"hljs-comment\">#(静态库搜索路径) 程序编译期间查找动态链接库时指定查找共享库的路径</span><br>    <span class=\"hljs-built_in\">export</span> LIBRARY_PATH=<span class=\"hljs-variable\">$LIBRARY_PATH</span>:/usr/local/protobuf/lib/<br>    <span class=\"hljs-comment\">#执⾏程序搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$PATH</span>:/usr/local/protobuf/bin/<br>    <span class=\"hljs-comment\">#c程序头⽂件搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> C_INCLUDE_PATH=<span class=\"hljs-variable\">$C_INCLUDE_PATH</span>:/usr/local/protobuf/include/<br>    <span class=\"hljs-comment\">#c++程序头⽂件搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> CPLUS_INCLUDE_PATH=<span class=\"hljs-variable\">$CPLUS_INCLUDE_PATH</span>:/usr/local/protobuf/include/<br>    <span class=\"hljs-comment\">#pkg-config 路径</span><br>    <span class=\"hljs-built_in\">export</span> PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/<br>    1.18 <span class=\"hljs-built_in\">source</span> /etc/profile<br>    1.19  protoc --version <br>    执行之后应该看到==libprotoc 3.21.12==如果出现这个版本信息则安装成功<br>    <br>git <span class=\"hljs-built_in\">clone</span> https://github.com/protobuf-c/protobuf-c  //按照readme文档可以编译<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/eclipse/paho.mqtt.c.git<br>\t<br>\tbash<br>    <span class=\"hljs-built_in\">cd</span> paho.mqtt.c<br>    <span class=\"hljs-built_in\">mkdir</span> build &amp;&amp; <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    make<br>    <span class=\"hljs-built_in\">sudo</span> make install<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/eclipse/paho.mqtt.cpp.git（1.3.10）  //安装失败<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/aliyun/aliyun-oss-cpp-sdk.git<br><br>    <span class=\"hljs-built_in\">cd</span> &lt;path/to/aliyun-oss-cpp-sdk&gt;<br>    <span class=\"hljs-built_in\">mkdir</span> build<br>    <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    <br>    <span class=\"hljs-built_in\">sudo</span> apt-get install libcurl4-openssl-dev libssl-dev<br>    make<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/open-source-parsers/jsoncpp.git<br><br>    <span class=\"hljs-built_in\">mkdir</span> -p build/debug<br>    <span class=\"hljs-built_in\">cd</span> build/debug<br>    cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G <span class=\"hljs-string\">&quot;Unix Makefiles&quot;</span> ../..<br>    make<br><br><span class=\"hljs-built_in\">sudo</span> apt install libapr1-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt install libaprutil1-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt install libmxml-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install uuid-dev <br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/aliyun/aliyun-oss-c-sdk.git //好像安装有点问题<br><br>    ./configure<br>    make<br>    make install<br><br>https://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/102787/cn_zh/1558078831675/VodSDK-C_1.0.0.tar.gz?spm=a2c4g.11186623.0.0.65c71cd50vaal4&amp;file=VodSDK-C_1.0.0.tar.gz //不知道怎么安装<br><br>//找阿里云帮忙实现：[使用C/C++ SDK上传文件_视频点播(VOD)-阿里云帮助中心 (aliyun.com)](https://help.aliyun.com/zh/vod/developer-reference/upload-sdk-for-c-or-cpp?spm=a2c4g.11186623.0.0.61dd2c16XPqrTn#multiTask7060)<br><br>    cmake .<br>    make<br>    make install<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/ithewei/libhv<br><br>    <span class=\"hljs-built_in\">mkdir</span> build<br>    <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    cmake --build .<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libboost-all-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/inotify-tools/inotify-tools.git//安装不知道成没成功<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libfreeimage3 libfreeimage-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/dpilger26/NumCpp.git<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libavformat-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libswscale-dev<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、在PC上编译运行应用\"><a href=\"#四、在PC上编译运行应用\" class=\"headerlink\" title=\"四、在PC上编译运行应用\"></a>四、在PC上编译运行应用</h2><p>make 编译程序</p>\n<p>make clean 清除编译</p>\n<p>头文件所在位置：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">/usr/i</span>nclude/<br><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span><br><br>cp  -r <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-regexp\">/ /u</span>sr<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-regexp\">/  /</span><span class=\"hljs-regexp\">/缺失upload.h头文件，将他进行复制到usr/i</span>nclude/文件夹当中<br><br>- 安装依赖<br>  sudo apt install libjson-c-dev<br><br>- 编译<br>  make<br><br>- 安装<br>  sudo make install<br><br>- 更新系统动态库<br>  sudo ldconfig<br></code></pre></td></tr></table></figure>\n\n<p>运行项目</p>\n<p>先获得虚拟设备参数，导入config中”&#x2F;home&#x2F;user&#x2F;creality&#x2F;userdata&#x2F;config&#x2F;“</p>\n<p>开始编译主程序  make clean &amp;&amp; make -j4（j4、j8代表进程速度，越高越快）</p>\n<p>获得各个文件的单独运行包，在vscode中运行.&#x2F;master-server，即可跑通实体机</p>\n<p>linux中&#x2F;opt目录用来<strong>安装附加软件包</strong>，是用户级的程序目录，可以理解为D:&#x2F;Software。 安装到&#x2F;opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。 opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。</p>\n<h2 id=\"五、交叉编译到目标板运行\"><a href=\"#五、交叉编译到目标板运行\" class=\"headerlink\" title=\"五、交叉编译到目标板运行\"></a>五、交叉编译到目标板运行</h2><p>交叉编译讲解：<a href=\"https://blog.csdn.net/lc315yuhuofei/article/details/103782049\">交叉编译入门及必要配置方法总结_gcc-manifest.txt-CSDN博客</a></p>\n<p>虚拟机交叉编译教程：<a href=\"https://www.cnblogs.com/zblblog/p/18136017\">立创泰山派学习05-虚拟机ubuntu安装交叉编译工具 - zbl1118 - 博客园 (cnblogs.com)</a></p>\n<h2 id=\"六、知识点总结\"><a href=\"#六、知识点总结\" class=\"headerlink\" title=\"六、知识点总结\"></a>六、知识点总结</h2><h4 id=\"1-交叉编译知识点\"><a href=\"#1-交叉编译知识点\" class=\"headerlink\" title=\"1.交叉编译知识点\"></a>1.交叉编译知识点</h4><p>交叉编译的目的是在一台架构A主机平台上编译另一种架构B目标平台的二进制文件或者库，交叉编译在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。 完整的Linux编译环境需要很多支持包，交叉编译使我们不需要花时间将各种支持包移植到目标板上</p>\n<p>主机平台：PC端 Windows 10 专业工作站版</p>\n<p>目标平台：Linux Ubuntu22.04.4&#x2F;VMware® Workstation 16 Pro</p>\n<p>通常交叉编译工具链命名规则为：arch-core-kernel-system</p>\n<p>arch：目标平台架构，如上文提到的arm，mips等；</p>\n<p>core：有两种种情况，第一是CPU Core，如Cortex A8；第二是指定工具链的供应商。如果没有特殊指定，则留空不填。这一组命名比较灵活，有以厂家名称命名的，有以开发者命名的，也有以开发板命名的，或者直接是none或cross的；</p>\n<p>kernel： 目标平台的OS，见过的有linux，uclinux，bare-metal（无OS）；</p>\n<p>system：嵌入式应用二进制接口（Embedded Application Binary Interface），交叉编译工具链所选择的库函数和目标映像的规范，如gnu，gnueabi等。其中gnu等价于glibc+oabi；gnueabi等价于glibc+eabi。若不指定，则也可以留空不填；</p>\n<p>上述命名规则并不是统一的规范，使用的时候作为参考就行。我使用的交叉编译工具链名称为：gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu。</p>\n<p>获取交叉编译工具链两个途径：</p>\n<p>直接下载知名厂家已经编译好的工具链。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">https:<span class=\"hljs-regexp\">//</span>www.linaro.org<span class=\"hljs-regexp\">/downloads/</span><br>http:<span class=\"hljs-regexp\">//</span>ftp.arm.linux.org.uk<span class=\"hljs-regexp\">/pub/</span>armlinux<span class=\"hljs-regexp\">/toolchain/</span><br>http:<span class=\"hljs-regexp\">//</span>www.denx.de<span class=\"hljs-regexp\">/en/</span>Software/WebHome<br>https:<span class=\"hljs-regexp\">//</span>launchpad.net/gcc-arm-embedded<br></code></pre></td></tr></table></figure>\n\n<p>自己编译交叉编译工具链</p>\n<p>编译交叉编译工具链的工具：crosstool-NG、Buildroot、Embedded Linux Development Kit (ELDK)</p>\n<h4 id=\"2-Linux-系统编程知识点\"><a href=\"#2-Linux-系统编程知识点\" class=\"headerlink\" title=\"2.Linux 系统编程知识点\"></a>2.Linux 系统编程知识点</h4><p><a href=\"https://developer.aliyun.com/article/1457993\">Linux 系统编程从入门到进阶 学习指南-阿里云开发者社区 (aliyun.com)</a></p>\n<p>什么是库函数？</p>\n<p>库函数是预编写的代码，存储在库文件中，供程序员使用。它们通过系统调用和操作系统的内核通信。例如，printf（） 是 C 语言的一个库函数，它内部使用 write（） 系统调用来和内核进行交互。</p>\n<p><a href=\"https://www.cnblogs.com/realjimmy/p/12844359.html\">Linux C函数库大全 - 一觉醒来写程序 - 博客园 (cnblogs.com)</a></p>\n<p>参考手册：<a href=\"https://wizardforcel.gitbooks.io/linux-c-api-ref/content/index.html\">介紹 | Linux C API 参考手册 (gitbooks.io)</a></p>\n<p><strong>进程究竟是什么？</strong></p>\n<p>每当你启动一个程序，Linux 系统都会创建一个新的进程。这个进程有它自己的内存地址、系统资源和状态。简而言之，进程是程序的一个运行实例。</p>\n<p><strong>1.管道 （Pipe）</strong></p>\n<p>管道是 Linux 中用于进程间通信的一种机制。它们分为两种类型：<strong>匿名管道</strong>和<strong>有名管道</strong>。</p>\n<p><strong>2.信号 (Signals)</strong></p>\n<p>在 Linux 中，信号是一种用于进程间通信（IPC）的机制，允许操作系统或一个进程向另一个进程发送简单的消息。信号主要用于传递关于系统事件的通知，例如中断请求、程序异常、或其他重要事件。每个信号代表了一个特定类型的事件，并且进程可以根据收到的信号执行相应的动作。</p>\n<p>信号是异步的，意味着它们可以在任何时间点被发送到进程，通常与进程的正常控制流无关。信号的使用为进程提供了一种处理外部事件和错误的方式。</p>\n<p><strong>3.文件(Files)</strong></p>\n<p>文件在 Linux 系统中是一种基本的持久化存储机制，可用于<strong>进程间通信</strong>。多个进程可以通过对同一个文件的读取和写入来共享信息。</p>\n<p><strong>4.信号量(Semaphores)</strong><br>信号量是一种在进程间或同一进程的不同线程间提供同步的机制。它是一个计数器，用于控制对共享资源的访问。当计数器值大于0时，表示资源可用；当值为0时，表示资源被占用。进程在访问共享资源前必须减少（wait）信号量，访问后必须增加（post）信号量。</p>\n<p><strong>5.共享内存(Shared Memory)</strong><br>在 Linux 中，共享内存是进程间通信（IPC）的一种形式。当多个进程需要访问相同的数据时，使用共享内存是一种高效的方式。它允许两个或多个进程访问同一个物理内存区域，这使得数据传输不需要通过内核空间，从而提高了通信效率。</p>\n<p><strong>6.消息队列 (Message Queues)</strong></p>\n<p>消息队列是一种允许一个或多个进程向其写入消息，并由一个或多个进程读取消息的 IPC 机制。每条消息都由一个消息队列标识符（ID）识别， 且可以携带一个特定的类型。消息队列允许不同进程非阻塞地发送和接收记录或数据块，这些记录可以是不同类型和大小的。</p>\n<p><strong>7.套接字 (Sockets)</strong></p>\n<p>套接字是一种在不同进程间进行数据交换的通信机制。在 Linux 中，套接字可以用于同一台机器上的进程间通信（IPC）或不同机器上的网络通信。套接字支持多种通信协议，最常见的是TCP（可靠的、连接导向的协议）和UDP（无连接的、不可靠的协议）。</p>\n<h2 id=\"七、常用指令\"><a href=\"#七、常用指令\" class=\"headerlink\" title=\"七、常用指令\"></a>七、常用指令</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\"><br>uname <span class=\"hljs-operator\">-</span>m <span class=\"hljs-comment\">/*查看系统架构*/</span><br>lscpu <span class=\"hljs-comment\">/*查看更多CPU情况*/</span><br><br>tar <span class=\"hljs-operator\">-</span>vxf [xxx.tar.gz压缩包]<br>mv [现在的位置] [将要移动的位置]<br><br>pip list <span class=\"hljs-comment\">/*罗列所有的安装包*/</span><br><br>make clean  <span class=\"hljs-comment\">/*清理编译*/</span><br>make <span class=\"hljs-operator\">&amp;&amp;</span> make install  <span class=\"hljs-comment\">/*开始编译*/</span><br><br>cp  <span class=\"hljs-operator\">-</span>r <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-operator\">/</span> <span class=\"hljs-regexp\">/usr/</span>include<span class=\"hljs-regexp\">/vod_sdk/</span>  <span class=\"hljs-comment\">/*复制文件夹到另一个文件夹上*/</span><br><br>sudo apt<span class=\"hljs-operator\">-</span><span class=\"hljs-keyword\">get</span> autoremove xxx  <span class=\"hljs-comment\">/*卸载*/</span><br></code></pre></td></tr></table></figure>\n\n<p>常用指令汇总：<a href=\"https://developer.aliyun.com/article/1561151?spm=a2c6h.12873639.article-detail.33.657a1be0lxiKr4&scm=20140722.ID_community@@article@@1561151._.ID_community@@article@@1561151-OR_rec-V_1-RL_community@@article@@1457993\">linux 常用命令【编程必备】-阿里云开发者社区 (aliyun.com)</a></p>\n"},{"title":"Github+HEXO实现网站DIY","date":"2024-07-22T16:00:00.000Z","_content":"\n# Github+HEXO实现网站DIY\n\n### 创建github.page网页\n\n点击Repositories，选择新建Repositories仓库\n\n在仓库名字Repository name栏填写网页的网址，后缀需要添加 .github.io\n\n例如 webname.github.io\n\n![image-20240724153741084.png](https://s2.loli.net/2024/07/25/CagbJOAwjnGZl5h.png)\n\n之后点击 Create repository ，创建该仓库，其他无需调整\n\n之后需要创建一个 index.html 文件，用于后续能够选取分支\n\n![image-20240724154237430.png](https://s2.loli.net/2024/07/25/fCE81aVXuvQHwkK.png)\n\n文件名字输入 index.html，内容为 `<hl> hello </hl>` 这个文件会初始化成一个网页，网页的内容只有 hello，这个随便填就行，后续会用模板，不用考虑这个\n\n![image-20240724154427037.png](https://s2.loli.net/2024/07/25/xcCAzGZfilE8pXI.png)\n\n进入仓库，选择 Setting ，点击 pages ，在 branch 上选择 main 分支（刚刚创建文件也是为了创建这个分支），点击 save 保存，之后等待几分钟，就会出现创建的网址，点击 visit site 即可进入建立的网页\n\n![image-20240724155135615.png](https://s2.loli.net/2024/07/25/iJS68ZOUrkLHKBo.png)\n\n完成这一步之后，就可以得到一个”hello“的网页，该网页没有任何排版和格式\n\n### 配置HEXO并进行部署\n\n打开git bash，执行如下命令安装hexo\n\n```\n\t$ npm install -g hexo-cli # 此命令完成对 hexo 的安装\n```\n\n如果没有安装npm、git、node.js的话\n\nnode.js参考https://blog.csdn.net/yaorongke/article/details/119084295\n\ngit安装参考https://blog.csdn.net/mukes/article/details/115693833\n\n之后随便在想要的地方建一个文件夹，这个文件夹的作用是用于博客文章存放和仓库交互，例如<blog>\n\n进入该文件，将该文件初始化\n\n```\n\t$ cd blog # 进入该文件夹\n\t$ hexo init # 该命令完成 hexo 在本地博客目录的初始化\n```\n\n之后生成网页的静态文件，如果需要更新网页的配置，需要先清理，在重新生成\n\n```\n\t$ hexo g # 生成静态文件，生成的文件在public文件夹里面\n\t\n\t$ hexo clean # 清除生成的静态文件\n```\n\n可以进行本地预览，本地预览的ctrl+c会退出运行，所以用右键复制网址到网页上预览\n\n```\n\t$ hexo s # 开启本地预览\n```\n\n安装部署插件\n\n```\n\t$ npm install hexo-deployer-git --save # 安装部署插件\n```\n\n`hexo` 有 2 种 `_config.yml` 文件，一个是根目录下的全局的 `_config.yml`，一个是各个主体 `theme` 下的 `_config.yml`。将前者称为站点配置文件， 后者称为主题配置文件。打开根目录下站点配置文件 `_config.yml`，配置有关 `deploy`和`url `的部分：\n\n```\n\t# URL\n\t## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\n\turl: GitHub pages的网址，例如https://GitHub用户名/仓库名               //修改这个地方，需要把网址改对，否则网页没有格式\n\tpermalink: :year/:month/:day/:title/\n\tpermalink_defaults:\n\tpretty_urls:\n\t  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n\t  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\t\n\t# Deployment\n\t## Docs: https://hexo.io/docs/one-command-deployment\n\tdeploy:\n\t  type: git\n\t  repo: git@github.com:GitHub账户名/仓库名.github.io.git\n\t  branch: master #如果分支是main记得修改，需要推送到哪个分支，就选择哪个分支\n```\n\n![image-20240724161404111.png](https://s2.loli.net/2024/07/25/Us5zgjtJm8fKQ6X.png)\n\n部署到 GitHub\n\n```\n\t$ hexo d # 将public里面的文件发送到云端GitHub上面\n```\n\n之后就可以刷新网页看到上传上去的网页，就拥有了自己的网页\n\n### 主题更换和选择\n\n我们上面用的是系统默认的主题，比较丑，所以我们可以使用hexo去挑选我们想要的主题类型\n\n[开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)](https://fluid-dev.github.io/hexo-fluid-docs/start/#更新主题)\n\n[Themes | Hexo](https://hexo.io/themes/)可以在这个网址里面挑选自己喜欢的\n\n本文挑选了fluid进行下载，选择直接下载zip包或者`git clone https://github.com/fluid-dev/hexo-theme-fluid.git`\n\n将下载的包解压放到 themes 文件夹里面，文件夹的名字改成fluid，最好不要文件夹套娃，如果出现，则将里面的文件全部移出来\n\n继续修改博客根目录下的 _config.yml 文件，注意，不是fluid里面的_config.yml文件\n\n```\n\tlanguage: zh-CN  # 指定语言，会影响主题显示的语言，按需修改\n\t\n\ttheme: fluid  # 指定主题\n```\n\n首次使用主题的「关于页」需要手动创建，打开git，输入代码\n\n```\n\t$ hexo new page about\n```\n\n创建成功后修改 `/source/about/index.md`，添加 `layout` 属性，`layout: about` 必须存在，并且不能修改成其他值，否则不会显示头像等样式\n\n```\n\t---\n\ttitle: 标题\n\tlayout: about\n\t---\n```\n\n之后重复上面的步骤先进行静态页面清除，再生成，之后上传到GitHub仓库中进行页面更新，等待几分钟后，如下图所示\n\n![image-20240724162639684.png](https://s2.loli.net/2024/07/25/2wTjGbtilvdkBpW.png)\n\n### 文档上传\n\n使用Typora进行.md文档的编写，非常好用的一个编辑器，绿色版可以网上搜索\n\n之后将md文件放到博客文件夹下面` source/_posts/ `文件夹下面\n\n之后使用vim编辑器对文档进行title和tag的编辑\n\n[Linux vi/vim | 菜鸟教程 (runoob.com)](https://www.runoob.com/linux/linux-vim.html)\n\n进入md文件，首先点击 i 进入编辑模式，在开头位置输入，其中title为文章的名字，tag为文章的标签，方便进行检索\n\n```\n\t---\n\ttitle： hello word\n\ttag： write\n\t---\n```\n\n编辑完成点击 Esc 退出报错，直接输入 :wq 保存编辑并且退出，完成文件的标记修改\n\n之后回到git bash中输入\n\n```\n\t$ hexo g # 生成静态文件，生成的文件在public文件夹里面\n\n\t$ hexo d # 将生成的文件导入GitHub站点\n```\n\n到此，等待几分钟后，你的文章就在你的网页上面出现了\n","source":"_posts/Work No.6.md","raw":"---\ntitle: Github+HEXO实现网站DIY\ntag: Github_Pages\ndate: 2024-07-23\ncategories: Github\n---\n\n# Github+HEXO实现网站DIY\n\n### 创建github.page网页\n\n点击Repositories，选择新建Repositories仓库\n\n在仓库名字Repository name栏填写网页的网址，后缀需要添加 .github.io\n\n例如 webname.github.io\n\n![image-20240724153741084.png](https://s2.loli.net/2024/07/25/CagbJOAwjnGZl5h.png)\n\n之后点击 Create repository ，创建该仓库，其他无需调整\n\n之后需要创建一个 index.html 文件，用于后续能够选取分支\n\n![image-20240724154237430.png](https://s2.loli.net/2024/07/25/fCE81aVXuvQHwkK.png)\n\n文件名字输入 index.html，内容为 `<hl> hello </hl>` 这个文件会初始化成一个网页，网页的内容只有 hello，这个随便填就行，后续会用模板，不用考虑这个\n\n![image-20240724154427037.png](https://s2.loli.net/2024/07/25/xcCAzGZfilE8pXI.png)\n\n进入仓库，选择 Setting ，点击 pages ，在 branch 上选择 main 分支（刚刚创建文件也是为了创建这个分支），点击 save 保存，之后等待几分钟，就会出现创建的网址，点击 visit site 即可进入建立的网页\n\n![image-20240724155135615.png](https://s2.loli.net/2024/07/25/iJS68ZOUrkLHKBo.png)\n\n完成这一步之后，就可以得到一个”hello“的网页，该网页没有任何排版和格式\n\n### 配置HEXO并进行部署\n\n打开git bash，执行如下命令安装hexo\n\n```\n\t$ npm install -g hexo-cli # 此命令完成对 hexo 的安装\n```\n\n如果没有安装npm、git、node.js的话\n\nnode.js参考https://blog.csdn.net/yaorongke/article/details/119084295\n\ngit安装参考https://blog.csdn.net/mukes/article/details/115693833\n\n之后随便在想要的地方建一个文件夹，这个文件夹的作用是用于博客文章存放和仓库交互，例如<blog>\n\n进入该文件，将该文件初始化\n\n```\n\t$ cd blog # 进入该文件夹\n\t$ hexo init # 该命令完成 hexo 在本地博客目录的初始化\n```\n\n之后生成网页的静态文件，如果需要更新网页的配置，需要先清理，在重新生成\n\n```\n\t$ hexo g # 生成静态文件，生成的文件在public文件夹里面\n\t\n\t$ hexo clean # 清除生成的静态文件\n```\n\n可以进行本地预览，本地预览的ctrl+c会退出运行，所以用右键复制网址到网页上预览\n\n```\n\t$ hexo s # 开启本地预览\n```\n\n安装部署插件\n\n```\n\t$ npm install hexo-deployer-git --save # 安装部署插件\n```\n\n`hexo` 有 2 种 `_config.yml` 文件，一个是根目录下的全局的 `_config.yml`，一个是各个主体 `theme` 下的 `_config.yml`。将前者称为站点配置文件， 后者称为主题配置文件。打开根目录下站点配置文件 `_config.yml`，配置有关 `deploy`和`url `的部分：\n\n```\n\t# URL\n\t## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\n\turl: GitHub pages的网址，例如https://GitHub用户名/仓库名               //修改这个地方，需要把网址改对，否则网页没有格式\n\tpermalink: :year/:month/:day/:title/\n\tpermalink_defaults:\n\tpretty_urls:\n\t  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n\t  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\t\n\t# Deployment\n\t## Docs: https://hexo.io/docs/one-command-deployment\n\tdeploy:\n\t  type: git\n\t  repo: git@github.com:GitHub账户名/仓库名.github.io.git\n\t  branch: master #如果分支是main记得修改，需要推送到哪个分支，就选择哪个分支\n```\n\n![image-20240724161404111.png](https://s2.loli.net/2024/07/25/Us5zgjtJm8fKQ6X.png)\n\n部署到 GitHub\n\n```\n\t$ hexo d # 将public里面的文件发送到云端GitHub上面\n```\n\n之后就可以刷新网页看到上传上去的网页，就拥有了自己的网页\n\n### 主题更换和选择\n\n我们上面用的是系统默认的主题，比较丑，所以我们可以使用hexo去挑选我们想要的主题类型\n\n[开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)](https://fluid-dev.github.io/hexo-fluid-docs/start/#更新主题)\n\n[Themes | Hexo](https://hexo.io/themes/)可以在这个网址里面挑选自己喜欢的\n\n本文挑选了fluid进行下载，选择直接下载zip包或者`git clone https://github.com/fluid-dev/hexo-theme-fluid.git`\n\n将下载的包解压放到 themes 文件夹里面，文件夹的名字改成fluid，最好不要文件夹套娃，如果出现，则将里面的文件全部移出来\n\n继续修改博客根目录下的 _config.yml 文件，注意，不是fluid里面的_config.yml文件\n\n```\n\tlanguage: zh-CN  # 指定语言，会影响主题显示的语言，按需修改\n\t\n\ttheme: fluid  # 指定主题\n```\n\n首次使用主题的「关于页」需要手动创建，打开git，输入代码\n\n```\n\t$ hexo new page about\n```\n\n创建成功后修改 `/source/about/index.md`，添加 `layout` 属性，`layout: about` 必须存在，并且不能修改成其他值，否则不会显示头像等样式\n\n```\n\t---\n\ttitle: 标题\n\tlayout: about\n\t---\n```\n\n之后重复上面的步骤先进行静态页面清除，再生成，之后上传到GitHub仓库中进行页面更新，等待几分钟后，如下图所示\n\n![image-20240724162639684.png](https://s2.loli.net/2024/07/25/2wTjGbtilvdkBpW.png)\n\n### 文档上传\n\n使用Typora进行.md文档的编写，非常好用的一个编辑器，绿色版可以网上搜索\n\n之后将md文件放到博客文件夹下面` source/_posts/ `文件夹下面\n\n之后使用vim编辑器对文档进行title和tag的编辑\n\n[Linux vi/vim | 菜鸟教程 (runoob.com)](https://www.runoob.com/linux/linux-vim.html)\n\n进入md文件，首先点击 i 进入编辑模式，在开头位置输入，其中title为文章的名字，tag为文章的标签，方便进行检索\n\n```\n\t---\n\ttitle： hello word\n\ttag： write\n\t---\n```\n\n编辑完成点击 Esc 退出报错，直接输入 :wq 保存编辑并且退出，完成文件的标记修改\n\n之后回到git bash中输入\n\n```\n\t$ hexo g # 生成静态文件，生成的文件在public文件夹里面\n\n\t$ hexo d # 将生成的文件导入GitHub站点\n```\n\n到此，等待几分钟后，你的文章就在你的网页上面出现了\n","slug":"Work No.6","published":1,"updated":"2024-07-26T09:53:22.027Z","_id":"clz0qu1nf0004rcfb0jmy4t6u","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Github-HEXO实现网站DIY\"><a href=\"#Github-HEXO实现网站DIY\" class=\"headerlink\" title=\"Github+HEXO实现网站DIY\"></a>Github+HEXO实现网站DIY</h1><h3 id=\"创建github-page网页\"><a href=\"#创建github-page网页\" class=\"headerlink\" title=\"创建github.page网页\"></a>创建github.page网页</h3><p>点击Repositories，选择新建Repositories仓库</p>\n<p>在仓库名字Repository name栏填写网页的网址，后缀需要添加 .github.io</p>\n<p>例如 webname.github.io</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/CagbJOAwjnGZl5h.png\" alt=\"image-20240724153741084.png\"></p>\n<p>之后点击 Create repository ，创建该仓库，其他无需调整</p>\n<p>之后需要创建一个 index.html 文件，用于后续能够选取分支</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/fCE81aVXuvQHwkK.png\" alt=\"image-20240724154237430.png\"></p>\n<p>文件名字输入 index.html，内容为 <code>&lt;hl&gt; hello &lt;/hl&gt;</code> 这个文件会初始化成一个网页，网页的内容只有 hello，这个随便填就行，后续会用模板，不用考虑这个</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/xcCAzGZfilE8pXI.png\" alt=\"image-20240724154427037.png\"></p>\n<p>进入仓库，选择 Setting ，点击 pages ，在 branch 上选择 main 分支（刚刚创建文件也是为了创建这个分支），点击 save 保存，之后等待几分钟，就会出现创建的网址，点击 visit site 即可进入建立的网页</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/iJS68ZOUrkLHKBo.png\" alt=\"image-20240724155135615.png\"></p>\n<p>完成这一步之后，就可以得到一个”hello“的网页，该网页没有任何排版和格式</p>\n<h3 id=\"配置HEXO并进行部署\"><a href=\"#配置HEXO并进行部署\" class=\"headerlink\" title=\"配置HEXO并进行部署\"></a>配置HEXO并进行部署</h3><p>打开git bash，执行如下命令安装hexo</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">$ npm install -g hexo-<span class=\"hljs-keyword\">cli</span> <span class=\"hljs-meta\"># 此命令完成对 hexo 的安装</span><br></code></pre></td></tr></table></figure>\n\n<p>如果没有安装npm、git、node.js的话</p>\n<p>node.js参考<a href=\"https://blog.csdn.net/yaorongke/article/details/119084295\">https://blog.csdn.net/yaorongke/article/details/119084295</a></p>\n<p>git安装参考<a href=\"https://blog.csdn.net/mukes/article/details/115693833\">https://blog.csdn.net/mukes/article/details/115693833</a></p>\n<p>之后随便在想要的地方建一个文件夹，这个文件夹的作用是用于博客文章存放和仓库交互，例如<blog></p>\n<p>进入该文件，将该文件初始化</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">cd</span> blog <span class=\"hljs-comment\"># 进入该文件夹</span><br><span class=\"hljs-variable\">$</span> hexo init <span class=\"hljs-comment\"># 该命令完成 hexo 在本地博客目录的初始化</span><br></code></pre></td></tr></table></figure>\n\n<p>之后生成网页的静态文件，如果需要更新网页的配置，需要先清理，在重新生成</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo g <span class=\"hljs-comment\"># 生成静态文件，生成的文件在public文件夹里面</span><br><br><span class=\"hljs-variable\">$ </span>hexo clean <span class=\"hljs-comment\"># 清除生成的静态文件</span><br></code></pre></td></tr></table></figure>\n\n<p>可以进行本地预览，本地预览的ctrl+c会退出运行，所以用右键复制网址到网页上预览</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo s <span class=\"hljs-comment\"># 开启本地预览</span><br></code></pre></td></tr></table></figure>\n\n<p>安装部署插件</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">$ npm <span class=\"hljs-keyword\">install</span> hexo-deployer-git --save <span class=\"hljs-comment\"># 安装部署插件</span><br></code></pre></td></tr></table></figure>\n\n<p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为站点配置文件， 后者称为主题配置文件。打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code>和<code>url </code>的部分：</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"># URL<br>## <span class=\"hljs-keyword\">Set</span> your site url here. <span class=\"hljs-keyword\">For</span> example, <span class=\"hljs-keyword\">if</span> you use GitHub Page, <span class=\"hljs-keyword\">set</span> url <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;https://username.github.io/project&#x27;</span><br>url: GitHub pages的网址，例如https:<span class=\"hljs-comment\">//GitHub用户名/仓库名               //修改这个地方，需要把网址改对，否则网页没有格式</span><br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: <span class=\"hljs-keyword\">true</span> # <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">false</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">remove</span> trailing <span class=\"hljs-string\">&#x27;index.html&#x27;</span> <span class=\"hljs-keyword\">from</span> permalinks<br>  trailing_html: <span class=\"hljs-keyword\">true</span> # <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">false</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">remove</span> trailing <span class=\"hljs-string\">&#x27;.html&#x27;</span> <span class=\"hljs-keyword\">from</span> permalinks<br><br># Deployment<br>## Docs: https:<span class=\"hljs-comment\">//hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class=\"hljs-keyword\">type</span>: git<br>  repo: git@github.com:GitHub账户名/仓库名.github.io.git<br>  branch: master #如果分支是main记得修改，需要推送到哪个分支，就选择哪个分支<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/07/25/Us5zgjtJm8fKQ6X.png\" alt=\"image-20240724161404111.png\"></p>\n<p>部署到 GitHub</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo d <span class=\"hljs-comment\"># 将public里面的文件发送到云端GitHub上面</span><br></code></pre></td></tr></table></figure>\n\n<p>之后就可以刷新网页看到上传上去的网页，就拥有了自己的网页</p>\n<h3 id=\"主题更换和选择\"><a href=\"#主题更换和选择\" class=\"headerlink\" title=\"主题更换和选择\"></a>主题更换和选择</h3><p>我们上面用的是系统默认的主题，比较丑，所以我们可以使用hexo去挑选我们想要的主题类型</p>\n<p><a href=\"https://fluid-dev.github.io/hexo-fluid-docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98\">开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)</a></p>\n<p><a href=\"https://hexo.io/themes/\">Themes | Hexo</a>可以在这个网址里面挑选自己喜欢的</p>\n<p>本文挑选了fluid进行下载，选择直接下载zip包或者<code>git clone https://github.com/fluid-dev/hexo-theme-fluid.git</code></p>\n<p>将下载的包解压放到 themes 文件夹里面，文件夹的名字改成fluid，最好不要文件夹套娃，如果出现，则将里面的文件全部移出来</p>\n<p>继续修改博客根目录下的 _config.yml 文件，注意，不是fluid里面的_config.yml文件</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">language:</span> <span class=\"hljs-built_in\">zh</span>-CN  <span class=\"hljs-meta\"># 指定语言，会影响主题显示的语言，按需修改</span><br><br><span class=\"hljs-symbol\">theme:</span> fluid  <span class=\"hljs-meta\"># 指定主题</span><br></code></pre></td></tr></table></figure>\n\n<p>首次使用主题的「关于页」需要手动创建，打开git，输入代码</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">$ hexo <span class=\"hljs-keyword\">new</span> page about<br></code></pre></td></tr></table></figure>\n\n<p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性，<code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">标题</span><br><span class=\"hljs-attr\">layout:</span> <span class=\"hljs-string\">about</span><br><span class=\"hljs-meta\">---</span><br></code></pre></td></tr></table></figure>\n\n<p>之后重复上面的步骤先进行静态页面清除，再生成，之后上传到GitHub仓库中进行页面更新，等待几分钟后，如下图所示</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/2wTjGbtilvdkBpW.png\" alt=\"image-20240724162639684.png\"></p>\n<h3 id=\"文档上传\"><a href=\"#文档上传\" class=\"headerlink\" title=\"文档上传\"></a>文档上传</h3><p>使用Typora进行.md文档的编写，非常好用的一个编辑器，绿色版可以网上搜索</p>\n<p>之后将md文件放到博客文件夹下面<code>source/_posts/</code>文件夹下面</p>\n<p>之后使用vim编辑器对文档进行title和tag的编辑</p>\n<p><a href=\"https://www.runoob.com/linux/linux-vim.html\">Linux vi&#x2F;vim | 菜鸟教程 (runoob.com)</a></p>\n<p>进入md文件，首先点击 i 进入编辑模式，在开头位置输入，其中title为文章的名字，tag为文章的标签，方便进行检索</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-string\">title：</span> <span class=\"hljs-string\">hello</span> <span class=\"hljs-string\">word</span><br><span class=\"hljs-string\">tag：</span> <span class=\"hljs-string\">write</span><br><span class=\"hljs-meta\">---</span><br></code></pre></td></tr></table></figure>\n\n<p>编辑完成点击 Esc 退出报错，直接输入 :wq 保存编辑并且退出，完成文件的标记修改</p>\n<p>之后回到git bash中输入</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo g <span class=\"hljs-comment\"># 生成静态文件，生成的文件在public文件夹里面</span><br><br><span class=\"hljs-variable\">$ </span>hexo d <span class=\"hljs-comment\"># 将生成的文件导入GitHub站点</span><br></code></pre></td></tr></table></figure>\n\n<p>到此，等待几分钟后，你的文章就在你的网页上面出现了</p>\n","excerpt":"","more":"<h1 id=\"Github-HEXO实现网站DIY\"><a href=\"#Github-HEXO实现网站DIY\" class=\"headerlink\" title=\"Github+HEXO实现网站DIY\"></a>Github+HEXO实现网站DIY</h1><h3 id=\"创建github-page网页\"><a href=\"#创建github-page网页\" class=\"headerlink\" title=\"创建github.page网页\"></a>创建github.page网页</h3><p>点击Repositories，选择新建Repositories仓库</p>\n<p>在仓库名字Repository name栏填写网页的网址，后缀需要添加 .github.io</p>\n<p>例如 webname.github.io</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/CagbJOAwjnGZl5h.png\" alt=\"image-20240724153741084.png\"></p>\n<p>之后点击 Create repository ，创建该仓库，其他无需调整</p>\n<p>之后需要创建一个 index.html 文件，用于后续能够选取分支</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/fCE81aVXuvQHwkK.png\" alt=\"image-20240724154237430.png\"></p>\n<p>文件名字输入 index.html，内容为 <code>&lt;hl&gt; hello &lt;/hl&gt;</code> 这个文件会初始化成一个网页，网页的内容只有 hello，这个随便填就行，后续会用模板，不用考虑这个</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/xcCAzGZfilE8pXI.png\" alt=\"image-20240724154427037.png\"></p>\n<p>进入仓库，选择 Setting ，点击 pages ，在 branch 上选择 main 分支（刚刚创建文件也是为了创建这个分支），点击 save 保存，之后等待几分钟，就会出现创建的网址，点击 visit site 即可进入建立的网页</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/iJS68ZOUrkLHKBo.png\" alt=\"image-20240724155135615.png\"></p>\n<p>完成这一步之后，就可以得到一个”hello“的网页，该网页没有任何排版和格式</p>\n<h3 id=\"配置HEXO并进行部署\"><a href=\"#配置HEXO并进行部署\" class=\"headerlink\" title=\"配置HEXO并进行部署\"></a>配置HEXO并进行部署</h3><p>打开git bash，执行如下命令安装hexo</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">$ npm install -g hexo-<span class=\"hljs-keyword\">cli</span> <span class=\"hljs-meta\"># 此命令完成对 hexo 的安装</span><br></code></pre></td></tr></table></figure>\n\n<p>如果没有安装npm、git、node.js的话</p>\n<p>node.js参考<a href=\"https://blog.csdn.net/yaorongke/article/details/119084295\">https://blog.csdn.net/yaorongke/article/details/119084295</a></p>\n<p>git安装参考<a href=\"https://blog.csdn.net/mukes/article/details/115693833\">https://blog.csdn.net/mukes/article/details/115693833</a></p>\n<p>之后随便在想要的地方建一个文件夹，这个文件夹的作用是用于博客文章存放和仓库交互，例如<blog></p>\n<p>进入该文件，将该文件初始化</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">cd</span> blog <span class=\"hljs-comment\"># 进入该文件夹</span><br><span class=\"hljs-variable\">$</span> hexo init <span class=\"hljs-comment\"># 该命令完成 hexo 在本地博客目录的初始化</span><br></code></pre></td></tr></table></figure>\n\n<p>之后生成网页的静态文件，如果需要更新网页的配置，需要先清理，在重新生成</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo g <span class=\"hljs-comment\"># 生成静态文件，生成的文件在public文件夹里面</span><br><br><span class=\"hljs-variable\">$ </span>hexo clean <span class=\"hljs-comment\"># 清除生成的静态文件</span><br></code></pre></td></tr></table></figure>\n\n<p>可以进行本地预览，本地预览的ctrl+c会退出运行，所以用右键复制网址到网页上预览</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo s <span class=\"hljs-comment\"># 开启本地预览</span><br></code></pre></td></tr></table></figure>\n\n<p>安装部署插件</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">$ npm <span class=\"hljs-keyword\">install</span> hexo-deployer-git --save <span class=\"hljs-comment\"># 安装部署插件</span><br></code></pre></td></tr></table></figure>\n\n<p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为站点配置文件， 后者称为主题配置文件。打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code>和<code>url </code>的部分：</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"># URL<br>## <span class=\"hljs-keyword\">Set</span> your site url here. <span class=\"hljs-keyword\">For</span> example, <span class=\"hljs-keyword\">if</span> you use GitHub Page, <span class=\"hljs-keyword\">set</span> url <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;https://username.github.io/project&#x27;</span><br>url: GitHub pages的网址，例如https:<span class=\"hljs-comment\">//GitHub用户名/仓库名               //修改这个地方，需要把网址改对，否则网页没有格式</span><br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: <span class=\"hljs-keyword\">true</span> # <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">false</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">remove</span> trailing <span class=\"hljs-string\">&#x27;index.html&#x27;</span> <span class=\"hljs-keyword\">from</span> permalinks<br>  trailing_html: <span class=\"hljs-keyword\">true</span> # <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">false</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">remove</span> trailing <span class=\"hljs-string\">&#x27;.html&#x27;</span> <span class=\"hljs-keyword\">from</span> permalinks<br><br># Deployment<br>## Docs: https:<span class=\"hljs-comment\">//hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class=\"hljs-keyword\">type</span>: git<br>  repo: git@github.com:GitHub账户名/仓库名.github.io.git<br>  branch: master #如果分支是main记得修改，需要推送到哪个分支，就选择哪个分支<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/07/25/Us5zgjtJm8fKQ6X.png\" alt=\"image-20240724161404111.png\"></p>\n<p>部署到 GitHub</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo d <span class=\"hljs-comment\"># 将public里面的文件发送到云端GitHub上面</span><br></code></pre></td></tr></table></figure>\n\n<p>之后就可以刷新网页看到上传上去的网页，就拥有了自己的网页</p>\n<h3 id=\"主题更换和选择\"><a href=\"#主题更换和选择\" class=\"headerlink\" title=\"主题更换和选择\"></a>主题更换和选择</h3><p>我们上面用的是系统默认的主题，比较丑，所以我们可以使用hexo去挑选我们想要的主题类型</p>\n<p><a href=\"https://fluid-dev.github.io/hexo-fluid-docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98\">开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)</a></p>\n<p><a href=\"https://hexo.io/themes/\">Themes | Hexo</a>可以在这个网址里面挑选自己喜欢的</p>\n<p>本文挑选了fluid进行下载，选择直接下载zip包或者<code>git clone https://github.com/fluid-dev/hexo-theme-fluid.git</code></p>\n<p>将下载的包解压放到 themes 文件夹里面，文件夹的名字改成fluid，最好不要文件夹套娃，如果出现，则将里面的文件全部移出来</p>\n<p>继续修改博客根目录下的 _config.yml 文件，注意，不是fluid里面的_config.yml文件</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">language:</span> <span class=\"hljs-built_in\">zh</span>-CN  <span class=\"hljs-meta\"># 指定语言，会影响主题显示的语言，按需修改</span><br><br><span class=\"hljs-symbol\">theme:</span> fluid  <span class=\"hljs-meta\"># 指定主题</span><br></code></pre></td></tr></table></figure>\n\n<p>首次使用主题的「关于页」需要手动创建，打开git，输入代码</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">$ hexo <span class=\"hljs-keyword\">new</span> page about<br></code></pre></td></tr></table></figure>\n\n<p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性，<code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">标题</span><br><span class=\"hljs-attr\">layout:</span> <span class=\"hljs-string\">about</span><br><span class=\"hljs-meta\">---</span><br></code></pre></td></tr></table></figure>\n\n<p>之后重复上面的步骤先进行静态页面清除，再生成，之后上传到GitHub仓库中进行页面更新，等待几分钟后，如下图所示</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/2wTjGbtilvdkBpW.png\" alt=\"image-20240724162639684.png\"></p>\n<h3 id=\"文档上传\"><a href=\"#文档上传\" class=\"headerlink\" title=\"文档上传\"></a>文档上传</h3><p>使用Typora进行.md文档的编写，非常好用的一个编辑器，绿色版可以网上搜索</p>\n<p>之后将md文件放到博客文件夹下面<code>source/_posts/</code>文件夹下面</p>\n<p>之后使用vim编辑器对文档进行title和tag的编辑</p>\n<p><a href=\"https://www.runoob.com/linux/linux-vim.html\">Linux vi&#x2F;vim | 菜鸟教程 (runoob.com)</a></p>\n<p>进入md文件，首先点击 i 进入编辑模式，在开头位置输入，其中title为文章的名字，tag为文章的标签，方便进行检索</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-string\">title：</span> <span class=\"hljs-string\">hello</span> <span class=\"hljs-string\">word</span><br><span class=\"hljs-string\">tag：</span> <span class=\"hljs-string\">write</span><br><span class=\"hljs-meta\">---</span><br></code></pre></td></tr></table></figure>\n\n<p>编辑完成点击 Esc 退出报错，直接输入 :wq 保存编辑并且退出，完成文件的标记修改</p>\n<p>之后回到git bash中输入</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo g <span class=\"hljs-comment\"># 生成静态文件，生成的文件在public文件夹里面</span><br><br><span class=\"hljs-variable\">$ </span>hexo d <span class=\"hljs-comment\"># 将生成的文件导入GitHub站点</span><br></code></pre></td></tr></table></figure>\n\n<p>到此，等待几分钟后，你的文章就在你的网页上面出现了</p>\n"},{"title":"Git使用","date":"2024-07-18T16:00:00.000Z","_content":"# Git使用\n\n## git基本了解\n\n### 学习资料\n\n[超详细的Git使用教程(图文)-CSDN博客](https://blog.csdn.net/qq_37883866/article/details/105349257)\n\n[Git基本使用教程（一）：入门及第一次基本完整操作_git的使用-CSDN博客](https://blog.csdn.net/qq_35206244/article/details/97698815)\n\n[git--一文弄懂git的工作区、索引区、本地仓库、远程仓库以及add、commit、push三个操作 - at_today - 博客园 (cnblogs.com)](https://www.cnblogs.com/Jing-Wang/p/10991008.html)\n\n[【原创】Git删除暂存区或版本库中的文件 - cposture - 博客园 (cnblogs.com)](https://www.cnblogs.com/cposture/p/git.html)\n\n[Git如何从暂存区（index/cache）中移除文件|极客教程 (geek-docs.com)](https://geek-docs.com/git/git-questions/611_git_how_to_remove_a_file_from_the_staging_area_index_cache_in_git.html)\n\n[git status 状态命令——查看文件状态_git status 看非新增文件-CSDN博客](https://blog.csdn.net/weixin_44567318/article/details/119701438)\n\n[Git 学习（三）本地仓库操作——git add & commit - feesland - 博客园 (cnblogs.com)](https://www.cnblogs.com/feeland/p/4500721.html)\n\n[git branch的详细使用，10个常见用法_git branch -vv-CSDN博客](https://blog.csdn.net/chaogu94/article/details/111057918)\n\n[Git基础 - git tag 一文真正的搞懂git标签的使用-CSDN博客](https://blog.csdn.net/qq_39505245/article/details/124705850)\n\n### git下载\n\n**官网：** https://git-scm.com/downloads\n\n## git使用方法\n\n### 注册GitHub账号\n\n账号：1\n\n密码：1\n\n### git注册\n\n```\n\t//设置账号，如果去掉 --global 参数只对当前仓库有效。\n\t$ git config --global user.name \"zhengyiyang\"\n\t\n\t//设置邮箱，如果去掉 --global 参数只对当前仓库有效。\n\t$ git config --global user.email \"903372205@qq.com\"\n\t\n\t//设置SSH，如果去掉 --global 参数只对当前仓库有效。\n\t$ ssh-keygen -t rsa -C \"903372205@qq.com\"\n\t\n\t储存位置：/c/Users/114008/.ssh/id_rsa\n\t\n\tid_rsa.pub为公共密钥\n\tid_rsa为私人密钥\n```\n\n### github配置SSH\n\n**打开id_rsa.pub文件，全选，复制全文**\n\n\n```\n\tssh-rsa AAAAB3NzaC1yc2EA...\n```\n\n**github->账户->setting**\n\nTitle：1\n\nKey type：Authentication Key\n\n### 测试是否成功连接\n\n```\n\t$ ssh -T git@github.com\n\t//代表成功连接\n\tHi yangyangdeyi0119! You've successfully authenticated, but GitHub does not provide shell access.  \n```\n\n### 建立Github云端仓库\n\n[github仓库建立及配置教程新手教程_github创建仓库-CSDN博客](https://blog.csdn.net/qq_44722674/article/details/117200397)\n\n修改用户名\n\n[GitHub修改昵称和用户名（图解详细教程）_github改名-CSDN博客](https://blog.csdn.net/weixin_44285445/article/details/107833418)\n\n### 创建本地仓库\n\n```\n\t//首先需要新建一个文件夹作为本地仓库\n\t//初始化该文件为本地仓库\n\t$ git init  \n\t\n\t//下载下来的test文件夹也是本地仓库\n\t$ git clone https://github.com/yangyangdeyi0119/test.git  \n```\n\n### 将文件加入暂存区\n\n文件本身在工作区，需要通过文件锁定，将其加入暂存区\n\n```\n\t//可以同时添加多个文件夹\n\t$ git add /test /test1\n\t\n\t//添加单个文件\n\t$ git add README.md \n    \n    //将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除  \n\t$ git add .   \n\t\n\t//将文件包的所有文件加入暂存区\n\t$ git add -f .\n    \n    //将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。 \n\t$ git add -u \n\t\n\t//表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。\n\t$ git add -A\n\t\n\t//暂存区各类状态\n\t- untracked 未跟踪（未被纳入版本控制）\n\t- tracked 已跟踪（被纳入版本控制）\n\t- Unmodified 未修改状态\n\t- Modified 已修改状态\n\t- Staged 已暂存状态\n```\n\n### 将文件移除暂存区\n\n```\n\t//仅删除暂存区的文件，不影响工作区的文件\n\t$ git rm --cache <file/aaa>\n\t\n\t//删除暂存区和工作区的文件\n\t$ git rm -f <file/aaa>\n\t\n\t//撤销对暂存区的修改。这个命令主要用于丢弃或还原文件的更改(测试未成功)\n\t$ git restore --staged <file/aaa>\n\t\n\t//将分支回退到之前的提交，并且还可以选择是否保留暂存区的更改\n\t$ git reset\n\t\n\t//撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工作区对应文件file；这个命令改变的是工作区\n\t$ git checkout 文件名\n\t\n```\n\n### 查看文件状态\n\n```\n\t//获取文件状态-完整\n\t$ git status\n\t\n\t//获取文件状态-简洁\n\t$ git status -s 更加简洁\n\t\t' ' （空格）表示文件未发生更改\n\t\tM 表示文件发生改动。\n\t\tA 表示新增文件。\n\t\tD 表示删除文件。\n\t\tR 表示重命名。\n\t\tC 表示复制。\n\t\tU 表示更新但未合并。\n\t\t? 表示未跟踪文件。\n\t\t! 表示忽略文件。\n\t\n\t//显示分支和跟踪信息 --branch\n\t$ git status -s -b\n\t\n\t//显示变更的文本内容，在不使用 -s 选项时才会显示变更内容\n\t//只有一个 -v 选项时，显示版本库和暂存区之间比较发生变更的内容。\n\t$ git status -v\n\t//而有两个 -v 选项时，显示暂存区和工作区之间比较发生变更的内容。\n\t$ git status -v -v\n\t\n\t//显示未跟踪文件\n\t$ git status -s -u[<mode>]\n\t\tno —— 不显示未跟踪的文件\n\t\tnormal —— 显示未跟踪的文件和目录。\n\t\tall —— 还显示了未跟踪目录下的文件\n\t\t\n\t//用来查看暂存区中文件信息\n\t$ git ls-files -参数\n\t\t--cached(-c)显示暂存区中的文件，git ls-files命令默认的参数\n\t\t--deleted(-d)显示删除的文件\n\t\t--modified(-m) 显示修改过的文件\n\t\t--other(-o)显示没有被git跟踪的文件\n\t\t--stage(-s) 显示mode以及文件对应的Blob对象，进而我们可以获取暂存区中对应文件里面的内容。\n```\n\n### 文件加入分支\n\n提交更改，实际上就是把暂存区的所有内容提交到当前分支，需要提交的文件修改通通放到暂存区；然后，一次性提交暂存区的所有修改\n\n```\n\t// 把暂存区的所有修改提交到分支，须输入描述信息\n\t$ git commit -m \"描述信息\"\n\t\n\t//更改之前一次commit的描述信息\n\t$ git commit --amend\n\t\n\t//提交暂存区的指定文件到仓库区（不行，最好单个提交git add，然后在git commit）\n\t$ git commit <file1> <file2> ... -m \"message\"\n\t\n\t//-a 参数设置修改文件后不需要执行 git add 命令，直接来提交（不好用）\n\t$ git commit -a\n\t\n\t出现报错\"nothing to commit, working tree clean\"\n    只需要修改该文件夹下的任意一个文件，因为检测到版本未发生改变\n    \n    //查找推送版本号\n    $ git log \n    \n    //选择回退版本，回退后，版本之后的将会丢失\n    git reset --hard <目标版本号>\n    \n    //软回退，不修改代码，回到暂存区\n    git reset --soft HEAD~n\n    \n    //只显示一行信息\n    git log --oneline\n```\n\n### 分支管理\n\n```\n\t//创建分支命令\n\t$ git branch <branchname>\n\t\n\t//切换分支命令\n\t$ git checkout <branchname>\n\t\n\t//列出分支\n\tgit branch\n\t//查看本地分支+上次提交的信息\n\t$ git branch -v\n\t//查看本地分支+远程分支\n\t$ git branch -a\n\t\t- 红色代表云端仓库分支\n\t\t- 白色代表本地仓库分支\n\t\t- 绿色代表目前所在分支\n\t//查看本地分支+上次提交的信息+本地和远程分支的关系\n\t$ git branch -vv\n\t//查看本地分支+上次提交的信息+本地和远程分支的关系+远程分支\n\t$ git branch -vv -a\n\t//只查看远程分支\n\t$ git branch -r\n\t\n\t//创建新分支并立即切换到该分支下\n\t$ git checkout -b <branchname>\n\t\n\t//删除本地分支\n\t$ git branch -d <branchname>\n\t//强制删除分支\n\t$ git branch -D aaa\n\t\n\t//合并分支\n\t$ git merge <branchname>\n\t\n\t//删除远程分支\n\t$ git push <主机名> -d <分支名>\n\t\n\t//将本地分支推送到远程分支，如果远程分支不存在，则创建。\n\t$ git push <远程主机名> <本地分支名>:<远程分支名>\n\t$ git push --set-upstream origin dev\n```\n\n### 将文件推送到云端仓库\n\n```\n\t//第一次推送代码指令\n\t$ git push -u origin <branchname>\n\t//-u参数可以在推送的同时,将origin仓库的master分支设置为本地仓库当前分支的upstream(上游)。添加了这个参数,将来运行git pull命令从远程仓库获取内容时,本地仓库的的这个分支就可以直接从origin的master分支获取内容,省去了另外添加参数的麻烦。\n\t\n\t//之后推送\n\t$ git push origin master\n\t\n\t//不同分支之间推送\n\t$ git push -u origin <branchname1>:origin/<branchname2>\n\t\n\t//云端仓库分支更新到本地仓库\n\t$ git remote update origin\n\t\t后缀加上 --prune则可以与云端仓库分支一致，多余的会被删除\n\t\t\n\t//报错\n\terror: failed to push some refs to 'https://github.com/yangyangdeyi0119/Learning.git'\n\thint: Updates were rejected because the remote contains work that you do not\n\thint: have locally. This is usually caused by another repository pushing to\n\thint: the same ref. If you want to integrate the remote changes, use\n\thint: 'git pull' before pushing again.\n\thint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\t直接git pull之后就可以了\n\t\n\t//删除现有远程仓库\n\t$ git remote rm origin\n\t\n\t//添加新远程仓库\n\t$ git remote add origin url\n\t\n\t//查看远程仓库的地址\n\t$ git remote -v\n\t\n\t//更换远程仓库地址，URL为新地址\n\t$ git remote set-url origin URL\n```\n\n### 暂存空间使用\n\nstash是本地的，不会通过git push命令上传到git server上\n\n发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑git stash。\n\n使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用git stash就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用git stash apply将以前一半的工作应用回来。\n\n经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。\n\n```\n\t//将未提交的修改保存至堆栈中\n\t$ git stash\n\t\n\t//为此次stash添加说明信息，便于以后查看\n\t$ git stash save \"stash message info\"  \n\t\n\t//查看stash栈中的内容\n\t$ git stash list\n\t\n\t//将stash中的内容弹出，并应用到当前分支对应的工作目录上，该命令将堆栈中最近保存的内容删除（出栈操作）\n\t$ git stash pop\n\t\n\t//将指定id的内容应用到当前分支的工作目录，内容不会删除，可以在多个分支上重复进行操作\n\t$ git stash apply stash名称\n\t\n\t//从堆栈中移除某个指定的stash\n\t$ git stash drop stash名称\n\t\n\t//清除堆栈中的所有内容\n\t$ git stash clear\n\t\n\t//查看堆栈中最新保存的stash和当前目录的差异。\n\t$ git stash show\n\t\n\t//从最新的stash创建分支。\n\t$ git stash branch\n```\n\n### 代码标签\n\ntag 中文我们可以称它为标签，tag 就是 对某次 commit 的一个标识，相当于起了一个别名。\n\n【轻量标签 】： 只是某个commit 的引用，可以理解为是一个commit的别名；\n\n【附注标签】 ：是存储在git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间以及其他的标签信息。它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证。\n\n```\n\t//直接列出所有的标签\n\t$ git tag\n\t\n\t//可以根据<tagname>进行标签的筛选\n\t$ git tag -l <tagname*>\n\t\n\t//查看标签的提交信息\n\t$ git show 标签名\n\t\n\t//在提交历史中查看标签\n\t$ git log --online --graph\n\t\n\t//创建轻量标签\n\t$ git tag 标签名\n\t$ git tag 标签名 提交版本\n\t\n\t//创建附注标签\n\t$ git tag -a 标签名称 -m 附注信息\n\t$ git tag -a 标签名称 提交版本号 -m 附注信息\n\t\t-a : 理解为 annotated 的首字符，表示 附注标签\n\t\t\n\t//删除标签\n\tgit tag -d 标签名称\n\t\n\t//将指定的标签上传到远程仓库\n\t$ git push origin <tagname>\n\t\n\t//将所有不在远程仓库中的标签上传到远程仓库\n\t$ git push origin --tags\n\t\n\t//删除远程仓库中的 指定标签\n\t$ git push origin  :regs/tags/<tagname>\n\t$ git push origin --delete <tagname>\n```\n","source":"_posts/Work No.5.md","raw":"---\ntitle: Git使用\ntag: git\ndate: 2024-07-19\ncategories: Git\n---\n# Git使用\n\n## git基本了解\n\n### 学习资料\n\n[超详细的Git使用教程(图文)-CSDN博客](https://blog.csdn.net/qq_37883866/article/details/105349257)\n\n[Git基本使用教程（一）：入门及第一次基本完整操作_git的使用-CSDN博客](https://blog.csdn.net/qq_35206244/article/details/97698815)\n\n[git--一文弄懂git的工作区、索引区、本地仓库、远程仓库以及add、commit、push三个操作 - at_today - 博客园 (cnblogs.com)](https://www.cnblogs.com/Jing-Wang/p/10991008.html)\n\n[【原创】Git删除暂存区或版本库中的文件 - cposture - 博客园 (cnblogs.com)](https://www.cnblogs.com/cposture/p/git.html)\n\n[Git如何从暂存区（index/cache）中移除文件|极客教程 (geek-docs.com)](https://geek-docs.com/git/git-questions/611_git_how_to_remove_a_file_from_the_staging_area_index_cache_in_git.html)\n\n[git status 状态命令——查看文件状态_git status 看非新增文件-CSDN博客](https://blog.csdn.net/weixin_44567318/article/details/119701438)\n\n[Git 学习（三）本地仓库操作——git add & commit - feesland - 博客园 (cnblogs.com)](https://www.cnblogs.com/feeland/p/4500721.html)\n\n[git branch的详细使用，10个常见用法_git branch -vv-CSDN博客](https://blog.csdn.net/chaogu94/article/details/111057918)\n\n[Git基础 - git tag 一文真正的搞懂git标签的使用-CSDN博客](https://blog.csdn.net/qq_39505245/article/details/124705850)\n\n### git下载\n\n**官网：** https://git-scm.com/downloads\n\n## git使用方法\n\n### 注册GitHub账号\n\n账号：1\n\n密码：1\n\n### git注册\n\n```\n\t//设置账号，如果去掉 --global 参数只对当前仓库有效。\n\t$ git config --global user.name \"zhengyiyang\"\n\t\n\t//设置邮箱，如果去掉 --global 参数只对当前仓库有效。\n\t$ git config --global user.email \"903372205@qq.com\"\n\t\n\t//设置SSH，如果去掉 --global 参数只对当前仓库有效。\n\t$ ssh-keygen -t rsa -C \"903372205@qq.com\"\n\t\n\t储存位置：/c/Users/114008/.ssh/id_rsa\n\t\n\tid_rsa.pub为公共密钥\n\tid_rsa为私人密钥\n```\n\n### github配置SSH\n\n**打开id_rsa.pub文件，全选，复制全文**\n\n\n```\n\tssh-rsa AAAAB3NzaC1yc2EA...\n```\n\n**github->账户->setting**\n\nTitle：1\n\nKey type：Authentication Key\n\n### 测试是否成功连接\n\n```\n\t$ ssh -T git@github.com\n\t//代表成功连接\n\tHi yangyangdeyi0119! You've successfully authenticated, but GitHub does not provide shell access.  \n```\n\n### 建立Github云端仓库\n\n[github仓库建立及配置教程新手教程_github创建仓库-CSDN博客](https://blog.csdn.net/qq_44722674/article/details/117200397)\n\n修改用户名\n\n[GitHub修改昵称和用户名（图解详细教程）_github改名-CSDN博客](https://blog.csdn.net/weixin_44285445/article/details/107833418)\n\n### 创建本地仓库\n\n```\n\t//首先需要新建一个文件夹作为本地仓库\n\t//初始化该文件为本地仓库\n\t$ git init  \n\t\n\t//下载下来的test文件夹也是本地仓库\n\t$ git clone https://github.com/yangyangdeyi0119/test.git  \n```\n\n### 将文件加入暂存区\n\n文件本身在工作区，需要通过文件锁定，将其加入暂存区\n\n```\n\t//可以同时添加多个文件夹\n\t$ git add /test /test1\n\t\n\t//添加单个文件\n\t$ git add README.md \n    \n    //将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除  \n\t$ git add .   \n\t\n\t//将文件包的所有文件加入暂存区\n\t$ git add -f .\n    \n    //将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。 \n\t$ git add -u \n\t\n\t//表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。\n\t$ git add -A\n\t\n\t//暂存区各类状态\n\t- untracked 未跟踪（未被纳入版本控制）\n\t- tracked 已跟踪（被纳入版本控制）\n\t- Unmodified 未修改状态\n\t- Modified 已修改状态\n\t- Staged 已暂存状态\n```\n\n### 将文件移除暂存区\n\n```\n\t//仅删除暂存区的文件，不影响工作区的文件\n\t$ git rm --cache <file/aaa>\n\t\n\t//删除暂存区和工作区的文件\n\t$ git rm -f <file/aaa>\n\t\n\t//撤销对暂存区的修改。这个命令主要用于丢弃或还原文件的更改(测试未成功)\n\t$ git restore --staged <file/aaa>\n\t\n\t//将分支回退到之前的提交，并且还可以选择是否保留暂存区的更改\n\t$ git reset\n\t\n\t//撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工作区对应文件file；这个命令改变的是工作区\n\t$ git checkout 文件名\n\t\n```\n\n### 查看文件状态\n\n```\n\t//获取文件状态-完整\n\t$ git status\n\t\n\t//获取文件状态-简洁\n\t$ git status -s 更加简洁\n\t\t' ' （空格）表示文件未发生更改\n\t\tM 表示文件发生改动。\n\t\tA 表示新增文件。\n\t\tD 表示删除文件。\n\t\tR 表示重命名。\n\t\tC 表示复制。\n\t\tU 表示更新但未合并。\n\t\t? 表示未跟踪文件。\n\t\t! 表示忽略文件。\n\t\n\t//显示分支和跟踪信息 --branch\n\t$ git status -s -b\n\t\n\t//显示变更的文本内容，在不使用 -s 选项时才会显示变更内容\n\t//只有一个 -v 选项时，显示版本库和暂存区之间比较发生变更的内容。\n\t$ git status -v\n\t//而有两个 -v 选项时，显示暂存区和工作区之间比较发生变更的内容。\n\t$ git status -v -v\n\t\n\t//显示未跟踪文件\n\t$ git status -s -u[<mode>]\n\t\tno —— 不显示未跟踪的文件\n\t\tnormal —— 显示未跟踪的文件和目录。\n\t\tall —— 还显示了未跟踪目录下的文件\n\t\t\n\t//用来查看暂存区中文件信息\n\t$ git ls-files -参数\n\t\t--cached(-c)显示暂存区中的文件，git ls-files命令默认的参数\n\t\t--deleted(-d)显示删除的文件\n\t\t--modified(-m) 显示修改过的文件\n\t\t--other(-o)显示没有被git跟踪的文件\n\t\t--stage(-s) 显示mode以及文件对应的Blob对象，进而我们可以获取暂存区中对应文件里面的内容。\n```\n\n### 文件加入分支\n\n提交更改，实际上就是把暂存区的所有内容提交到当前分支，需要提交的文件修改通通放到暂存区；然后，一次性提交暂存区的所有修改\n\n```\n\t// 把暂存区的所有修改提交到分支，须输入描述信息\n\t$ git commit -m \"描述信息\"\n\t\n\t//更改之前一次commit的描述信息\n\t$ git commit --amend\n\t\n\t//提交暂存区的指定文件到仓库区（不行，最好单个提交git add，然后在git commit）\n\t$ git commit <file1> <file2> ... -m \"message\"\n\t\n\t//-a 参数设置修改文件后不需要执行 git add 命令，直接来提交（不好用）\n\t$ git commit -a\n\t\n\t出现报错\"nothing to commit, working tree clean\"\n    只需要修改该文件夹下的任意一个文件，因为检测到版本未发生改变\n    \n    //查找推送版本号\n    $ git log \n    \n    //选择回退版本，回退后，版本之后的将会丢失\n    git reset --hard <目标版本号>\n    \n    //软回退，不修改代码，回到暂存区\n    git reset --soft HEAD~n\n    \n    //只显示一行信息\n    git log --oneline\n```\n\n### 分支管理\n\n```\n\t//创建分支命令\n\t$ git branch <branchname>\n\t\n\t//切换分支命令\n\t$ git checkout <branchname>\n\t\n\t//列出分支\n\tgit branch\n\t//查看本地分支+上次提交的信息\n\t$ git branch -v\n\t//查看本地分支+远程分支\n\t$ git branch -a\n\t\t- 红色代表云端仓库分支\n\t\t- 白色代表本地仓库分支\n\t\t- 绿色代表目前所在分支\n\t//查看本地分支+上次提交的信息+本地和远程分支的关系\n\t$ git branch -vv\n\t//查看本地分支+上次提交的信息+本地和远程分支的关系+远程分支\n\t$ git branch -vv -a\n\t//只查看远程分支\n\t$ git branch -r\n\t\n\t//创建新分支并立即切换到该分支下\n\t$ git checkout -b <branchname>\n\t\n\t//删除本地分支\n\t$ git branch -d <branchname>\n\t//强制删除分支\n\t$ git branch -D aaa\n\t\n\t//合并分支\n\t$ git merge <branchname>\n\t\n\t//删除远程分支\n\t$ git push <主机名> -d <分支名>\n\t\n\t//将本地分支推送到远程分支，如果远程分支不存在，则创建。\n\t$ git push <远程主机名> <本地分支名>:<远程分支名>\n\t$ git push --set-upstream origin dev\n```\n\n### 将文件推送到云端仓库\n\n```\n\t//第一次推送代码指令\n\t$ git push -u origin <branchname>\n\t//-u参数可以在推送的同时,将origin仓库的master分支设置为本地仓库当前分支的upstream(上游)。添加了这个参数,将来运行git pull命令从远程仓库获取内容时,本地仓库的的这个分支就可以直接从origin的master分支获取内容,省去了另外添加参数的麻烦。\n\t\n\t//之后推送\n\t$ git push origin master\n\t\n\t//不同分支之间推送\n\t$ git push -u origin <branchname1>:origin/<branchname2>\n\t\n\t//云端仓库分支更新到本地仓库\n\t$ git remote update origin\n\t\t后缀加上 --prune则可以与云端仓库分支一致，多余的会被删除\n\t\t\n\t//报错\n\terror: failed to push some refs to 'https://github.com/yangyangdeyi0119/Learning.git'\n\thint: Updates were rejected because the remote contains work that you do not\n\thint: have locally. This is usually caused by another repository pushing to\n\thint: the same ref. If you want to integrate the remote changes, use\n\thint: 'git pull' before pushing again.\n\thint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\t直接git pull之后就可以了\n\t\n\t//删除现有远程仓库\n\t$ git remote rm origin\n\t\n\t//添加新远程仓库\n\t$ git remote add origin url\n\t\n\t//查看远程仓库的地址\n\t$ git remote -v\n\t\n\t//更换远程仓库地址，URL为新地址\n\t$ git remote set-url origin URL\n```\n\n### 暂存空间使用\n\nstash是本地的，不会通过git push命令上传到git server上\n\n发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑git stash。\n\n使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用git stash就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用git stash apply将以前一半的工作应用回来。\n\n经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。\n\n```\n\t//将未提交的修改保存至堆栈中\n\t$ git stash\n\t\n\t//为此次stash添加说明信息，便于以后查看\n\t$ git stash save \"stash message info\"  \n\t\n\t//查看stash栈中的内容\n\t$ git stash list\n\t\n\t//将stash中的内容弹出，并应用到当前分支对应的工作目录上，该命令将堆栈中最近保存的内容删除（出栈操作）\n\t$ git stash pop\n\t\n\t//将指定id的内容应用到当前分支的工作目录，内容不会删除，可以在多个分支上重复进行操作\n\t$ git stash apply stash名称\n\t\n\t//从堆栈中移除某个指定的stash\n\t$ git stash drop stash名称\n\t\n\t//清除堆栈中的所有内容\n\t$ git stash clear\n\t\n\t//查看堆栈中最新保存的stash和当前目录的差异。\n\t$ git stash show\n\t\n\t//从最新的stash创建分支。\n\t$ git stash branch\n```\n\n### 代码标签\n\ntag 中文我们可以称它为标签，tag 就是 对某次 commit 的一个标识，相当于起了一个别名。\n\n【轻量标签 】： 只是某个commit 的引用，可以理解为是一个commit的别名；\n\n【附注标签】 ：是存储在git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间以及其他的标签信息。它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证。\n\n```\n\t//直接列出所有的标签\n\t$ git tag\n\t\n\t//可以根据<tagname>进行标签的筛选\n\t$ git tag -l <tagname*>\n\t\n\t//查看标签的提交信息\n\t$ git show 标签名\n\t\n\t//在提交历史中查看标签\n\t$ git log --online --graph\n\t\n\t//创建轻量标签\n\t$ git tag 标签名\n\t$ git tag 标签名 提交版本\n\t\n\t//创建附注标签\n\t$ git tag -a 标签名称 -m 附注信息\n\t$ git tag -a 标签名称 提交版本号 -m 附注信息\n\t\t-a : 理解为 annotated 的首字符，表示 附注标签\n\t\t\n\t//删除标签\n\tgit tag -d 标签名称\n\t\n\t//将指定的标签上传到远程仓库\n\t$ git push origin <tagname>\n\t\n\t//将所有不在远程仓库中的标签上传到远程仓库\n\t$ git push origin --tags\n\t\n\t//删除远程仓库中的 指定标签\n\t$ git push origin  :regs/tags/<tagname>\n\t$ git push origin --delete <tagname>\n```\n","slug":"Work No.5","published":1,"updated":"2024-07-26T09:53:09.595Z","_id":"clz0qu1nf0005rcfbh25yapd0","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h1><h2 id=\"git基本了解\"><a href=\"#git基本了解\" class=\"headerlink\" title=\"git基本了解\"></a>git基本了解</h2><h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"https://blog.csdn.net/qq_37883866/article/details/105349257\">超详细的Git使用教程(图文)-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_35206244/article/details/97698815\">Git基本使用教程（一）：入门及第一次基本完整操作_git的使用-CSDN博客</a></p>\n<p><a href=\"https://www.cnblogs.com/Jing-Wang/p/10991008.html\">git–一文弄懂git的工作区、索引区、本地仓库、远程仓库以及add、commit、push三个操作 - at_today - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/cposture/p/git.html\">【原创】Git删除暂存区或版本库中的文件 - cposture - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://geek-docs.com/git/git-questions/611_git_how_to_remove_a_file_from_the_staging_area_index_cache_in_git.html\">Git如何从暂存区（index&#x2F;cache）中移除文件|极客教程 (geek-docs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_44567318/article/details/119701438\">git status 状态命令——查看文件状态_git status 看非新增文件-CSDN博客</a></p>\n<p><a href=\"https://www.cnblogs.com/feeland/p/4500721.html\">Git 学习（三）本地仓库操作——git add &amp; commit - feesland - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/chaogu94/article/details/111057918\">git branch的详细使用，10个常见用法_git branch -vv-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_39505245/article/details/124705850\">Git基础 - git tag 一文真正的搞懂git标签的使用-CSDN博客</a></p>\n<h3 id=\"git下载\"><a href=\"#git下载\" class=\"headerlink\" title=\"git下载\"></a>git下载</h3><p><strong>官网：</strong> <a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a></p>\n<h2 id=\"git使用方法\"><a href=\"#git使用方法\" class=\"headerlink\" title=\"git使用方法\"></a>git使用方法</h2><h3 id=\"注册GitHub账号\"><a href=\"#注册GitHub账号\" class=\"headerlink\" title=\"注册GitHub账号\"></a>注册GitHub账号</h3><p>账号：1</p>\n<p>密码：1</p>\n<h3 id=\"git注册\"><a href=\"#git注册\" class=\"headerlink\" title=\"git注册\"></a>git注册</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-string\">//</span>设置账号，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ git config <span class=\"hljs-params\">--global</span> user.name <span class=\"hljs-string\">&quot;zhengyiyang&quot;</span><br><br><span class=\"hljs-string\">//</span>设置邮箱，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ git config <span class=\"hljs-params\">--global</span> user.email <span class=\"hljs-string\">&quot;903372205@qq.com&quot;</span><br><br><span class=\"hljs-string\">//</span>设置SSH，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;903372205@qq.com&quot;</span><br><br>储存位置：<span class=\"hljs-string\">/c/Users/114008/.ssh/id_rsa</span><br><br>id_rsa.pub为公共密钥<br>id_rsa为私人密钥<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"github配置SSH\"><a href=\"#github配置SSH\" class=\"headerlink\" title=\"github配置SSH\"></a>github配置SSH</h3><p><strong>打开id_rsa.pub文件，全选，复制全文</strong></p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-function\"><span class=\"hljs-title\">ssh</span></span>-rsa AAAAB3NzaC1yc2EA...<br></code></pre></td></tr></table></figure>\n\n<p><strong>github-&gt;账户-&gt;setting</strong></p>\n<p>Title：1</p>\n<p>Key type：Authentication Key</p>\n<h3 id=\"测试是否成功连接\"><a href=\"#测试是否成功连接\" class=\"headerlink\" title=\"测试是否成功连接\"></a>测试是否成功连接</h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">$ ssh -T git@github.com<br>//代表成功连接<br>Hi yangyangdeyi0119! You<span class=\"hljs-symbol\">&#x27;ve</span> successfully authenticated, but GitHub does <span class=\"hljs-keyword\">not</span> provide shell <span class=\"hljs-keyword\">access</span>.  <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"建立Github云端仓库\"><a href=\"#建立Github云端仓库\" class=\"headerlink\" title=\"建立Github云端仓库\"></a>建立Github云端仓库</h3><p><a href=\"https://blog.csdn.net/qq_44722674/article/details/117200397\">github仓库建立及配置教程新手教程_github创建仓库-CSDN博客</a></p>\n<p>修改用户名</p>\n<p><a href=\"https://blog.csdn.net/weixin_44285445/article/details/107833418\">GitHub修改昵称和用户名（图解详细教程）_github改名-CSDN博客</a></p>\n<h3 id=\"创建本地仓库\"><a href=\"#创建本地仓库\" class=\"headerlink\" title=\"创建本地仓库\"></a>创建本地仓库</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//首先需要新建一个文件夹作为本地仓库</span><br><span class=\"hljs-comment\">//初始化该文件为本地仓库</span><br><span class=\"hljs-symbol\">$</span> git init  <br><br><span class=\"hljs-comment\">//下载下来的test文件夹也是本地仓库</span><br><span class=\"hljs-symbol\">$</span> git clone https:<span class=\"hljs-comment\">//github.com/yangyangdeyi0119/test.git  </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件加入暂存区\"><a href=\"#将文件加入暂存区\" class=\"headerlink\" title=\"将文件加入暂存区\"></a>将文件加入暂存区</h3><p>文件本身在工作区，需要通过文件锁定，将其加入暂存区</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-comment\">//可以同时添加多个文件夹</span><br>$ git <span class=\"hljs-keyword\">add</span> /test /test1<br><br><span class=\"hljs-comment\">//添加单个文件</span><br>$ git <span class=\"hljs-keyword\">add</span> README.md <br>   <br>   <span class=\"hljs-comment\">//将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除  </span><br>$ git <span class=\"hljs-keyword\">add</span> .   <br><br><span class=\"hljs-comment\">//将文件包的所有文件加入暂存区</span><br>$ git <span class=\"hljs-keyword\">add</span> -f .<br>   <br>   <span class=\"hljs-comment\">//将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。 </span><br>$ git <span class=\"hljs-keyword\">add</span> -u <br><br><span class=\"hljs-comment\">//表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。</span><br>$ git <span class=\"hljs-keyword\">add</span> -A<br><br><span class=\"hljs-comment\">//暂存区各类状态</span><br>- untracked 未跟踪（未被纳入版本控制）<br>- tracked 已跟踪（被纳入版本控制）<br>- Unmodified 未修改状态<br>- Modified 已修改状态<br>- Staged 已暂存状态<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件移除暂存区\"><a href=\"#将文件移除暂存区\" class=\"headerlink\" title=\"将文件移除暂存区\"></a>将文件移除暂存区</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//仅删除暂存区的文件，不影响工作区的文件</span><br><span class=\"hljs-symbol\">$</span> git rm --cache &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//删除暂存区和工作区的文件</span><br><span class=\"hljs-symbol\">$</span> git rm -f &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//撤销对暂存区的修改。这个命令主要用于丢弃或还原文件的更改(测试未成功)</span><br><span class=\"hljs-symbol\">$</span> git restore --staged &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//将分支回退到之前的提交，并且还可以选择是否保留暂存区的更改</span><br><span class=\"hljs-symbol\">$</span> git reset<br><br><span class=\"hljs-comment\">//撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工作区对应文件file；这个命令改变的是工作区</span><br><span class=\"hljs-symbol\">$</span> git checkout 文件名<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"查看文件状态\"><a href=\"#查看文件状态\" class=\"headerlink\" title=\"查看文件状态\"></a>查看文件状态</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//获取文件状态-完整</span><br><span class=\"hljs-symbol\">$</span> git status<br><br><span class=\"hljs-comment\">//获取文件状态-简洁</span><br><span class=\"hljs-symbol\">$</span> git status -s 更加简洁<br>\t<span class=\"hljs-string\">&#x27; &#x27;</span> （空格）表示文件未发生更改<br>\tM 表示文件发生改动。<br>\tA 表示新增文件。<br>\tD 表示删除文件。<br>\tR 表示重命名。<br>\tC 表示复制。<br>\tU 表示更新但未合并。<br>\t? 表示未跟踪文件。<br>\t! 表示忽略文件。<br><br><span class=\"hljs-comment\">//显示分支和跟踪信息 --branch</span><br><span class=\"hljs-symbol\">$</span> git status -s -b<br><br><span class=\"hljs-comment\">//显示变更的文本内容，在不使用 -s 选项时才会显示变更内容</span><br><span class=\"hljs-comment\">//只有一个 -v 选项时，显示版本库和暂存区之间比较发生变更的内容。</span><br><span class=\"hljs-symbol\">$</span> git status -v<br><span class=\"hljs-comment\">//而有两个 -v 选项时，显示暂存区和工作区之间比较发生变更的内容。</span><br><span class=\"hljs-symbol\">$</span> git status -v -v<br><br><span class=\"hljs-comment\">//显示未跟踪文件</span><br><span class=\"hljs-symbol\">$</span> git status -s -u[&lt;mode&gt;]<br>\t<span class=\"hljs-keyword\">no</span> —— 不显示未跟踪的文件<br>\t<span class=\"hljs-built_in\">normal</span> —— 显示未跟踪的文件和目录。<br>\t<span class=\"hljs-keyword\">all</span> —— 还显示了未跟踪目录下的文件<br>\t<br><span class=\"hljs-comment\">//用来查看暂存区中文件信息</span><br><span class=\"hljs-symbol\">$</span> git ls-<span class=\"hljs-keyword\">files</span> -参数<br>\t--cached(-c)显示暂存区中的文件，git ls-<span class=\"hljs-keyword\">files</span>命令默认的参数<br>\t--deleted(-d)显示删除的文件<br>\t--modified(-m) 显示修改过的文件<br>\t--other(-o)显示没有被git跟踪的文件<br>\t--stage(-s) 显示mode以及文件对应的Blob对象，进而我们可以获取暂存区中对应文件里面的内容。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"文件加入分支\"><a href=\"#文件加入分支\" class=\"headerlink\" title=\"文件加入分支\"></a>文件加入分支</h3><p>提交更改，实际上就是把暂存区的所有内容提交到当前分支，需要提交的文件修改通通放到暂存区；然后，一次性提交暂存区的所有修改</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">// 把暂存区的所有修改提交到分支，须输入描述信息</span><br><span class=\"hljs-symbol\">$</span> git commit -m <span class=\"hljs-string\">&quot;描述信息&quot;</span><br><br><span class=\"hljs-comment\">//更改之前一次commit的描述信息</span><br><span class=\"hljs-symbol\">$</span> git commit --amend<br><br><span class=\"hljs-comment\">//提交暂存区的指定文件到仓库区（不行，最好单个提交git add，然后在git commit）</span><br><span class=\"hljs-symbol\">$</span> git commit &lt;file1&gt; &lt;file2&gt; ... -m <span class=\"hljs-string\">&quot;message&quot;</span><br><br><span class=\"hljs-comment\">//-a 参数设置修改文件后不需要执行 git add 命令，直接来提交（不好用）</span><br><span class=\"hljs-symbol\">$</span> git commit -a<br><br>出现报错<span class=\"hljs-string\">&quot;nothing to commit, working tree clean&quot;</span><br>   只需要修改该文件夹下的任意一个文件，因为检测到版本未发生改变<br>   <br>   <span class=\"hljs-comment\">//查找推送版本号</span><br>   <span class=\"hljs-symbol\">$</span> git <span class=\"hljs-built_in\">log</span> <br>   <br>   <span class=\"hljs-comment\">//选择回退版本，回退后，版本之后的将会丢失</span><br>   git reset --hard &lt;目标版本号&gt;<br>   <br>   <span class=\"hljs-comment\">//软回退，不修改代码，回到暂存区</span><br>   git reset --soft HEAD~n<br>   <br>   <span class=\"hljs-comment\">//只显示一行信息</span><br>   git <span class=\"hljs-built_in\">log</span> --oneline<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//创建分支命令</span><br><span class=\"hljs-symbol\">$</span> git branch &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//切换分支命令</span><br><span class=\"hljs-symbol\">$</span> git checkout &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//列出分支</span><br>git branch<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息</span><br><span class=\"hljs-symbol\">$</span> git branch -v<br><span class=\"hljs-comment\">//查看本地分支+远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -a<br>\t- 红色代表云端仓库分支<br>\t- 白色代表本地仓库分支<br>\t- 绿色代表目前所在分支<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息+本地和远程分支的关系</span><br><span class=\"hljs-symbol\">$</span> git branch -vv<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息+本地和远程分支的关系+远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -vv -a<br><span class=\"hljs-comment\">//只查看远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -r<br><br><span class=\"hljs-comment\">//创建新分支并立即切换到该分支下</span><br><span class=\"hljs-symbol\">$</span> git checkout -b &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//删除本地分支</span><br><span class=\"hljs-symbol\">$</span> git branch -d &lt;branchname&gt;<br><span class=\"hljs-comment\">//强制删除分支</span><br><span class=\"hljs-symbol\">$</span> git branch -D aaa<br><br><span class=\"hljs-comment\">//合并分支</span><br><span class=\"hljs-symbol\">$</span> git merge &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//删除远程分支</span><br><span class=\"hljs-symbol\">$</span> git push &lt;主机名&gt; -d &lt;分支名&gt;<br><br><span class=\"hljs-comment\">//将本地分支推送到远程分支，如果远程分支不存在，则创建。</span><br><span class=\"hljs-symbol\">$</span> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br><span class=\"hljs-symbol\">$</span> git push --<span class=\"hljs-keyword\">set</span>-upstream <span class=\"hljs-comment\">origin dev</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件推送到云端仓库\"><a href=\"#将文件推送到云端仓库\" class=\"headerlink\" title=\"将文件推送到云端仓库\"></a>将文件推送到云端仓库</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">//第一次推送代码指令<br>$ git push -u origin &lt;branchname&gt;<span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//-u参数可以在推送的同时,将origin仓库的master分支设置为本地仓库当前分支的upstream(上游)。添加了这个参数,将来运行git pull命令从远程仓库获取内容时,本地仓库的的这个分支就可以直接从origin的master分支获取内容,省去了另外添加参数的麻烦。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//之后推送</span><br>$ git push origin master<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//不同分支之间推送</span><br>$ git push -u origin &lt;branchname1&gt;:origin/&lt;branchname2&gt;<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//云端仓库分支更新到本地仓库</span><br>$ git remote update origin<br>\t后缀加上 <span class=\"hljs-comment\">--prune则可以与云端仓库分支一致，多余的会被删除</span><br>\t<span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//报错</span><br>error: failed <span class=\"hljs-built_in\">to</span> push some refs <span class=\"hljs-built_in\">to</span> <span class=\"hljs-string\">&#x27;https://github.com/yangyangdeyi0119/Learning.git&#x27;</span><br>hint: Updates were rejected because <span class=\"hljs-keyword\">the</span> remote <span class=\"hljs-keyword\">contains</span> work that you <span class=\"hljs-built_in\">do</span> <span class=\"hljs-keyword\">not</span><br>hint: have locally. This is usually caused <span class=\"hljs-keyword\">by</span> another repository pushing <span class=\"hljs-built_in\">to</span><br>hint: <span class=\"hljs-keyword\">the</span> same ref. If you want <span class=\"hljs-built_in\">to</span> integrate <span class=\"hljs-keyword\">the</span> remote changes, use<br>hint: <span class=\"hljs-string\">&#x27;git pull&#x27;</span> <span class=\"hljs-keyword\">before</span> pushing again.<br>hint: See <span class=\"hljs-keyword\">the</span> <span class=\"hljs-string\">&#x27;Note about fast-forwards&#x27;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&#x27;git push --help&#x27;</span> <span class=\"hljs-keyword\">for</span> details.<br>直接git pull之后就可以了<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//删除现有远程仓库</span><br>$ git remote rm origin<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//添加新远程仓库</span><br>$ git remote <span class=\"hljs-built_in\">add</span> origin url<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//查看远程仓库的地址</span><br>$ git remote -v<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//更换远程仓库地址，URL为新地址</span><br>$ git remote <span class=\"hljs-built_in\">set</span>-url origin <span class=\"hljs-built_in\">URL</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"暂存空间使用\"><a href=\"#暂存空间使用\" class=\"headerlink\" title=\"暂存空间使用\"></a>暂存空间使用</h3><p>stash是本地的，不会通过git push命令上传到git server上</p>\n<p>发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑git stash。</p>\n<p>使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用git stash就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用git stash apply将以前一半的工作应用回来。</p>\n<p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//将未提交的修改保存至堆栈中</span><br><span class=\"hljs-symbol\">$</span> git stash<br><br><span class=\"hljs-comment\">//为此次stash添加说明信息，便于以后查看</span><br><span class=\"hljs-symbol\">$</span> git stash save <span class=\"hljs-string\">&quot;stash message info&quot;</span>  <br><br><span class=\"hljs-comment\">//查看stash栈中的内容</span><br><span class=\"hljs-symbol\">$</span> git stash list<br><br><span class=\"hljs-comment\">//将stash中的内容弹出，并应用到当前分支对应的工作目录上，该命令将堆栈中最近保存的内容删除（出栈操作）</span><br><span class=\"hljs-symbol\">$</span> git stash pop<br><br><span class=\"hljs-comment\">//将指定id的内容应用到当前分支的工作目录，内容不会删除，可以在多个分支上重复进行操作</span><br><span class=\"hljs-symbol\">$</span> git stash apply stash名称<br><br><span class=\"hljs-comment\">//从堆栈中移除某个指定的stash</span><br><span class=\"hljs-symbol\">$</span> git stash drop stash名称<br><br><span class=\"hljs-comment\">//清除堆栈中的所有内容</span><br><span class=\"hljs-symbol\">$</span> git stash clear<br><br><span class=\"hljs-comment\">//查看堆栈中最新保存的stash和当前目录的差异。</span><br><span class=\"hljs-symbol\">$</span> git stash show<br><br><span class=\"hljs-comment\">//从最新的stash创建分支。</span><br><span class=\"hljs-symbol\">$</span> git stash branch<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"代码标签\"><a href=\"#代码标签\" class=\"headerlink\" title=\"代码标签\"></a>代码标签</h3><p>tag 中文我们可以称它为标签，tag 就是 对某次 commit 的一个标识，相当于起了一个别名。</p>\n<p>【轻量标签 】： 只是某个commit 的引用，可以理解为是一个commit的别名；</p>\n<p>【附注标签】 ：是存储在git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间以及其他的标签信息。它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//直接列出所有的标签</span><br><span class=\"hljs-symbol\">$</span> git tag<br><br><span class=\"hljs-comment\">//可以根据&lt;tagname&gt;进行标签的筛选</span><br><span class=\"hljs-symbol\">$</span> git tag -l &lt;tagname*&gt;<br><br><span class=\"hljs-comment\">//查看标签的提交信息</span><br><span class=\"hljs-symbol\">$</span> git show 标签名<br><br><span class=\"hljs-comment\">//在提交历史中查看标签</span><br><span class=\"hljs-symbol\">$</span> git <span class=\"hljs-built_in\">log</span> --online --graph<br><br><span class=\"hljs-comment\">//创建轻量标签</span><br><span class=\"hljs-symbol\">$</span> git tag 标签名<br><span class=\"hljs-symbol\">$</span> git tag 标签名 提交版本<br><br><span class=\"hljs-comment\">//创建附注标签</span><br><span class=\"hljs-symbol\">$</span> git tag -a 标签名称 -m 附注信息<br><span class=\"hljs-symbol\">$</span> git tag -a 标签名称 提交版本号 -m 附注信息<br>\t-a : 理解为 annotated 的首字符，表示 附注标签<br>\t<br><span class=\"hljs-comment\">//删除标签</span><br>git tag -d 标签名称<br><br><span class=\"hljs-comment\">//将指定的标签上传到远程仓库</span><br><span class=\"hljs-symbol\">$</span> git push origin &lt;tagname&gt;<br><br><span class=\"hljs-comment\">//将所有不在远程仓库中的标签上传到远程仓库</span><br><span class=\"hljs-symbol\">$</span> git push origin --tags<br><br><span class=\"hljs-comment\">//删除远程仓库中的 指定标签</span><br><span class=\"hljs-symbol\">$</span> git push origin  :regs/tags/&lt;tagname&gt;<br><span class=\"hljs-symbol\">$</span> git push origin --delete &lt;tagname&gt;<br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h1><h2 id=\"git基本了解\"><a href=\"#git基本了解\" class=\"headerlink\" title=\"git基本了解\"></a>git基本了解</h2><h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"https://blog.csdn.net/qq_37883866/article/details/105349257\">超详细的Git使用教程(图文)-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_35206244/article/details/97698815\">Git基本使用教程（一）：入门及第一次基本完整操作_git的使用-CSDN博客</a></p>\n<p><a href=\"https://www.cnblogs.com/Jing-Wang/p/10991008.html\">git–一文弄懂git的工作区、索引区、本地仓库、远程仓库以及add、commit、push三个操作 - at_today - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/cposture/p/git.html\">【原创】Git删除暂存区或版本库中的文件 - cposture - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://geek-docs.com/git/git-questions/611_git_how_to_remove_a_file_from_the_staging_area_index_cache_in_git.html\">Git如何从暂存区（index&#x2F;cache）中移除文件|极客教程 (geek-docs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_44567318/article/details/119701438\">git status 状态命令——查看文件状态_git status 看非新增文件-CSDN博客</a></p>\n<p><a href=\"https://www.cnblogs.com/feeland/p/4500721.html\">Git 学习（三）本地仓库操作——git add &amp; commit - feesland - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/chaogu94/article/details/111057918\">git branch的详细使用，10个常见用法_git branch -vv-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_39505245/article/details/124705850\">Git基础 - git tag 一文真正的搞懂git标签的使用-CSDN博客</a></p>\n<h3 id=\"git下载\"><a href=\"#git下载\" class=\"headerlink\" title=\"git下载\"></a>git下载</h3><p><strong>官网：</strong> <a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a></p>\n<h2 id=\"git使用方法\"><a href=\"#git使用方法\" class=\"headerlink\" title=\"git使用方法\"></a>git使用方法</h2><h3 id=\"注册GitHub账号\"><a href=\"#注册GitHub账号\" class=\"headerlink\" title=\"注册GitHub账号\"></a>注册GitHub账号</h3><p>账号：1</p>\n<p>密码：1</p>\n<h3 id=\"git注册\"><a href=\"#git注册\" class=\"headerlink\" title=\"git注册\"></a>git注册</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-string\">//</span>设置账号，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ git config <span class=\"hljs-params\">--global</span> user.name <span class=\"hljs-string\">&quot;zhengyiyang&quot;</span><br><br><span class=\"hljs-string\">//</span>设置邮箱，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ git config <span class=\"hljs-params\">--global</span> user.email <span class=\"hljs-string\">&quot;903372205@qq.com&quot;</span><br><br><span class=\"hljs-string\">//</span>设置SSH，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;903372205@qq.com&quot;</span><br><br>储存位置：<span class=\"hljs-string\">/c/Users/114008/.ssh/id_rsa</span><br><br>id_rsa.pub为公共密钥<br>id_rsa为私人密钥<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"github配置SSH\"><a href=\"#github配置SSH\" class=\"headerlink\" title=\"github配置SSH\"></a>github配置SSH</h3><p><strong>打开id_rsa.pub文件，全选，复制全文</strong></p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-function\"><span class=\"hljs-title\">ssh</span></span>-rsa AAAAB3NzaC1yc2EA...<br></code></pre></td></tr></table></figure>\n\n<p><strong>github-&gt;账户-&gt;setting</strong></p>\n<p>Title：1</p>\n<p>Key type：Authentication Key</p>\n<h3 id=\"测试是否成功连接\"><a href=\"#测试是否成功连接\" class=\"headerlink\" title=\"测试是否成功连接\"></a>测试是否成功连接</h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">$ ssh -T git@github.com<br>//代表成功连接<br>Hi yangyangdeyi0119! You<span class=\"hljs-symbol\">&#x27;ve</span> successfully authenticated, but GitHub does <span class=\"hljs-keyword\">not</span> provide shell <span class=\"hljs-keyword\">access</span>.  <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"建立Github云端仓库\"><a href=\"#建立Github云端仓库\" class=\"headerlink\" title=\"建立Github云端仓库\"></a>建立Github云端仓库</h3><p><a href=\"https://blog.csdn.net/qq_44722674/article/details/117200397\">github仓库建立及配置教程新手教程_github创建仓库-CSDN博客</a></p>\n<p>修改用户名</p>\n<p><a href=\"https://blog.csdn.net/weixin_44285445/article/details/107833418\">GitHub修改昵称和用户名（图解详细教程）_github改名-CSDN博客</a></p>\n<h3 id=\"创建本地仓库\"><a href=\"#创建本地仓库\" class=\"headerlink\" title=\"创建本地仓库\"></a>创建本地仓库</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//首先需要新建一个文件夹作为本地仓库</span><br><span class=\"hljs-comment\">//初始化该文件为本地仓库</span><br><span class=\"hljs-symbol\">$</span> git init  <br><br><span class=\"hljs-comment\">//下载下来的test文件夹也是本地仓库</span><br><span class=\"hljs-symbol\">$</span> git clone https:<span class=\"hljs-comment\">//github.com/yangyangdeyi0119/test.git  </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件加入暂存区\"><a href=\"#将文件加入暂存区\" class=\"headerlink\" title=\"将文件加入暂存区\"></a>将文件加入暂存区</h3><p>文件本身在工作区，需要通过文件锁定，将其加入暂存区</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-comment\">//可以同时添加多个文件夹</span><br>$ git <span class=\"hljs-keyword\">add</span> /test /test1<br><br><span class=\"hljs-comment\">//添加单个文件</span><br>$ git <span class=\"hljs-keyword\">add</span> README.md <br>   <br>   <span class=\"hljs-comment\">//将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除  </span><br>$ git <span class=\"hljs-keyword\">add</span> .   <br><br><span class=\"hljs-comment\">//将文件包的所有文件加入暂存区</span><br>$ git <span class=\"hljs-keyword\">add</span> -f .<br>   <br>   <span class=\"hljs-comment\">//将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。 </span><br>$ git <span class=\"hljs-keyword\">add</span> -u <br><br><span class=\"hljs-comment\">//表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。</span><br>$ git <span class=\"hljs-keyword\">add</span> -A<br><br><span class=\"hljs-comment\">//暂存区各类状态</span><br>- untracked 未跟踪（未被纳入版本控制）<br>- tracked 已跟踪（被纳入版本控制）<br>- Unmodified 未修改状态<br>- Modified 已修改状态<br>- Staged 已暂存状态<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件移除暂存区\"><a href=\"#将文件移除暂存区\" class=\"headerlink\" title=\"将文件移除暂存区\"></a>将文件移除暂存区</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//仅删除暂存区的文件，不影响工作区的文件</span><br><span class=\"hljs-symbol\">$</span> git rm --cache &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//删除暂存区和工作区的文件</span><br><span class=\"hljs-symbol\">$</span> git rm -f &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//撤销对暂存区的修改。这个命令主要用于丢弃或还原文件的更改(测试未成功)</span><br><span class=\"hljs-symbol\">$</span> git restore --staged &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//将分支回退到之前的提交，并且还可以选择是否保留暂存区的更改</span><br><span class=\"hljs-symbol\">$</span> git reset<br><br><span class=\"hljs-comment\">//撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工作区对应文件file；这个命令改变的是工作区</span><br><span class=\"hljs-symbol\">$</span> git checkout 文件名<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"查看文件状态\"><a href=\"#查看文件状态\" class=\"headerlink\" title=\"查看文件状态\"></a>查看文件状态</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//获取文件状态-完整</span><br><span class=\"hljs-symbol\">$</span> git status<br><br><span class=\"hljs-comment\">//获取文件状态-简洁</span><br><span class=\"hljs-symbol\">$</span> git status -s 更加简洁<br>\t<span class=\"hljs-string\">&#x27; &#x27;</span> （空格）表示文件未发生更改<br>\tM 表示文件发生改动。<br>\tA 表示新增文件。<br>\tD 表示删除文件。<br>\tR 表示重命名。<br>\tC 表示复制。<br>\tU 表示更新但未合并。<br>\t? 表示未跟踪文件。<br>\t! 表示忽略文件。<br><br><span class=\"hljs-comment\">//显示分支和跟踪信息 --branch</span><br><span class=\"hljs-symbol\">$</span> git status -s -b<br><br><span class=\"hljs-comment\">//显示变更的文本内容，在不使用 -s 选项时才会显示变更内容</span><br><span class=\"hljs-comment\">//只有一个 -v 选项时，显示版本库和暂存区之间比较发生变更的内容。</span><br><span class=\"hljs-symbol\">$</span> git status -v<br><span class=\"hljs-comment\">//而有两个 -v 选项时，显示暂存区和工作区之间比较发生变更的内容。</span><br><span class=\"hljs-symbol\">$</span> git status -v -v<br><br><span class=\"hljs-comment\">//显示未跟踪文件</span><br><span class=\"hljs-symbol\">$</span> git status -s -u[&lt;mode&gt;]<br>\t<span class=\"hljs-keyword\">no</span> —— 不显示未跟踪的文件<br>\t<span class=\"hljs-built_in\">normal</span> —— 显示未跟踪的文件和目录。<br>\t<span class=\"hljs-keyword\">all</span> —— 还显示了未跟踪目录下的文件<br>\t<br><span class=\"hljs-comment\">//用来查看暂存区中文件信息</span><br><span class=\"hljs-symbol\">$</span> git ls-<span class=\"hljs-keyword\">files</span> -参数<br>\t--cached(-c)显示暂存区中的文件，git ls-<span class=\"hljs-keyword\">files</span>命令默认的参数<br>\t--deleted(-d)显示删除的文件<br>\t--modified(-m) 显示修改过的文件<br>\t--other(-o)显示没有被git跟踪的文件<br>\t--stage(-s) 显示mode以及文件对应的Blob对象，进而我们可以获取暂存区中对应文件里面的内容。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"文件加入分支\"><a href=\"#文件加入分支\" class=\"headerlink\" title=\"文件加入分支\"></a>文件加入分支</h3><p>提交更改，实际上就是把暂存区的所有内容提交到当前分支，需要提交的文件修改通通放到暂存区；然后，一次性提交暂存区的所有修改</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">// 把暂存区的所有修改提交到分支，须输入描述信息</span><br><span class=\"hljs-symbol\">$</span> git commit -m <span class=\"hljs-string\">&quot;描述信息&quot;</span><br><br><span class=\"hljs-comment\">//更改之前一次commit的描述信息</span><br><span class=\"hljs-symbol\">$</span> git commit --amend<br><br><span class=\"hljs-comment\">//提交暂存区的指定文件到仓库区（不行，最好单个提交git add，然后在git commit）</span><br><span class=\"hljs-symbol\">$</span> git commit &lt;file1&gt; &lt;file2&gt; ... -m <span class=\"hljs-string\">&quot;message&quot;</span><br><br><span class=\"hljs-comment\">//-a 参数设置修改文件后不需要执行 git add 命令，直接来提交（不好用）</span><br><span class=\"hljs-symbol\">$</span> git commit -a<br><br>出现报错<span class=\"hljs-string\">&quot;nothing to commit, working tree clean&quot;</span><br>   只需要修改该文件夹下的任意一个文件，因为检测到版本未发生改变<br>   <br>   <span class=\"hljs-comment\">//查找推送版本号</span><br>   <span class=\"hljs-symbol\">$</span> git <span class=\"hljs-built_in\">log</span> <br>   <br>   <span class=\"hljs-comment\">//选择回退版本，回退后，版本之后的将会丢失</span><br>   git reset --hard &lt;目标版本号&gt;<br>   <br>   <span class=\"hljs-comment\">//软回退，不修改代码，回到暂存区</span><br>   git reset --soft HEAD~n<br>   <br>   <span class=\"hljs-comment\">//只显示一行信息</span><br>   git <span class=\"hljs-built_in\">log</span> --oneline<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//创建分支命令</span><br><span class=\"hljs-symbol\">$</span> git branch &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//切换分支命令</span><br><span class=\"hljs-symbol\">$</span> git checkout &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//列出分支</span><br>git branch<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息</span><br><span class=\"hljs-symbol\">$</span> git branch -v<br><span class=\"hljs-comment\">//查看本地分支+远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -a<br>\t- 红色代表云端仓库分支<br>\t- 白色代表本地仓库分支<br>\t- 绿色代表目前所在分支<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息+本地和远程分支的关系</span><br><span class=\"hljs-symbol\">$</span> git branch -vv<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息+本地和远程分支的关系+远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -vv -a<br><span class=\"hljs-comment\">//只查看远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -r<br><br><span class=\"hljs-comment\">//创建新分支并立即切换到该分支下</span><br><span class=\"hljs-symbol\">$</span> git checkout -b &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//删除本地分支</span><br><span class=\"hljs-symbol\">$</span> git branch -d &lt;branchname&gt;<br><span class=\"hljs-comment\">//强制删除分支</span><br><span class=\"hljs-symbol\">$</span> git branch -D aaa<br><br><span class=\"hljs-comment\">//合并分支</span><br><span class=\"hljs-symbol\">$</span> git merge &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//删除远程分支</span><br><span class=\"hljs-symbol\">$</span> git push &lt;主机名&gt; -d &lt;分支名&gt;<br><br><span class=\"hljs-comment\">//将本地分支推送到远程分支，如果远程分支不存在，则创建。</span><br><span class=\"hljs-symbol\">$</span> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br><span class=\"hljs-symbol\">$</span> git push --<span class=\"hljs-keyword\">set</span>-upstream <span class=\"hljs-comment\">origin dev</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件推送到云端仓库\"><a href=\"#将文件推送到云端仓库\" class=\"headerlink\" title=\"将文件推送到云端仓库\"></a>将文件推送到云端仓库</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">//第一次推送代码指令<br>$ git push -u origin &lt;branchname&gt;<span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//-u参数可以在推送的同时,将origin仓库的master分支设置为本地仓库当前分支的upstream(上游)。添加了这个参数,将来运行git pull命令从远程仓库获取内容时,本地仓库的的这个分支就可以直接从origin的master分支获取内容,省去了另外添加参数的麻烦。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//之后推送</span><br>$ git push origin master<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//不同分支之间推送</span><br>$ git push -u origin &lt;branchname1&gt;:origin/&lt;branchname2&gt;<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//云端仓库分支更新到本地仓库</span><br>$ git remote update origin<br>\t后缀加上 <span class=\"hljs-comment\">--prune则可以与云端仓库分支一致，多余的会被删除</span><br>\t<span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//报错</span><br>error: failed <span class=\"hljs-built_in\">to</span> push some refs <span class=\"hljs-built_in\">to</span> <span class=\"hljs-string\">&#x27;https://github.com/yangyangdeyi0119/Learning.git&#x27;</span><br>hint: Updates were rejected because <span class=\"hljs-keyword\">the</span> remote <span class=\"hljs-keyword\">contains</span> work that you <span class=\"hljs-built_in\">do</span> <span class=\"hljs-keyword\">not</span><br>hint: have locally. This is usually caused <span class=\"hljs-keyword\">by</span> another repository pushing <span class=\"hljs-built_in\">to</span><br>hint: <span class=\"hljs-keyword\">the</span> same ref. If you want <span class=\"hljs-built_in\">to</span> integrate <span class=\"hljs-keyword\">the</span> remote changes, use<br>hint: <span class=\"hljs-string\">&#x27;git pull&#x27;</span> <span class=\"hljs-keyword\">before</span> pushing again.<br>hint: See <span class=\"hljs-keyword\">the</span> <span class=\"hljs-string\">&#x27;Note about fast-forwards&#x27;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&#x27;git push --help&#x27;</span> <span class=\"hljs-keyword\">for</span> details.<br>直接git pull之后就可以了<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//删除现有远程仓库</span><br>$ git remote rm origin<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//添加新远程仓库</span><br>$ git remote <span class=\"hljs-built_in\">add</span> origin url<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//查看远程仓库的地址</span><br>$ git remote -v<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//更换远程仓库地址，URL为新地址</span><br>$ git remote <span class=\"hljs-built_in\">set</span>-url origin <span class=\"hljs-built_in\">URL</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"暂存空间使用\"><a href=\"#暂存空间使用\" class=\"headerlink\" title=\"暂存空间使用\"></a>暂存空间使用</h3><p>stash是本地的，不会通过git push命令上传到git server上</p>\n<p>发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑git stash。</p>\n<p>使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用git stash就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用git stash apply将以前一半的工作应用回来。</p>\n<p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//将未提交的修改保存至堆栈中</span><br><span class=\"hljs-symbol\">$</span> git stash<br><br><span class=\"hljs-comment\">//为此次stash添加说明信息，便于以后查看</span><br><span class=\"hljs-symbol\">$</span> git stash save <span class=\"hljs-string\">&quot;stash message info&quot;</span>  <br><br><span class=\"hljs-comment\">//查看stash栈中的内容</span><br><span class=\"hljs-symbol\">$</span> git stash list<br><br><span class=\"hljs-comment\">//将stash中的内容弹出，并应用到当前分支对应的工作目录上，该命令将堆栈中最近保存的内容删除（出栈操作）</span><br><span class=\"hljs-symbol\">$</span> git stash pop<br><br><span class=\"hljs-comment\">//将指定id的内容应用到当前分支的工作目录，内容不会删除，可以在多个分支上重复进行操作</span><br><span class=\"hljs-symbol\">$</span> git stash apply stash名称<br><br><span class=\"hljs-comment\">//从堆栈中移除某个指定的stash</span><br><span class=\"hljs-symbol\">$</span> git stash drop stash名称<br><br><span class=\"hljs-comment\">//清除堆栈中的所有内容</span><br><span class=\"hljs-symbol\">$</span> git stash clear<br><br><span class=\"hljs-comment\">//查看堆栈中最新保存的stash和当前目录的差异。</span><br><span class=\"hljs-symbol\">$</span> git stash show<br><br><span class=\"hljs-comment\">//从最新的stash创建分支。</span><br><span class=\"hljs-symbol\">$</span> git stash branch<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"代码标签\"><a href=\"#代码标签\" class=\"headerlink\" title=\"代码标签\"></a>代码标签</h3><p>tag 中文我们可以称它为标签，tag 就是 对某次 commit 的一个标识，相当于起了一个别名。</p>\n<p>【轻量标签 】： 只是某个commit 的引用，可以理解为是一个commit的别名；</p>\n<p>【附注标签】 ：是存储在git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间以及其他的标签信息。它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//直接列出所有的标签</span><br><span class=\"hljs-symbol\">$</span> git tag<br><br><span class=\"hljs-comment\">//可以根据&lt;tagname&gt;进行标签的筛选</span><br><span class=\"hljs-symbol\">$</span> git tag -l &lt;tagname*&gt;<br><br><span class=\"hljs-comment\">//查看标签的提交信息</span><br><span class=\"hljs-symbol\">$</span> git show 标签名<br><br><span class=\"hljs-comment\">//在提交历史中查看标签</span><br><span class=\"hljs-symbol\">$</span> git <span class=\"hljs-built_in\">log</span> --online --graph<br><br><span class=\"hljs-comment\">//创建轻量标签</span><br><span class=\"hljs-symbol\">$</span> git tag 标签名<br><span class=\"hljs-symbol\">$</span> git tag 标签名 提交版本<br><br><span class=\"hljs-comment\">//创建附注标签</span><br><span class=\"hljs-symbol\">$</span> git tag -a 标签名称 -m 附注信息<br><span class=\"hljs-symbol\">$</span> git tag -a 标签名称 提交版本号 -m 附注信息<br>\t-a : 理解为 annotated 的首字符，表示 附注标签<br>\t<br><span class=\"hljs-comment\">//删除标签</span><br>git tag -d 标签名称<br><br><span class=\"hljs-comment\">//将指定的标签上传到远程仓库</span><br><span class=\"hljs-symbol\">$</span> git push origin &lt;tagname&gt;<br><br><span class=\"hljs-comment\">//将所有不在远程仓库中的标签上传到远程仓库</span><br><span class=\"hljs-symbol\">$</span> git push origin --tags<br><br><span class=\"hljs-comment\">//删除远程仓库中的 指定标签</span><br><span class=\"hljs-symbol\">$</span> git push origin  :regs/tags/&lt;tagname&gt;<br><span class=\"hljs-symbol\">$</span> git push origin --delete &lt;tagname&gt;<br></code></pre></td></tr></table></figure>\n"},{"title":"Markdown用法","date":"2023-11-29T16:00:00.000Z","_content":"\n# Markdown用法\n- 要写一个好看的文档，格式和各种引用非常重要，Markdown作为开发过程中的记录文件，也是目前应用最广泛的一个格式，因此开篇先分享一下基本用法。\n- 这边主要分享几种最常规的使用方法，主要有标题、换行、强调、代码块、分割线、链接、图片、表格这8种非常常用的用法，其余请参照[官方网站](https://markdown.com.cn)\n## 1.标题\n- 一级标题：`# ZYY 1`\n- 二级标题：`## ZYY 2`\n- 三级标题：`### ZYY 3`\n- 最简单的解释就是，**n个#代表n级标题**，空格之后加上标题就行\n## 2.换行\n- 句子末尾加上 `<br>` 或者 `两个空格+Enter键`\n```\nexample1：ZYY <br>\nexample2：ZYY(Space*2+Enter，括号和汉字自动忽视)\n```\n- **最好用的还是2个空格+Enter键**，但是你看不见它到底有没有换行，所以 `<br>` 这个是比较直观的，但是打字速度就慢了\n## 3.强调\n- 粗体（Bold）： `**ZYY** 或者 __ZYY__`\n- 斜体（Italic）： `*ZYY* 或者 _ZYY_`\n- 粗斜体： `***ZYY*** 或者 ___ZYY___`\n```\nexample1：ZZZ **YYY** YYY  或者ZZZ __YYY__ YYY\nexample2：ZZZ *YYY* YYY  或者ZZZ _YYY_ YYY\nexample3：ZZZ ***YYY*** YYY  或者ZZZ ___YYY___ YYY\n```\n- 这个没啥特殊要求，两种方法都可以，**但是最好每种符号的前后都加上空格，不然有些会失灵**\n## 4.代码块 and 代码\n```\n代码： ` + ` 单个反引号做开头，单个反引号做结尾，中间就是特殊的代码区\n代码块：``` + ``` 用三个反引号做开头，三个反引号做结尾，中间就是代码块\n\nexample1： ZZZ `YYY` YYY\n```\n- 这个代码块挺好用的，**特别是想要强调说一些事情的时候，可以给他框出来**，我上面的所有例子都是用代码块罗列的，清晰明了，代码块不一定写代码\n## 5.分割线\n-  `*** 或者 --- 或者 ___`\n```\nexample1： ***\nexample2： ---\nexample3： ___\n```\n- 就会出现一个非常丑的线，**这三根线的类型是一样的，不管用哪个都是一根线**\n## 6.链接\n- 链接： `[超链接显示名](超链接地址 \"超链接title\")`\n- 直接上网址或者email地址：<链接地址>\n```\nexample1：ZZZ [YYY](https://github.com/BraveYiYang) YYY\nexample2：ZZZ [YYY](https://github.com/BraveYiYang \"Brave\") YYY\nexample3：<https://github.com/BraveYiYang>\n```\n- 这个还是很好用的，中括号里面的是你可以随便定义，然后把你小括号的链接赋值在你中括号的定义里面，小括号的双引号里面是你鼠标放上去，他会显示出来你的小标签\n## 7.图片\n- 插入图片： `[![图片alt](图片链接 \"图片title\")](超链接)`\n```\nexample1：![ZYY](/ZYY/Z.jpg)\nexample2：![ZYY](/ZYY/Z.jpg \"Brave\")\nexample3：[![ZYY](/ZYY/Z.jpg \"Brave\")](https://github.com/BraveYiYang)\n```\n- 这个图片的用处是很多的，我们可以随心所欲的插入图片，**图文并茂**\n## 8.表格\n-  | 表示表格的线，用他来固定列数，几行就是表格的几行，\n- --- 来定义标题行，而且每一列的 --- 数量不一样代表每一列的长度也不一样\n- :--- 表示左对齐 ---: 表示右对齐 :---: 表示居中对齐\n```\nexample1：\n| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |\nexample2：\n| Syntax | Description |\n| --- | ----------- |\n| Header | Title |\n| Paragraph | Text |\nexample3：\n| Syntax      | Description | Test Text     |\n| :---        |    :----:   |          ---: |\n| Header      | Title       | Here's this   |\n| Paragraph   | Text        | And more      |\n```\n- **表格其实不是很常用，但是也是算作是一个基本的使用方法**\n# 总结\n- **markdown的使用方法其实不难，而且也很容易入门，只不过没有那么直观，但是大家用习惯之后，就非常容易上手，所以鼓励大家多使用，熟能生巧，多练才会掌握的快！**","source":"_posts/20231204ZYY-Markdown用法.md","raw":"---\ntitle: Markdown用法\ntag: Markdown\ndate: 2023-11-30\ncategories: 路演文书\n---\n\n# Markdown用法\n- 要写一个好看的文档，格式和各种引用非常重要，Markdown作为开发过程中的记录文件，也是目前应用最广泛的一个格式，因此开篇先分享一下基本用法。\n- 这边主要分享几种最常规的使用方法，主要有标题、换行、强调、代码块、分割线、链接、图片、表格这8种非常常用的用法，其余请参照[官方网站](https://markdown.com.cn)\n## 1.标题\n- 一级标题：`# ZYY 1`\n- 二级标题：`## ZYY 2`\n- 三级标题：`### ZYY 3`\n- 最简单的解释就是，**n个#代表n级标题**，空格之后加上标题就行\n## 2.换行\n- 句子末尾加上 `<br>` 或者 `两个空格+Enter键`\n```\nexample1：ZYY <br>\nexample2：ZYY(Space*2+Enter，括号和汉字自动忽视)\n```\n- **最好用的还是2个空格+Enter键**，但是你看不见它到底有没有换行，所以 `<br>` 这个是比较直观的，但是打字速度就慢了\n## 3.强调\n- 粗体（Bold）： `**ZYY** 或者 __ZYY__`\n- 斜体（Italic）： `*ZYY* 或者 _ZYY_`\n- 粗斜体： `***ZYY*** 或者 ___ZYY___`\n```\nexample1：ZZZ **YYY** YYY  或者ZZZ __YYY__ YYY\nexample2：ZZZ *YYY* YYY  或者ZZZ _YYY_ YYY\nexample3：ZZZ ***YYY*** YYY  或者ZZZ ___YYY___ YYY\n```\n- 这个没啥特殊要求，两种方法都可以，**但是最好每种符号的前后都加上空格，不然有些会失灵**\n## 4.代码块 and 代码\n```\n代码： ` + ` 单个反引号做开头，单个反引号做结尾，中间就是特殊的代码区\n代码块：``` + ``` 用三个反引号做开头，三个反引号做结尾，中间就是代码块\n\nexample1： ZZZ `YYY` YYY\n```\n- 这个代码块挺好用的，**特别是想要强调说一些事情的时候，可以给他框出来**，我上面的所有例子都是用代码块罗列的，清晰明了，代码块不一定写代码\n## 5.分割线\n-  `*** 或者 --- 或者 ___`\n```\nexample1： ***\nexample2： ---\nexample3： ___\n```\n- 就会出现一个非常丑的线，**这三根线的类型是一样的，不管用哪个都是一根线**\n## 6.链接\n- 链接： `[超链接显示名](超链接地址 \"超链接title\")`\n- 直接上网址或者email地址：<链接地址>\n```\nexample1：ZZZ [YYY](https://github.com/BraveYiYang) YYY\nexample2：ZZZ [YYY](https://github.com/BraveYiYang \"Brave\") YYY\nexample3：<https://github.com/BraveYiYang>\n```\n- 这个还是很好用的，中括号里面的是你可以随便定义，然后把你小括号的链接赋值在你中括号的定义里面，小括号的双引号里面是你鼠标放上去，他会显示出来你的小标签\n## 7.图片\n- 插入图片： `[![图片alt](图片链接 \"图片title\")](超链接)`\n```\nexample1：![ZYY](/ZYY/Z.jpg)\nexample2：![ZYY](/ZYY/Z.jpg \"Brave\")\nexample3：[![ZYY](/ZYY/Z.jpg \"Brave\")](https://github.com/BraveYiYang)\n```\n- 这个图片的用处是很多的，我们可以随心所欲的插入图片，**图文并茂**\n## 8.表格\n-  | 表示表格的线，用他来固定列数，几行就是表格的几行，\n- --- 来定义标题行，而且每一列的 --- 数量不一样代表每一列的长度也不一样\n- :--- 表示左对齐 ---: 表示右对齐 :---: 表示居中对齐\n```\nexample1：\n| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |\nexample2：\n| Syntax | Description |\n| --- | ----------- |\n| Header | Title |\n| Paragraph | Text |\nexample3：\n| Syntax      | Description | Test Text     |\n| :---        |    :----:   |          ---: |\n| Header      | Title       | Here's this   |\n| Paragraph   | Text        | And more      |\n```\n- **表格其实不是很常用，但是也是算作是一个基本的使用方法**\n# 总结\n- **markdown的使用方法其实不难，而且也很容易入门，只不过没有那么直观，但是大家用习惯之后，就非常容易上手，所以鼓励大家多使用，熟能生巧，多练才会掌握的快！**","slug":"20231204ZYY-Markdown用法","published":1,"updated":"2024-07-26T09:52:12.938Z","_id":"clz1edk980000x8uwatnzfn6x","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Markdown用法\"><a href=\"#Markdown用法\" class=\"headerlink\" title=\"Markdown用法\"></a>Markdown用法</h1><ul>\n<li>要写一个好看的文档，格式和各种引用非常重要，Markdown作为开发过程中的记录文件，也是目前应用最广泛的一个格式，因此开篇先分享一下基本用法。</li>\n<li>这边主要分享几种最常规的使用方法，主要有标题、换行、强调、代码块、分割线、链接、图片、表格这8种非常常用的用法，其余请参照<a href=\"https://markdown.com.cn/\">官方网站</a></li>\n</ul>\n<h2 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1.标题\"></a>1.标题</h2><ul>\n<li>一级标题：<code># ZYY 1</code></li>\n<li>二级标题：<code>## ZYY 2</code></li>\n<li>三级标题：<code>### ZYY 3</code></li>\n<li>最简单的解释就是，<strong>n个#代表n级标题</strong>，空格之后加上标题就行</li>\n</ul>\n<h2 id=\"2-换行\"><a href=\"#2-换行\" class=\"headerlink\" title=\"2.换行\"></a>2.换行</h2><ul>\n<li>句子末尾加上 <code>&lt;br&gt;</code> 或者 <code>两个空格+Enter键</code><figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs isbl\"><span class=\"hljs-variable\">example1</span>：<span class=\"hljs-variable\">ZYY</span> &lt;<span class=\"hljs-variable\">br</span>&gt;<br><span class=\"hljs-variable\">example2</span>：<span class=\"hljs-function\"><span class=\"hljs-title\">ZYY</span>(<span class=\"hljs-variable\">Space</span>*<span class=\"hljs-number\">2</span>+<span class=\"hljs-variable\">Enter</span>，括号和汉字自动忽视)</span><br></code></pre></td></tr></table></figure></li>\n<li><strong>最好用的还是2个空格+Enter键</strong>，但是你看不见它到底有没有换行，所以 <code>&lt;br&gt;</code> 这个是比较直观的，但是打字速度就慢了</li>\n</ul>\n<h2 id=\"3-强调\"><a href=\"#3-强调\" class=\"headerlink\" title=\"3.强调\"></a>3.强调</h2><ul>\n<li>粗体（Bold）： <code>**ZYY** 或者 __ZYY__</code></li>\n<li>斜体（Italic）： <code>*ZYY* 或者 _ZYY_</code></li>\n<li>粗斜体： <code>***ZYY*** 或者 ___ZYY___</code><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">example1：ZZZ <span class=\"hljs-strong\">**YYY**</span> YYY  或者ZZZ <span class=\"hljs-emphasis\">__YYY__</span> YYY<br>example2：ZZZ <span class=\"hljs-strong\">*YYY*</span> YYY  或者ZZZ <span class=\"hljs-emphasis\">_YYY_</span> YYY<br>example3：ZZZ <span class=\"hljs-strong\">***YYY**</span>* YYY  或者ZZZ <span class=\"hljs-emphasis\">___YYY__</span>_ YYY<br></code></pre></td></tr></table></figure></li>\n<li>这个没啥特殊要求，两种方法都可以，<strong>但是最好每种符号的前后都加上空格，不然有些会失灵</strong></li>\n</ul>\n<h2 id=\"4-代码块-and-代码\"><a href=\"#4-代码块-and-代码\" class=\"headerlink\" title=\"4.代码块 and 代码\"></a>4.代码块 and 代码</h2><figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autohotkey\">代码： ` + ` 单个反引号做开头，单个反引号做结尾，中间就是特殊的代码区<br>代码块：``` + ``` 用三个反引号做开头，三个反引号做结尾，中间就是代码块<br><br>example1： ZZZ `YYY` YYY<br></code></pre></td></tr></table></figure>\n<ul>\n<li>这个代码块挺好用的，<strong>特别是想要强调说一些事情的时候，可以给他框出来</strong>，我上面的所有例子都是用代码块罗列的，清晰明了，代码块不一定写代码</li>\n</ul>\n<h2 id=\"5-分割线\"><a href=\"#5-分割线\" class=\"headerlink\" title=\"5.分割线\"></a>5.分割线</h2><ul>\n<li><code>*** 或者 --- 或者 ___</code><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">example1： <span class=\"hljs-strong\">***</span><br>example2： ---<br>example3： <span class=\"hljs-emphasis\">___</span><br></code></pre></td></tr></table></figure></li>\n<li>就会出现一个非常丑的线，<strong>这三根线的类型是一样的，不管用哪个都是一根线</strong></li>\n</ul>\n<h2 id=\"6-链接\"><a href=\"#6-链接\" class=\"headerlink\" title=\"6.链接\"></a>6.链接</h2><ul>\n<li>链接： <code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></li>\n<li>直接上网址或者email地址：&lt;链接地址&gt;<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">example1</span>：<span class=\"hljs-selector-tag\">ZZZ</span> <span class=\"hljs-selector-attr\">[YYY]</span>(<span class=\"hljs-attribute\">https</span>:<span class=\"hljs-comment\">//github.com/BraveYiYang) YYY</span><br>example2：ZZZ [YYY](<span class=\"hljs-attribute\">https</span>:<span class=\"hljs-comment\">//github.com/BraveYiYang &quot;Brave&quot;) YYY</span><br>example3：&lt;<span class=\"hljs-attribute\">https</span>:<span class=\"hljs-comment\">//github.com/BraveYiYang&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li>这个还是很好用的，中括号里面的是你可以随便定义，然后把你小括号的链接赋值在你中括号的定义里面，小括号的双引号里面是你鼠标放上去，他会显示出来你的小标签</li>\n</ul>\n<h2 id=\"7-图片\"><a href=\"#7-图片\" class=\"headerlink\" title=\"7.图片\"></a>7.图片</h2><ul>\n<li>插入图片： <code>[![图片alt](图片链接 &quot;图片title&quot;)](超链接)</code><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">example1：!<span class=\"hljs-selector-attr\">[ZYY]</span>(/ZYY/Z.jpg)<br>example2：!<span class=\"hljs-selector-attr\">[ZYY]</span>(/ZYY/Z<span class=\"hljs-selector-class\">.jpg</span> <span class=\"hljs-string\">&quot;Brave&quot;</span>)<br>example3：<span class=\"hljs-selector-attr\">[![ZYY]</span>(/ZYY/Z<span class=\"hljs-selector-class\">.jpg</span> <span class=\"hljs-string\">&quot;Brave&quot;</span>)](https:<span class=\"hljs-comment\">//github.com/BraveYiYang)</span><br></code></pre></td></tr></table></figure></li>\n<li>这个图片的用处是很多的，我们可以随心所欲的插入图片，<strong>图文并茂</strong></li>\n</ul>\n<h2 id=\"8-表格\"><a href=\"#8-表格\" class=\"headerlink\" title=\"8.表格\"></a>8.表格</h2><ul>\n<li>| 表示表格的线，用他来固定列数，几行就是表格的几行，</li>\n<li>— 来定义标题行，而且每一列的 — 数量不一样代表每一列的长度也不一样</li>\n<li>:— 表示左对齐 —: 表示右对齐 :—: 表示居中对齐<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">example1：<br>|<span class=\"hljs-string\"> Syntax      </span>|<span class=\"hljs-string\"> Description </span>|<br>|<span class=\"hljs-string\"> ----------- </span>|<span class=\"hljs-string\"> ----------- </span>|<br>|<span class=\"hljs-string\"> Header      </span>|<span class=\"hljs-string\"> Title       </span>|<br>|<span class=\"hljs-string\"> Paragraph   </span>|<span class=\"hljs-string\"> Text        </span>|<br>example2：<br>|<span class=\"hljs-string\"> Syntax </span>|<span class=\"hljs-string\"> Description </span>|<br>|<span class=\"hljs-string\"> --- </span>|<span class=\"hljs-string\"> ----------- </span>|<br>|<span class=\"hljs-string\"> Header </span>|<span class=\"hljs-string\"> Title </span>|<br>|<span class=\"hljs-string\"> Paragraph </span>|<span class=\"hljs-string\"> Text </span>|<br>example3：<br>|<span class=\"hljs-string\"> Syntax      </span>|<span class=\"hljs-string\"> Description </span>|<span class=\"hljs-string\"> Test Text     </span>|<br>|<span class=\"hljs-string\"> :---        </span>|<span class=\"hljs-string\">    :----:   </span>|<span class=\"hljs-string\">          ---: </span>|<br>|<span class=\"hljs-string\"> Header      </span>|<span class=\"hljs-string\"> Title       </span>|<span class=\"hljs-string\"> Here&#x27;s this   </span>|<br>|<span class=\"hljs-string\"> Paragraph   </span>|<span class=\"hljs-string\"> Text        </span>|<span class=\"hljs-string\"> And more      </span>|<br></code></pre></td></tr></table></figure></li>\n<li><strong>表格其实不是很常用，但是也是算作是一个基本的使用方法</strong></li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li><strong>markdown的使用方法其实不难，而且也很容易入门，只不过没有那么直观，但是大家用习惯之后，就非常容易上手，所以鼓励大家多使用，熟能生巧，多练才会掌握的快！</strong></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Markdown用法\"><a href=\"#Markdown用法\" class=\"headerlink\" title=\"Markdown用法\"></a>Markdown用法</h1><ul>\n<li>要写一个好看的文档，格式和各种引用非常重要，Markdown作为开发过程中的记录文件，也是目前应用最广泛的一个格式，因此开篇先分享一下基本用法。</li>\n<li>这边主要分享几种最常规的使用方法，主要有标题、换行、强调、代码块、分割线、链接、图片、表格这8种非常常用的用法，其余请参照<a href=\"https://markdown.com.cn/\">官方网站</a></li>\n</ul>\n<h2 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1.标题\"></a>1.标题</h2><ul>\n<li>一级标题：<code># ZYY 1</code></li>\n<li>二级标题：<code>## ZYY 2</code></li>\n<li>三级标题：<code>### ZYY 3</code></li>\n<li>最简单的解释就是，<strong>n个#代表n级标题</strong>，空格之后加上标题就行</li>\n</ul>\n<h2 id=\"2-换行\"><a href=\"#2-换行\" class=\"headerlink\" title=\"2.换行\"></a>2.换行</h2><ul>\n<li>句子末尾加上 <code>&lt;br&gt;</code> 或者 <code>两个空格+Enter键</code><figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs isbl\"><span class=\"hljs-variable\">example1</span>：<span class=\"hljs-variable\">ZYY</span> &lt;<span class=\"hljs-variable\">br</span>&gt;<br><span class=\"hljs-variable\">example2</span>：<span class=\"hljs-function\"><span class=\"hljs-title\">ZYY</span>(<span class=\"hljs-variable\">Space</span>*<span class=\"hljs-number\">2</span>+<span class=\"hljs-variable\">Enter</span>，括号和汉字自动忽视)</span><br></code></pre></td></tr></table></figure></li>\n<li><strong>最好用的还是2个空格+Enter键</strong>，但是你看不见它到底有没有换行，所以 <code>&lt;br&gt;</code> 这个是比较直观的，但是打字速度就慢了</li>\n</ul>\n<h2 id=\"3-强调\"><a href=\"#3-强调\" class=\"headerlink\" title=\"3.强调\"></a>3.强调</h2><ul>\n<li>粗体（Bold）： <code>**ZYY** 或者 __ZYY__</code></li>\n<li>斜体（Italic）： <code>*ZYY* 或者 _ZYY_</code></li>\n<li>粗斜体： <code>***ZYY*** 或者 ___ZYY___</code><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">example1：ZZZ <span class=\"hljs-strong\">**YYY**</span> YYY  或者ZZZ <span class=\"hljs-emphasis\">__YYY__</span> YYY<br>example2：ZZZ <span class=\"hljs-strong\">*YYY*</span> YYY  或者ZZZ <span class=\"hljs-emphasis\">_YYY_</span> YYY<br>example3：ZZZ <span class=\"hljs-strong\">***YYY**</span>* YYY  或者ZZZ <span class=\"hljs-emphasis\">___YYY__</span>_ YYY<br></code></pre></td></tr></table></figure></li>\n<li>这个没啥特殊要求，两种方法都可以，<strong>但是最好每种符号的前后都加上空格，不然有些会失灵</strong></li>\n</ul>\n<h2 id=\"4-代码块-and-代码\"><a href=\"#4-代码块-and-代码\" class=\"headerlink\" title=\"4.代码块 and 代码\"></a>4.代码块 and 代码</h2><figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autohotkey\">代码： ` + ` 单个反引号做开头，单个反引号做结尾，中间就是特殊的代码区<br>代码块：``` + ``` 用三个反引号做开头，三个反引号做结尾，中间就是代码块<br><br>example1： ZZZ `YYY` YYY<br></code></pre></td></tr></table></figure>\n<ul>\n<li>这个代码块挺好用的，<strong>特别是想要强调说一些事情的时候，可以给他框出来</strong>，我上面的所有例子都是用代码块罗列的，清晰明了，代码块不一定写代码</li>\n</ul>\n<h2 id=\"5-分割线\"><a href=\"#5-分割线\" class=\"headerlink\" title=\"5.分割线\"></a>5.分割线</h2><ul>\n<li><code>*** 或者 --- 或者 ___</code><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">example1： <span class=\"hljs-strong\">***</span><br>example2： ---<br>example3： <span class=\"hljs-emphasis\">___</span><br></code></pre></td></tr></table></figure></li>\n<li>就会出现一个非常丑的线，<strong>这三根线的类型是一样的，不管用哪个都是一根线</strong></li>\n</ul>\n<h2 id=\"6-链接\"><a href=\"#6-链接\" class=\"headerlink\" title=\"6.链接\"></a>6.链接</h2><ul>\n<li>链接： <code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></li>\n<li>直接上网址或者email地址：&lt;链接地址&gt;<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">example1</span>：<span class=\"hljs-selector-tag\">ZZZ</span> <span class=\"hljs-selector-attr\">[YYY]</span>(<span class=\"hljs-attribute\">https</span>:<span class=\"hljs-comment\">//github.com/BraveYiYang) YYY</span><br>example2：ZZZ [YYY](<span class=\"hljs-attribute\">https</span>:<span class=\"hljs-comment\">//github.com/BraveYiYang &quot;Brave&quot;) YYY</span><br>example3：&lt;<span class=\"hljs-attribute\">https</span>:<span class=\"hljs-comment\">//github.com/BraveYiYang&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li>这个还是很好用的，中括号里面的是你可以随便定义，然后把你小括号的链接赋值在你中括号的定义里面，小括号的双引号里面是你鼠标放上去，他会显示出来你的小标签</li>\n</ul>\n<h2 id=\"7-图片\"><a href=\"#7-图片\" class=\"headerlink\" title=\"7.图片\"></a>7.图片</h2><ul>\n<li>插入图片： <code>[![图片alt](图片链接 &quot;图片title&quot;)](超链接)</code><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">example1：!<span class=\"hljs-selector-attr\">[ZYY]</span>(/ZYY/Z.jpg)<br>example2：!<span class=\"hljs-selector-attr\">[ZYY]</span>(/ZYY/Z<span class=\"hljs-selector-class\">.jpg</span> <span class=\"hljs-string\">&quot;Brave&quot;</span>)<br>example3：<span class=\"hljs-selector-attr\">[![ZYY]</span>(/ZYY/Z<span class=\"hljs-selector-class\">.jpg</span> <span class=\"hljs-string\">&quot;Brave&quot;</span>)](https:<span class=\"hljs-comment\">//github.com/BraveYiYang)</span><br></code></pre></td></tr></table></figure></li>\n<li>这个图片的用处是很多的，我们可以随心所欲的插入图片，<strong>图文并茂</strong></li>\n</ul>\n<h2 id=\"8-表格\"><a href=\"#8-表格\" class=\"headerlink\" title=\"8.表格\"></a>8.表格</h2><ul>\n<li>| 表示表格的线，用他来固定列数，几行就是表格的几行，</li>\n<li>— 来定义标题行，而且每一列的 — 数量不一样代表每一列的长度也不一样</li>\n<li>:— 表示左对齐 —: 表示右对齐 :—: 表示居中对齐<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">example1：<br>|<span class=\"hljs-string\"> Syntax      </span>|<span class=\"hljs-string\"> Description </span>|<br>|<span class=\"hljs-string\"> ----------- </span>|<span class=\"hljs-string\"> ----------- </span>|<br>|<span class=\"hljs-string\"> Header      </span>|<span class=\"hljs-string\"> Title       </span>|<br>|<span class=\"hljs-string\"> Paragraph   </span>|<span class=\"hljs-string\"> Text        </span>|<br>example2：<br>|<span class=\"hljs-string\"> Syntax </span>|<span class=\"hljs-string\"> Description </span>|<br>|<span class=\"hljs-string\"> --- </span>|<span class=\"hljs-string\"> ----------- </span>|<br>|<span class=\"hljs-string\"> Header </span>|<span class=\"hljs-string\"> Title </span>|<br>|<span class=\"hljs-string\"> Paragraph </span>|<span class=\"hljs-string\"> Text </span>|<br>example3：<br>|<span class=\"hljs-string\"> Syntax      </span>|<span class=\"hljs-string\"> Description </span>|<span class=\"hljs-string\"> Test Text     </span>|<br>|<span class=\"hljs-string\"> :---        </span>|<span class=\"hljs-string\">    :----:   </span>|<span class=\"hljs-string\">          ---: </span>|<br>|<span class=\"hljs-string\"> Header      </span>|<span class=\"hljs-string\"> Title       </span>|<span class=\"hljs-string\"> Here&#x27;s this   </span>|<br>|<span class=\"hljs-string\"> Paragraph   </span>|<span class=\"hljs-string\"> Text        </span>|<span class=\"hljs-string\"> And more      </span>|<br></code></pre></td></tr></table></figure></li>\n<li><strong>表格其实不是很常用，但是也是算作是一个基本的使用方法</strong></li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li><strong>markdown的使用方法其实不难，而且也很容易入门，只不过没有那么直观，但是大家用习惯之后，就非常容易上手，所以鼓励大家多使用，熟能生巧，多练才会掌握的快！</strong></li>\n</ul>\n"},{"title":"文献检索","date":"2023-10-25T16:00:00.000Z","_content":"\n# 文献检索\n\n- ### 翻译软件\n\n  - Mate Translate（网站翻译插件）\n\n  - 搜狗文档翻译\n\n  - 有道学生认证翻译\n\n- ### 检索技巧\n\n  - 关键词+literature review（综述后缀搜索）\n\n  - 知网摘要批量导出\n\n- ### 资源网站\n\n  - [资源下载 - 理工酷 (ligongku.com)](https://www.ligongku.com/invite/28243)（资料下载）\n\n  - [电力网 - 最具影响力的电力行业门户网站 (chinapower.com.cn)](http://www.chinapower.com.cn/)（资料下载）\n\n  - [国际能源网-能源全产业链服务平台，服务全球能源企业！ (in-en.com)](https://www.in-en.com/)（资料下载）\n\n  - [麻省理工科技评论-发现改变世界的新兴科技 (mittrchina.com)](https://www.mittrchina.com/news)（前沿科技网站）\n\n  - [OECD Statistics](https://stats.oecd.org/)（数据网站）\n\n- ### 关键词检索引擎\n\n  - 学校WEBVPN：[WEBVPN系统 (zzuli.edu.cn)](https://webvpn.zzuli.edu.cn/login)\n\n  - [Paper Digest – Sci-Tech knowledge graph & text analysis platform for scientific literature tracking, summarization and search](https://www.paperdigest.org/)（文献检索引擎）\n\n  - [Zenodo - Research. Shared.](https://zenodo.org/)（文献检索引擎）\n\n  - [Home - Springer](https://link.springer.com/)（文献检索引擎）\n\n  - [ProQuest | 更好的研究，更好的学习，更好的见解。](https://www.proquest.com/)（文献检索引擎）\n\n  - [谷歌学术镜像_Google学术搜索导航@思谋学术 (scmor.com)](https://ac.scmor.com/)（谷歌学术镜像）\n\n  - [虫部落快搜-Google 学术搜索 - 快搜 - 谷歌搜索 (chongbuluo.cn)](http://www.chongbuluo.cn/)（检索引擎大合集）\n\n- ### 文献检索引擎\n\n  - [Sci论文期刊检索|文献检索求助互助 - Sci-Hub|Scidown](https://www.scidown.cn/)（文献检索引擎）\n\n- ### AI检索\n\n  - [Connected Papers | Find and explore academic papers](https://www.connectedpapers.com/)（强烈推荐，AI关联文献）\n\n  - [Paper Digest (paper-digest.com)](https://www.paper-digest.com/)（AI读论文）","source":"_posts/20231204ZYY-文献检索.md","raw":"---\ntitle: 文献检索\ntag: 文献检索\ndate: 2023-10-26\ncategories: 信息检索\n---\n\n# 文献检索\n\n- ### 翻译软件\n\n  - Mate Translate（网站翻译插件）\n\n  - 搜狗文档翻译\n\n  - 有道学生认证翻译\n\n- ### 检索技巧\n\n  - 关键词+literature review（综述后缀搜索）\n\n  - 知网摘要批量导出\n\n- ### 资源网站\n\n  - [资源下载 - 理工酷 (ligongku.com)](https://www.ligongku.com/invite/28243)（资料下载）\n\n  - [电力网 - 最具影响力的电力行业门户网站 (chinapower.com.cn)](http://www.chinapower.com.cn/)（资料下载）\n\n  - [国际能源网-能源全产业链服务平台，服务全球能源企业！ (in-en.com)](https://www.in-en.com/)（资料下载）\n\n  - [麻省理工科技评论-发现改变世界的新兴科技 (mittrchina.com)](https://www.mittrchina.com/news)（前沿科技网站）\n\n  - [OECD Statistics](https://stats.oecd.org/)（数据网站）\n\n- ### 关键词检索引擎\n\n  - 学校WEBVPN：[WEBVPN系统 (zzuli.edu.cn)](https://webvpn.zzuli.edu.cn/login)\n\n  - [Paper Digest – Sci-Tech knowledge graph & text analysis platform for scientific literature tracking, summarization and search](https://www.paperdigest.org/)（文献检索引擎）\n\n  - [Zenodo - Research. Shared.](https://zenodo.org/)（文献检索引擎）\n\n  - [Home - Springer](https://link.springer.com/)（文献检索引擎）\n\n  - [ProQuest | 更好的研究，更好的学习，更好的见解。](https://www.proquest.com/)（文献检索引擎）\n\n  - [谷歌学术镜像_Google学术搜索导航@思谋学术 (scmor.com)](https://ac.scmor.com/)（谷歌学术镜像）\n\n  - [虫部落快搜-Google 学术搜索 - 快搜 - 谷歌搜索 (chongbuluo.cn)](http://www.chongbuluo.cn/)（检索引擎大合集）\n\n- ### 文献检索引擎\n\n  - [Sci论文期刊检索|文献检索求助互助 - Sci-Hub|Scidown](https://www.scidown.cn/)（文献检索引擎）\n\n- ### AI检索\n\n  - [Connected Papers | Find and explore academic papers](https://www.connectedpapers.com/)（强烈推荐，AI关联文献）\n\n  - [Paper Digest (paper-digest.com)](https://www.paper-digest.com/)（AI读论文）","slug":"20231204ZYY-文献检索","published":1,"updated":"2024-07-26T09:53:57.476Z","_id":"clz1edk9h0001x8uwcktnat42","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"文献检索\"><a href=\"#文献检索\" class=\"headerlink\" title=\"文献检索\"></a>文献检索</h1><ul>\n<li><h3 id=\"翻译软件\"><a href=\"#翻译软件\" class=\"headerlink\" title=\"翻译软件\"></a>翻译软件</h3><ul>\n<li><p>Mate Translate（网站翻译插件）</p>\n</li>\n<li><p>搜狗文档翻译</p>\n</li>\n<li><p>有道学生认证翻译</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"检索技巧\"><a href=\"#检索技巧\" class=\"headerlink\" title=\"检索技巧\"></a>检索技巧</h3><ul>\n<li><p>关键词+literature review（综述后缀搜索）</p>\n</li>\n<li><p>知网摘要批量导出</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"资源网站\"><a href=\"#资源网站\" class=\"headerlink\" title=\"资源网站\"></a>资源网站</h3><ul>\n<li><p><a href=\"https://www.ligongku.com/invite/28243\">资源下载 - 理工酷 (ligongku.com)</a>（资料下载）</p>\n</li>\n<li><p><a href=\"http://www.chinapower.com.cn/\">电力网 - 最具影响力的电力行业门户网站 (chinapower.com.cn)</a>（资料下载）</p>\n</li>\n<li><p><a href=\"https://www.in-en.com/\">国际能源网-能源全产业链服务平台，服务全球能源企业！ (in-en.com)</a>（资料下载）</p>\n</li>\n<li><p><a href=\"https://www.mittrchina.com/news\">麻省理工科技评论-发现改变世界的新兴科技 (mittrchina.com)</a>（前沿科技网站）</p>\n</li>\n<li><p><a href=\"https://stats.oecd.org/\">OECD Statistics</a>（数据网站）</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"关键词检索引擎\"><a href=\"#关键词检索引擎\" class=\"headerlink\" title=\"关键词检索引擎\"></a>关键词检索引擎</h3><ul>\n<li><p>学校WEBVPN：<a href=\"https://webvpn.zzuli.edu.cn/login\">WEBVPN系统 (zzuli.edu.cn)</a></p>\n</li>\n<li><p><a href=\"https://www.paperdigest.org/\">Paper Digest – Sci-Tech knowledge graph &amp; text analysis platform for scientific literature tracking, summarization and search</a>（文献检索引擎）</p>\n</li>\n<li><p><a href=\"https://zenodo.org/\">Zenodo - Research. Shared.</a>（文献检索引擎）</p>\n</li>\n<li><p><a href=\"https://link.springer.com/\">Home - Springer</a>（文献检索引擎）</p>\n</li>\n<li><p><a href=\"https://www.proquest.com/\">ProQuest | 更好的研究，更好的学习，更好的见解。</a>（文献检索引擎）</p>\n</li>\n<li><p><a href=\"https://ac.scmor.com/\">谷歌学术镜像_Google学术搜索导航@思谋学术 (scmor.com)</a>（谷歌学术镜像）</p>\n</li>\n<li><p><a href=\"http://www.chongbuluo.cn/\">虫部落快搜-Google 学术搜索 - 快搜 - 谷歌搜索 (chongbuluo.cn)</a>（检索引擎大合集）</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"文献检索引擎\"><a href=\"#文献检索引擎\" class=\"headerlink\" title=\"文献检索引擎\"></a>文献检索引擎</h3><ul>\n<li><a href=\"https://www.scidown.cn/\">Sci论文期刊检索|文献检索求助互助 - Sci-Hub|Scidown</a>（文献检索引擎）</li>\n</ul>\n</li>\n<li><h3 id=\"AI检索\"><a href=\"#AI检索\" class=\"headerlink\" title=\"AI检索\"></a>AI检索</h3><ul>\n<li><p><a href=\"https://www.connectedpapers.com/\">Connected Papers | Find and explore academic papers</a>（强烈推荐，AI关联文献）</p>\n</li>\n<li><p><a href=\"https://www.paper-digest.com/\">Paper Digest (paper-digest.com)</a>（AI读论文）</p>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"文献检索\"><a href=\"#文献检索\" class=\"headerlink\" title=\"文献检索\"></a>文献检索</h1><ul>\n<li><h3 id=\"翻译软件\"><a href=\"#翻译软件\" class=\"headerlink\" title=\"翻译软件\"></a>翻译软件</h3><ul>\n<li><p>Mate Translate（网站翻译插件）</p>\n</li>\n<li><p>搜狗文档翻译</p>\n</li>\n<li><p>有道学生认证翻译</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"检索技巧\"><a href=\"#检索技巧\" class=\"headerlink\" title=\"检索技巧\"></a>检索技巧</h3><ul>\n<li><p>关键词+literature review（综述后缀搜索）</p>\n</li>\n<li><p>知网摘要批量导出</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"资源网站\"><a href=\"#资源网站\" class=\"headerlink\" title=\"资源网站\"></a>资源网站</h3><ul>\n<li><p><a href=\"https://www.ligongku.com/invite/28243\">资源下载 - 理工酷 (ligongku.com)</a>（资料下载）</p>\n</li>\n<li><p><a href=\"http://www.chinapower.com.cn/\">电力网 - 最具影响力的电力行业门户网站 (chinapower.com.cn)</a>（资料下载）</p>\n</li>\n<li><p><a href=\"https://www.in-en.com/\">国际能源网-能源全产业链服务平台，服务全球能源企业！ (in-en.com)</a>（资料下载）</p>\n</li>\n<li><p><a href=\"https://www.mittrchina.com/news\">麻省理工科技评论-发现改变世界的新兴科技 (mittrchina.com)</a>（前沿科技网站）</p>\n</li>\n<li><p><a href=\"https://stats.oecd.org/\">OECD Statistics</a>（数据网站）</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"关键词检索引擎\"><a href=\"#关键词检索引擎\" class=\"headerlink\" title=\"关键词检索引擎\"></a>关键词检索引擎</h3><ul>\n<li><p>学校WEBVPN：<a href=\"https://webvpn.zzuli.edu.cn/login\">WEBVPN系统 (zzuli.edu.cn)</a></p>\n</li>\n<li><p><a href=\"https://www.paperdigest.org/\">Paper Digest – Sci-Tech knowledge graph &amp; text analysis platform for scientific literature tracking, summarization and search</a>（文献检索引擎）</p>\n</li>\n<li><p><a href=\"https://zenodo.org/\">Zenodo - Research. Shared.</a>（文献检索引擎）</p>\n</li>\n<li><p><a href=\"https://link.springer.com/\">Home - Springer</a>（文献检索引擎）</p>\n</li>\n<li><p><a href=\"https://www.proquest.com/\">ProQuest | 更好的研究，更好的学习，更好的见解。</a>（文献检索引擎）</p>\n</li>\n<li><p><a href=\"https://ac.scmor.com/\">谷歌学术镜像_Google学术搜索导航@思谋学术 (scmor.com)</a>（谷歌学术镜像）</p>\n</li>\n<li><p><a href=\"http://www.chongbuluo.cn/\">虫部落快搜-Google 学术搜索 - 快搜 - 谷歌搜索 (chongbuluo.cn)</a>（检索引擎大合集）</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"文献检索引擎\"><a href=\"#文献检索引擎\" class=\"headerlink\" title=\"文献检索引擎\"></a>文献检索引擎</h3><ul>\n<li><a href=\"https://www.scidown.cn/\">Sci论文期刊检索|文献检索求助互助 - Sci-Hub|Scidown</a>（文献检索引擎）</li>\n</ul>\n</li>\n<li><h3 id=\"AI检索\"><a href=\"#AI检索\" class=\"headerlink\" title=\"AI检索\"></a>AI检索</h3><ul>\n<li><p><a href=\"https://www.connectedpapers.com/\">Connected Papers | Find and explore academic papers</a>（强烈推荐，AI关联文献）</p>\n</li>\n<li><p><a href=\"https://www.paper-digest.com/\">Paper Digest (paper-digest.com)</a>（AI读论文）</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"如何制作一份优秀的路演PPT","date":"2023-11-09T16:00:00.000Z","_content":"\n# 如何制作一份优秀的路演PPT\n\n### 1.PPT的基本思路\n\n- #### **这个比赛的定位**\n\n  - 商业比赛还是创新比赛，这两个是完全不一样的思路和逻辑，不能什么比赛都同一份PPT，需要根据评委的胃口来选择\n  - **评分细则，一定一定一定要详读评分细则，因为只有详细的阅读评分细则之后，你才能嗅到这个比赛的侧重点是啥，你的PPT必须要紧贴这个比赛的侧重点，评分细则的每一个字都要想清楚它在我们PPT里面如何体现**\n  - 如果是商业比赛，技术含量要降到4-5页，因为评委听不懂你讲的任何技术，要把技术转化成服务，**总结来说就是，你的产品能提供啥服务，能给用户提供啥功能，这些功能有啥用，效果咋样，咋卖钱，商业比赛要讲赚钱，怎么用最低的成本赚最多的钱**\n  - 如果是创新比赛，几乎都是技术讲解，因为评委是专家，他要看你这个项目的新意、创意，跟国内外比起来，你们项目新奇在哪里，技术点突破在哪里，突破的效果怎么样，**总结来说就是，你的项目创新点在哪，技术突破情况咋样，创新比赛要讲学术，你的理论基础、技术基础如何突破，偏学术**\n\n- #### **解决的社会痛点是啥**\n\n  - **项目背景：**你这个项目的起源是啥，为啥要做这个项目，做他的目的是啥，其中**重点是：讲清楚、跟随政策、量化数据、提供依据，明确方向**，但是切忌，项目的背景不要脱离实际，不要太离谱，比如郑州某大学想要自己研发光刻机，这只会给别人觉得你在骗人，但是也别出现太泛的情况，比如想要研发一种设备能够治疗所有疾病，没有针对点，没有细分领域。\n  - **社会痛点：**讲完你的项目起源，就要开始说清楚目前市面上的痛点是啥，这个痛点痛不痛，不要解决一个可有可无的社会痛点，那别人凭什么为你买单，**这个痛点要讲的很透彻，就是一下子让别人感觉，你这个项目想法很好，新意很好**\n- #### **你的解决方案**\n\n  - **项目概述：**第一时间告诉所有评委，针对这个痛点问题，你的完整解决方案是什么，**如果是商业比赛，第一时间要告诉评委，你能提供什么服务**，比如提供康复训练服务和康复评估服务，**如果是创新比赛，第一时间要告诉评委你这个项目的整体情况，以及你的创新点**，你的与众不同点在哪，比如采用柔顺康复、采用多模态康复评估等等，不同的比赛需要不同的方式\n  - 解决方案的整体介绍的方式有挺多种的，**偏向商业的就直接展示你这个产品**，然后告诉他们，这个产品有啥用，有哪些功能，**偏向创新的就需要展示这个项目整套技术流程**，技术流程里面的创新点如何体现，**这一部分是整个PPT的核心，需要非常精准有效的让别人第一时间知道你在做什么，你做的东西是啥，概括性很强，整体性很强，这里面不是简单把所有东西凑一起说，而是应该以一个整体思维，把每一个部分串联起来，介绍一个整体的东西**\n\n- #### **怎么证明你的方案比别人好**\n\n  - **项目技术突破：**这部分就是讲你的技术有多牛逼，这块偏向现有技术，但是你的技术比别人精度更高、效果更好等等，但是也一定要注意，**商业比赛不要讲很深的理论**，评委听不懂，你要用他听得懂的话语去讲最牛逼的事，**创新比赛也不能讲的太底层**，不然评委老师会困，要讲新的点，吸引住他们的点，这里面**必须要图文并茂，用实际成果证明你的数据可靠，用数据证明你牛逼**\n  - **项目新思路：**项目的新思路是另一个方面，就是别人走常规的道路，而你却实现弯道超车，用**更简单的思路解决问题**，类似这种的话一般会很感兴趣，而且**新思路的话不一定要做的很深，但是要说明你这个思路是实际可靠的，而不是天马行空**\n  - **竞品分析：**这个也是很好证明你比别人厉害的，同类型对比，你功能比他们多，价格比他们低等等，都会是你产品的优势，商业方面的话就讲功能、服务、价格优势，创新方面的话就讲技术突破、思路突破、效率等等，但是**切忌不要吹太过分了，到时候用很低的价格，然后功能却比别人强很多，大家都不是傻子，难道只有你想得到，所以一旦太过分了，就变得很假了**\n\n- #### **你的产品怎么卖**\n\n  - **产品市场：这个就告诉别人，你这个行业赚不赚钱，**如果行业很小，有可能投入都比你产出还大，那就没啥意义了，如果行业超级大，那会不会竞争对手也非常多，那你怎么脱颖而出，分析市场**主要就是告诉评委，我给你画的饼有多大，心不心动**\n  - **商业逻辑：很简单的道理，你怎么赚到别人的钱**，要考虑成本多少、客户是谁、供应商是谁、合作对象是谁、销售渠道有哪些、能提供哪些盈利服务、短期怎么推广、中期怎么推广、长期怎么推广、怎么打造产品的品牌效益等等，**要真实考虑到卖东西的各个方面，越详细越深入越好，而且要形成一个闭环，丢掉学生思维，转向商人思维，把自己当成一个老板，这个产品怎么进行打造**，可以学习国内外知名企业的商业逻辑，赚设备费用还是赚服务费用还是其他更新颖的赚钱思路\n  - **商业创新：**这块是一个能够脱颖而出的地方，商业也是有创新点的，**很多产品能够发家致富，产品的创新点反而是其次，更重要的是营销手段，商业创新**，比如共享单车、跑腿服务等等，这些都是纯靠商业模式活下来，技术根本不是核心，商业创新也有很多方面，比如我们有哪些独特优势、哪些特有资源，怎么利用这些去突围，我们常说的产学研合作就是这里面的一个创新，只不过太老了，还有产品生态，像小米或者苹果，他们其实不是卖手机，而是买一个能够买他们设备的设备而已，构建一套全生态，这样能够不断地、长期的盈利，所以，**我们可以想想，我们怎么卖得更好**\n\n### 2.PPT的基本框架\n\n- **常规的商业PPT主要包含这几大方面**\n  - 1.解决的社会痛点是啥：**项目背景、市场痛点**\n  - 2.你的解决方案：**项目简介、技术架构**\n  - 3.怎么证明你的方案比别人好：**项目创新点（一般都是3点，最多不超过4点），竞品分析**\n  - 4.你的产品怎么卖：**商业模式、成本分析、营销模式、客户对象、盈利预测、产品生态**\n  - 5.证明价值：**测试情况、落地情况、社会报道、商业合作、专家点评、知识产权、论文支撑、行业标准**等等\n  - 6.团队合作：**指导老师团队、开发团队**\n\n### 3.PPT制作过程中的细节\n\n- **配色正常**，不要太晃眼睛，**最好三配色，全文基本就三种颜色（推荐的是白色背景搭配藏蓝色、红色，重点部分用红色突出，暗系背景搭配白色和亮黄色，重点部分用亮黄色突出）**，不然会感觉花里胡哨的，字体一定不要全文太亮、或者全文太暗，遇到重点或者你想要强调的地方，一定用亮色突出，让别人第一目光就聚焦到你想要让他看的地方，**学会管理评委的目光**\n- **微软雅黑字体，最好都采用微软雅黑加粗，字体厚实，观看清晰，不会给人感觉看不清、或者太乱、太细**，楷体宋体都不好看，太细，给人感觉弱不禁风的样子\n- **背景配色**，**不要纯白背景、最好背景后面有点很淡的一些东西，感觉不是很空**，米白色会更好看，也不要纯黑背景，太黑暗，给人非常压抑，**如果想要偏暗系背景的话，采用藏蓝色然后搞一个黑色透明套上去**，我会提供几个背景模板\n- **方块**，PPT常用的就是各种方块，**方块一定一定一定要无边框，不然非常的难看**，想要在边框里面加上自己想要的字体，**不建议新建文本框，而是直接在方块里面编辑，不然后续想改的时候会非常麻烦，非常的累**\n- **设计器**，微软的PPT自带设计器，有时候能够解决你非常多的麻烦，又好看又快速\n- **图片版PPT，一定不要另存出来图片版，图片的质量非常的差，一定要一页一页播放，截图，然后粘贴在新的PPT里面**，遇到动图的时候，直接复制过去就行，如果遇到覆盖的时候，就做两页或者更多页\n- **切换方式，不要任何切换方式，所有PPT都不要任何切换方式**，评委会头晕，看的真的非常晕，而且而且，遇到垃圾电脑，你的动画会比老太太还慢，会出现各种bug，如果是线上的话，直接死亡，你觉得很快速，但是网速延迟非常高，别人那边就是一卡一卡的，印象分非常低","source":"_posts/20231204ZYY-如何制作一份优秀的路演PPT.md","raw":"---\ntitle: 如何制作一份优秀的路演PPT\ntag: PPT\ndate: 2023-11-10\ncategories: 路演文书\n---\n\n# 如何制作一份优秀的路演PPT\n\n### 1.PPT的基本思路\n\n- #### **这个比赛的定位**\n\n  - 商业比赛还是创新比赛，这两个是完全不一样的思路和逻辑，不能什么比赛都同一份PPT，需要根据评委的胃口来选择\n  - **评分细则，一定一定一定要详读评分细则，因为只有详细的阅读评分细则之后，你才能嗅到这个比赛的侧重点是啥，你的PPT必须要紧贴这个比赛的侧重点，评分细则的每一个字都要想清楚它在我们PPT里面如何体现**\n  - 如果是商业比赛，技术含量要降到4-5页，因为评委听不懂你讲的任何技术，要把技术转化成服务，**总结来说就是，你的产品能提供啥服务，能给用户提供啥功能，这些功能有啥用，效果咋样，咋卖钱，商业比赛要讲赚钱，怎么用最低的成本赚最多的钱**\n  - 如果是创新比赛，几乎都是技术讲解，因为评委是专家，他要看你这个项目的新意、创意，跟国内外比起来，你们项目新奇在哪里，技术点突破在哪里，突破的效果怎么样，**总结来说就是，你的项目创新点在哪，技术突破情况咋样，创新比赛要讲学术，你的理论基础、技术基础如何突破，偏学术**\n\n- #### **解决的社会痛点是啥**\n\n  - **项目背景：**你这个项目的起源是啥，为啥要做这个项目，做他的目的是啥，其中**重点是：讲清楚、跟随政策、量化数据、提供依据，明确方向**，但是切忌，项目的背景不要脱离实际，不要太离谱，比如郑州某大学想要自己研发光刻机，这只会给别人觉得你在骗人，但是也别出现太泛的情况，比如想要研发一种设备能够治疗所有疾病，没有针对点，没有细分领域。\n  - **社会痛点：**讲完你的项目起源，就要开始说清楚目前市面上的痛点是啥，这个痛点痛不痛，不要解决一个可有可无的社会痛点，那别人凭什么为你买单，**这个痛点要讲的很透彻，就是一下子让别人感觉，你这个项目想法很好，新意很好**\n- #### **你的解决方案**\n\n  - **项目概述：**第一时间告诉所有评委，针对这个痛点问题，你的完整解决方案是什么，**如果是商业比赛，第一时间要告诉评委，你能提供什么服务**，比如提供康复训练服务和康复评估服务，**如果是创新比赛，第一时间要告诉评委你这个项目的整体情况，以及你的创新点**，你的与众不同点在哪，比如采用柔顺康复、采用多模态康复评估等等，不同的比赛需要不同的方式\n  - 解决方案的整体介绍的方式有挺多种的，**偏向商业的就直接展示你这个产品**，然后告诉他们，这个产品有啥用，有哪些功能，**偏向创新的就需要展示这个项目整套技术流程**，技术流程里面的创新点如何体现，**这一部分是整个PPT的核心，需要非常精准有效的让别人第一时间知道你在做什么，你做的东西是啥，概括性很强，整体性很强，这里面不是简单把所有东西凑一起说，而是应该以一个整体思维，把每一个部分串联起来，介绍一个整体的东西**\n\n- #### **怎么证明你的方案比别人好**\n\n  - **项目技术突破：**这部分就是讲你的技术有多牛逼，这块偏向现有技术，但是你的技术比别人精度更高、效果更好等等，但是也一定要注意，**商业比赛不要讲很深的理论**，评委听不懂，你要用他听得懂的话语去讲最牛逼的事，**创新比赛也不能讲的太底层**，不然评委老师会困，要讲新的点，吸引住他们的点，这里面**必须要图文并茂，用实际成果证明你的数据可靠，用数据证明你牛逼**\n  - **项目新思路：**项目的新思路是另一个方面，就是别人走常规的道路，而你却实现弯道超车，用**更简单的思路解决问题**，类似这种的话一般会很感兴趣，而且**新思路的话不一定要做的很深，但是要说明你这个思路是实际可靠的，而不是天马行空**\n  - **竞品分析：**这个也是很好证明你比别人厉害的，同类型对比，你功能比他们多，价格比他们低等等，都会是你产品的优势，商业方面的话就讲功能、服务、价格优势，创新方面的话就讲技术突破、思路突破、效率等等，但是**切忌不要吹太过分了，到时候用很低的价格，然后功能却比别人强很多，大家都不是傻子，难道只有你想得到，所以一旦太过分了，就变得很假了**\n\n- #### **你的产品怎么卖**\n\n  - **产品市场：这个就告诉别人，你这个行业赚不赚钱，**如果行业很小，有可能投入都比你产出还大，那就没啥意义了，如果行业超级大，那会不会竞争对手也非常多，那你怎么脱颖而出，分析市场**主要就是告诉评委，我给你画的饼有多大，心不心动**\n  - **商业逻辑：很简单的道理，你怎么赚到别人的钱**，要考虑成本多少、客户是谁、供应商是谁、合作对象是谁、销售渠道有哪些、能提供哪些盈利服务、短期怎么推广、中期怎么推广、长期怎么推广、怎么打造产品的品牌效益等等，**要真实考虑到卖东西的各个方面，越详细越深入越好，而且要形成一个闭环，丢掉学生思维，转向商人思维，把自己当成一个老板，这个产品怎么进行打造**，可以学习国内外知名企业的商业逻辑，赚设备费用还是赚服务费用还是其他更新颖的赚钱思路\n  - **商业创新：**这块是一个能够脱颖而出的地方，商业也是有创新点的，**很多产品能够发家致富，产品的创新点反而是其次，更重要的是营销手段，商业创新**，比如共享单车、跑腿服务等等，这些都是纯靠商业模式活下来，技术根本不是核心，商业创新也有很多方面，比如我们有哪些独特优势、哪些特有资源，怎么利用这些去突围，我们常说的产学研合作就是这里面的一个创新，只不过太老了，还有产品生态，像小米或者苹果，他们其实不是卖手机，而是买一个能够买他们设备的设备而已，构建一套全生态，这样能够不断地、长期的盈利，所以，**我们可以想想，我们怎么卖得更好**\n\n### 2.PPT的基本框架\n\n- **常规的商业PPT主要包含这几大方面**\n  - 1.解决的社会痛点是啥：**项目背景、市场痛点**\n  - 2.你的解决方案：**项目简介、技术架构**\n  - 3.怎么证明你的方案比别人好：**项目创新点（一般都是3点，最多不超过4点），竞品分析**\n  - 4.你的产品怎么卖：**商业模式、成本分析、营销模式、客户对象、盈利预测、产品生态**\n  - 5.证明价值：**测试情况、落地情况、社会报道、商业合作、专家点评、知识产权、论文支撑、行业标准**等等\n  - 6.团队合作：**指导老师团队、开发团队**\n\n### 3.PPT制作过程中的细节\n\n- **配色正常**，不要太晃眼睛，**最好三配色，全文基本就三种颜色（推荐的是白色背景搭配藏蓝色、红色，重点部分用红色突出，暗系背景搭配白色和亮黄色，重点部分用亮黄色突出）**，不然会感觉花里胡哨的，字体一定不要全文太亮、或者全文太暗，遇到重点或者你想要强调的地方，一定用亮色突出，让别人第一目光就聚焦到你想要让他看的地方，**学会管理评委的目光**\n- **微软雅黑字体，最好都采用微软雅黑加粗，字体厚实，观看清晰，不会给人感觉看不清、或者太乱、太细**，楷体宋体都不好看，太细，给人感觉弱不禁风的样子\n- **背景配色**，**不要纯白背景、最好背景后面有点很淡的一些东西，感觉不是很空**，米白色会更好看，也不要纯黑背景，太黑暗，给人非常压抑，**如果想要偏暗系背景的话，采用藏蓝色然后搞一个黑色透明套上去**，我会提供几个背景模板\n- **方块**，PPT常用的就是各种方块，**方块一定一定一定要无边框，不然非常的难看**，想要在边框里面加上自己想要的字体，**不建议新建文本框，而是直接在方块里面编辑，不然后续想改的时候会非常麻烦，非常的累**\n- **设计器**，微软的PPT自带设计器，有时候能够解决你非常多的麻烦，又好看又快速\n- **图片版PPT，一定不要另存出来图片版，图片的质量非常的差，一定要一页一页播放，截图，然后粘贴在新的PPT里面**，遇到动图的时候，直接复制过去就行，如果遇到覆盖的时候，就做两页或者更多页\n- **切换方式，不要任何切换方式，所有PPT都不要任何切换方式**，评委会头晕，看的真的非常晕，而且而且，遇到垃圾电脑，你的动画会比老太太还慢，会出现各种bug，如果是线上的话，直接死亡，你觉得很快速，但是网速延迟非常高，别人那边就是一卡一卡的，印象分非常低","slug":"20231204ZYY-如何制作一份优秀的路演PPT","published":1,"updated":"2024-07-26T09:53:51.964Z","_id":"clz1edk9o0004x8uw9mmldfjk","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"如何制作一份优秀的路演PPT\"><a href=\"#如何制作一份优秀的路演PPT\" class=\"headerlink\" title=\"如何制作一份优秀的路演PPT\"></a>如何制作一份优秀的路演PPT</h1><h3 id=\"1-PPT的基本思路\"><a href=\"#1-PPT的基本思路\" class=\"headerlink\" title=\"1.PPT的基本思路\"></a>1.PPT的基本思路</h3><ul>\n<li><h4 id=\"这个比赛的定位\"><a href=\"#这个比赛的定位\" class=\"headerlink\" title=\"这个比赛的定位\"></a><strong>这个比赛的定位</strong></h4><ul>\n<li>商业比赛还是创新比赛，这两个是完全不一样的思路和逻辑，不能什么比赛都同一份PPT，需要根据评委的胃口来选择</li>\n<li><strong>评分细则，一定一定一定要详读评分细则，因为只有详细的阅读评分细则之后，你才能嗅到这个比赛的侧重点是啥，你的PPT必须要紧贴这个比赛的侧重点，评分细则的每一个字都要想清楚它在我们PPT里面如何体现</strong></li>\n<li>如果是商业比赛，技术含量要降到4-5页，因为评委听不懂你讲的任何技术，要把技术转化成服务，<strong>总结来说就是，你的产品能提供啥服务，能给用户提供啥功能，这些功能有啥用，效果咋样，咋卖钱，商业比赛要讲赚钱，怎么用最低的成本赚最多的钱</strong></li>\n<li>如果是创新比赛，几乎都是技术讲解，因为评委是专家，他要看你这个项目的新意、创意，跟国内外比起来，你们项目新奇在哪里，技术点突破在哪里，突破的效果怎么样，<strong>总结来说就是，你的项目创新点在哪，技术突破情况咋样，创新比赛要讲学术，你的理论基础、技术基础如何突破，偏学术</strong></li>\n</ul>\n</li>\n<li><h4 id=\"解决的社会痛点是啥\"><a href=\"#解决的社会痛点是啥\" class=\"headerlink\" title=\"解决的社会痛点是啥\"></a><strong>解决的社会痛点是啥</strong></h4><ul>\n<li><strong>项目背景：</strong>你这个项目的起源是啥，为啥要做这个项目，做他的目的是啥，其中<strong>重点是：讲清楚、跟随政策、量化数据、提供依据，明确方向</strong>，但是切忌，项目的背景不要脱离实际，不要太离谱，比如郑州某大学想要自己研发光刻机，这只会给别人觉得你在骗人，但是也别出现太泛的情况，比如想要研发一种设备能够治疗所有疾病，没有针对点，没有细分领域。</li>\n<li><strong>社会痛点：</strong>讲完你的项目起源，就要开始说清楚目前市面上的痛点是啥，这个痛点痛不痛，不要解决一个可有可无的社会痛点，那别人凭什么为你买单，<strong>这个痛点要讲的很透彻，就是一下子让别人感觉，你这个项目想法很好，新意很好</strong></li>\n</ul>\n</li>\n<li><h4 id=\"你的解决方案\"><a href=\"#你的解决方案\" class=\"headerlink\" title=\"你的解决方案\"></a><strong>你的解决方案</strong></h4><ul>\n<li><strong>项目概述：</strong>第一时间告诉所有评委，针对这个痛点问题，你的完整解决方案是什么，<strong>如果是商业比赛，第一时间要告诉评委，你能提供什么服务</strong>，比如提供康复训练服务和康复评估服务，<strong>如果是创新比赛，第一时间要告诉评委你这个项目的整体情况，以及你的创新点</strong>，你的与众不同点在哪，比如采用柔顺康复、采用多模态康复评估等等，不同的比赛需要不同的方式</li>\n<li>解决方案的整体介绍的方式有挺多种的，<strong>偏向商业的就直接展示你这个产品</strong>，然后告诉他们，这个产品有啥用，有哪些功能，<strong>偏向创新的就需要展示这个项目整套技术流程</strong>，技术流程里面的创新点如何体现，<strong>这一部分是整个PPT的核心，需要非常精准有效的让别人第一时间知道你在做什么，你做的东西是啥，概括性很强，整体性很强，这里面不是简单把所有东西凑一起说，而是应该以一个整体思维，把每一个部分串联起来，介绍一个整体的东西</strong></li>\n</ul>\n</li>\n<li><h4 id=\"怎么证明你的方案比别人好\"><a href=\"#怎么证明你的方案比别人好\" class=\"headerlink\" title=\"怎么证明你的方案比别人好\"></a><strong>怎么证明你的方案比别人好</strong></h4><ul>\n<li><strong>项目技术突破：</strong>这部分就是讲你的技术有多牛逼，这块偏向现有技术，但是你的技术比别人精度更高、效果更好等等，但是也一定要注意，<strong>商业比赛不要讲很深的理论</strong>，评委听不懂，你要用他听得懂的话语去讲最牛逼的事，<strong>创新比赛也不能讲的太底层</strong>，不然评委老师会困，要讲新的点，吸引住他们的点，这里面<strong>必须要图文并茂，用实际成果证明你的数据可靠，用数据证明你牛逼</strong></li>\n<li><strong>项目新思路：</strong>项目的新思路是另一个方面，就是别人走常规的道路，而你却实现弯道超车，用<strong>更简单的思路解决问题</strong>，类似这种的话一般会很感兴趣，而且<strong>新思路的话不一定要做的很深，但是要说明你这个思路是实际可靠的，而不是天马行空</strong></li>\n<li><strong>竞品分析：</strong>这个也是很好证明你比别人厉害的，同类型对比，你功能比他们多，价格比他们低等等，都会是你产品的优势，商业方面的话就讲功能、服务、价格优势，创新方面的话就讲技术突破、思路突破、效率等等，但是<strong>切忌不要吹太过分了，到时候用很低的价格，然后功能却比别人强很多，大家都不是傻子，难道只有你想得到，所以一旦太过分了，就变得很假了</strong></li>\n</ul>\n</li>\n<li><h4 id=\"你的产品怎么卖\"><a href=\"#你的产品怎么卖\" class=\"headerlink\" title=\"你的产品怎么卖\"></a><strong>你的产品怎么卖</strong></h4><ul>\n<li><strong>产品市场：这个就告诉别人，你这个行业赚不赚钱，</strong>如果行业很小，有可能投入都比你产出还大，那就没啥意义了，如果行业超级大，那会不会竞争对手也非常多，那你怎么脱颖而出，分析市场<strong>主要就是告诉评委，我给你画的饼有多大，心不心动</strong></li>\n<li><strong>商业逻辑：很简单的道理，你怎么赚到别人的钱</strong>，要考虑成本多少、客户是谁、供应商是谁、合作对象是谁、销售渠道有哪些、能提供哪些盈利服务、短期怎么推广、中期怎么推广、长期怎么推广、怎么打造产品的品牌效益等等，<strong>要真实考虑到卖东西的各个方面，越详细越深入越好，而且要形成一个闭环，丢掉学生思维，转向商人思维，把自己当成一个老板，这个产品怎么进行打造</strong>，可以学习国内外知名企业的商业逻辑，赚设备费用还是赚服务费用还是其他更新颖的赚钱思路</li>\n<li><strong>商业创新：</strong>这块是一个能够脱颖而出的地方，商业也是有创新点的，<strong>很多产品能够发家致富，产品的创新点反而是其次，更重要的是营销手段，商业创新</strong>，比如共享单车、跑腿服务等等，这些都是纯靠商业模式活下来，技术根本不是核心，商业创新也有很多方面，比如我们有哪些独特优势、哪些特有资源，怎么利用这些去突围，我们常说的产学研合作就是这里面的一个创新，只不过太老了，还有产品生态，像小米或者苹果，他们其实不是卖手机，而是买一个能够买他们设备的设备而已，构建一套全生态，这样能够不断地、长期的盈利，所以，<strong>我们可以想想，我们怎么卖得更好</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-PPT的基本框架\"><a href=\"#2-PPT的基本框架\" class=\"headerlink\" title=\"2.PPT的基本框架\"></a>2.PPT的基本框架</h3><ul>\n<li><strong>常规的商业PPT主要包含这几大方面</strong><ul>\n<li>1.解决的社会痛点是啥：<strong>项目背景、市场痛点</strong></li>\n<li>2.你的解决方案：<strong>项目简介、技术架构</strong></li>\n<li>3.怎么证明你的方案比别人好：<strong>项目创新点（一般都是3点，最多不超过4点），竞品分析</strong></li>\n<li>4.你的产品怎么卖：<strong>商业模式、成本分析、营销模式、客户对象、盈利预测、产品生态</strong></li>\n<li>5.证明价值：<strong>测试情况、落地情况、社会报道、商业合作、专家点评、知识产权、论文支撑、行业标准</strong>等等</li>\n<li>6.团队合作：<strong>指导老师团队、开发团队</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-PPT制作过程中的细节\"><a href=\"#3-PPT制作过程中的细节\" class=\"headerlink\" title=\"3.PPT制作过程中的细节\"></a>3.PPT制作过程中的细节</h3><ul>\n<li><strong>配色正常</strong>，不要太晃眼睛，<strong>最好三配色，全文基本就三种颜色（推荐的是白色背景搭配藏蓝色、红色，重点部分用红色突出，暗系背景搭配白色和亮黄色，重点部分用亮黄色突出）</strong>，不然会感觉花里胡哨的，字体一定不要全文太亮、或者全文太暗，遇到重点或者你想要强调的地方，一定用亮色突出，让别人第一目光就聚焦到你想要让他看的地方，<strong>学会管理评委的目光</strong></li>\n<li><strong>微软雅黑字体，最好都采用微软雅黑加粗，字体厚实，观看清晰，不会给人感觉看不清、或者太乱、太细</strong>，楷体宋体都不好看，太细，给人感觉弱不禁风的样子</li>\n<li><strong>背景配色</strong>，<strong>不要纯白背景、最好背景后面有点很淡的一些东西，感觉不是很空</strong>，米白色会更好看，也不要纯黑背景，太黑暗，给人非常压抑，<strong>如果想要偏暗系背景的话，采用藏蓝色然后搞一个黑色透明套上去</strong>，我会提供几个背景模板</li>\n<li><strong>方块</strong>，PPT常用的就是各种方块，<strong>方块一定一定一定要无边框，不然非常的难看</strong>，想要在边框里面加上自己想要的字体，<strong>不建议新建文本框，而是直接在方块里面编辑，不然后续想改的时候会非常麻烦，非常的累</strong></li>\n<li><strong>设计器</strong>，微软的PPT自带设计器，有时候能够解决你非常多的麻烦，又好看又快速</li>\n<li><strong>图片版PPT，一定不要另存出来图片版，图片的质量非常的差，一定要一页一页播放，截图，然后粘贴在新的PPT里面</strong>，遇到动图的时候，直接复制过去就行，如果遇到覆盖的时候，就做两页或者更多页</li>\n<li><strong>切换方式，不要任何切换方式，所有PPT都不要任何切换方式</strong>，评委会头晕，看的真的非常晕，而且而且，遇到垃圾电脑，你的动画会比老太太还慢，会出现各种bug，如果是线上的话，直接死亡，你觉得很快速，但是网速延迟非常高，别人那边就是一卡一卡的，印象分非常低</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"如何制作一份优秀的路演PPT\"><a href=\"#如何制作一份优秀的路演PPT\" class=\"headerlink\" title=\"如何制作一份优秀的路演PPT\"></a>如何制作一份优秀的路演PPT</h1><h3 id=\"1-PPT的基本思路\"><a href=\"#1-PPT的基本思路\" class=\"headerlink\" title=\"1.PPT的基本思路\"></a>1.PPT的基本思路</h3><ul>\n<li><h4 id=\"这个比赛的定位\"><a href=\"#这个比赛的定位\" class=\"headerlink\" title=\"这个比赛的定位\"></a><strong>这个比赛的定位</strong></h4><ul>\n<li>商业比赛还是创新比赛，这两个是完全不一样的思路和逻辑，不能什么比赛都同一份PPT，需要根据评委的胃口来选择</li>\n<li><strong>评分细则，一定一定一定要详读评分细则，因为只有详细的阅读评分细则之后，你才能嗅到这个比赛的侧重点是啥，你的PPT必须要紧贴这个比赛的侧重点，评分细则的每一个字都要想清楚它在我们PPT里面如何体现</strong></li>\n<li>如果是商业比赛，技术含量要降到4-5页，因为评委听不懂你讲的任何技术，要把技术转化成服务，<strong>总结来说就是，你的产品能提供啥服务，能给用户提供啥功能，这些功能有啥用，效果咋样，咋卖钱，商业比赛要讲赚钱，怎么用最低的成本赚最多的钱</strong></li>\n<li>如果是创新比赛，几乎都是技术讲解，因为评委是专家，他要看你这个项目的新意、创意，跟国内外比起来，你们项目新奇在哪里，技术点突破在哪里，突破的效果怎么样，<strong>总结来说就是，你的项目创新点在哪，技术突破情况咋样，创新比赛要讲学术，你的理论基础、技术基础如何突破，偏学术</strong></li>\n</ul>\n</li>\n<li><h4 id=\"解决的社会痛点是啥\"><a href=\"#解决的社会痛点是啥\" class=\"headerlink\" title=\"解决的社会痛点是啥\"></a><strong>解决的社会痛点是啥</strong></h4><ul>\n<li><strong>项目背景：</strong>你这个项目的起源是啥，为啥要做这个项目，做他的目的是啥，其中<strong>重点是：讲清楚、跟随政策、量化数据、提供依据，明确方向</strong>，但是切忌，项目的背景不要脱离实际，不要太离谱，比如郑州某大学想要自己研发光刻机，这只会给别人觉得你在骗人，但是也别出现太泛的情况，比如想要研发一种设备能够治疗所有疾病，没有针对点，没有细分领域。</li>\n<li><strong>社会痛点：</strong>讲完你的项目起源，就要开始说清楚目前市面上的痛点是啥，这个痛点痛不痛，不要解决一个可有可无的社会痛点，那别人凭什么为你买单，<strong>这个痛点要讲的很透彻，就是一下子让别人感觉，你这个项目想法很好，新意很好</strong></li>\n</ul>\n</li>\n<li><h4 id=\"你的解决方案\"><a href=\"#你的解决方案\" class=\"headerlink\" title=\"你的解决方案\"></a><strong>你的解决方案</strong></h4><ul>\n<li><strong>项目概述：</strong>第一时间告诉所有评委，针对这个痛点问题，你的完整解决方案是什么，<strong>如果是商业比赛，第一时间要告诉评委，你能提供什么服务</strong>，比如提供康复训练服务和康复评估服务，<strong>如果是创新比赛，第一时间要告诉评委你这个项目的整体情况，以及你的创新点</strong>，你的与众不同点在哪，比如采用柔顺康复、采用多模态康复评估等等，不同的比赛需要不同的方式</li>\n<li>解决方案的整体介绍的方式有挺多种的，<strong>偏向商业的就直接展示你这个产品</strong>，然后告诉他们，这个产品有啥用，有哪些功能，<strong>偏向创新的就需要展示这个项目整套技术流程</strong>，技术流程里面的创新点如何体现，<strong>这一部分是整个PPT的核心，需要非常精准有效的让别人第一时间知道你在做什么，你做的东西是啥，概括性很强，整体性很强，这里面不是简单把所有东西凑一起说，而是应该以一个整体思维，把每一个部分串联起来，介绍一个整体的东西</strong></li>\n</ul>\n</li>\n<li><h4 id=\"怎么证明你的方案比别人好\"><a href=\"#怎么证明你的方案比别人好\" class=\"headerlink\" title=\"怎么证明你的方案比别人好\"></a><strong>怎么证明你的方案比别人好</strong></h4><ul>\n<li><strong>项目技术突破：</strong>这部分就是讲你的技术有多牛逼，这块偏向现有技术，但是你的技术比别人精度更高、效果更好等等，但是也一定要注意，<strong>商业比赛不要讲很深的理论</strong>，评委听不懂，你要用他听得懂的话语去讲最牛逼的事，<strong>创新比赛也不能讲的太底层</strong>，不然评委老师会困，要讲新的点，吸引住他们的点，这里面<strong>必须要图文并茂，用实际成果证明你的数据可靠，用数据证明你牛逼</strong></li>\n<li><strong>项目新思路：</strong>项目的新思路是另一个方面，就是别人走常规的道路，而你却实现弯道超车，用<strong>更简单的思路解决问题</strong>，类似这种的话一般会很感兴趣，而且<strong>新思路的话不一定要做的很深，但是要说明你这个思路是实际可靠的，而不是天马行空</strong></li>\n<li><strong>竞品分析：</strong>这个也是很好证明你比别人厉害的，同类型对比，你功能比他们多，价格比他们低等等，都会是你产品的优势，商业方面的话就讲功能、服务、价格优势，创新方面的话就讲技术突破、思路突破、效率等等，但是<strong>切忌不要吹太过分了，到时候用很低的价格，然后功能却比别人强很多，大家都不是傻子，难道只有你想得到，所以一旦太过分了，就变得很假了</strong></li>\n</ul>\n</li>\n<li><h4 id=\"你的产品怎么卖\"><a href=\"#你的产品怎么卖\" class=\"headerlink\" title=\"你的产品怎么卖\"></a><strong>你的产品怎么卖</strong></h4><ul>\n<li><strong>产品市场：这个就告诉别人，你这个行业赚不赚钱，</strong>如果行业很小，有可能投入都比你产出还大，那就没啥意义了，如果行业超级大，那会不会竞争对手也非常多，那你怎么脱颖而出，分析市场<strong>主要就是告诉评委，我给你画的饼有多大，心不心动</strong></li>\n<li><strong>商业逻辑：很简单的道理，你怎么赚到别人的钱</strong>，要考虑成本多少、客户是谁、供应商是谁、合作对象是谁、销售渠道有哪些、能提供哪些盈利服务、短期怎么推广、中期怎么推广、长期怎么推广、怎么打造产品的品牌效益等等，<strong>要真实考虑到卖东西的各个方面，越详细越深入越好，而且要形成一个闭环，丢掉学生思维，转向商人思维，把自己当成一个老板，这个产品怎么进行打造</strong>，可以学习国内外知名企业的商业逻辑，赚设备费用还是赚服务费用还是其他更新颖的赚钱思路</li>\n<li><strong>商业创新：</strong>这块是一个能够脱颖而出的地方，商业也是有创新点的，<strong>很多产品能够发家致富，产品的创新点反而是其次，更重要的是营销手段，商业创新</strong>，比如共享单车、跑腿服务等等，这些都是纯靠商业模式活下来，技术根本不是核心，商业创新也有很多方面，比如我们有哪些独特优势、哪些特有资源，怎么利用这些去突围，我们常说的产学研合作就是这里面的一个创新，只不过太老了，还有产品生态，像小米或者苹果，他们其实不是卖手机，而是买一个能够买他们设备的设备而已，构建一套全生态，这样能够不断地、长期的盈利，所以，<strong>我们可以想想，我们怎么卖得更好</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-PPT的基本框架\"><a href=\"#2-PPT的基本框架\" class=\"headerlink\" title=\"2.PPT的基本框架\"></a>2.PPT的基本框架</h3><ul>\n<li><strong>常规的商业PPT主要包含这几大方面</strong><ul>\n<li>1.解决的社会痛点是啥：<strong>项目背景、市场痛点</strong></li>\n<li>2.你的解决方案：<strong>项目简介、技术架构</strong></li>\n<li>3.怎么证明你的方案比别人好：<strong>项目创新点（一般都是3点，最多不超过4点），竞品分析</strong></li>\n<li>4.你的产品怎么卖：<strong>商业模式、成本分析、营销模式、客户对象、盈利预测、产品生态</strong></li>\n<li>5.证明价值：<strong>测试情况、落地情况、社会报道、商业合作、专家点评、知识产权、论文支撑、行业标准</strong>等等</li>\n<li>6.团队合作：<strong>指导老师团队、开发团队</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-PPT制作过程中的细节\"><a href=\"#3-PPT制作过程中的细节\" class=\"headerlink\" title=\"3.PPT制作过程中的细节\"></a>3.PPT制作过程中的细节</h3><ul>\n<li><strong>配色正常</strong>，不要太晃眼睛，<strong>最好三配色，全文基本就三种颜色（推荐的是白色背景搭配藏蓝色、红色，重点部分用红色突出，暗系背景搭配白色和亮黄色，重点部分用亮黄色突出）</strong>，不然会感觉花里胡哨的，字体一定不要全文太亮、或者全文太暗，遇到重点或者你想要强调的地方，一定用亮色突出，让别人第一目光就聚焦到你想要让他看的地方，<strong>学会管理评委的目光</strong></li>\n<li><strong>微软雅黑字体，最好都采用微软雅黑加粗，字体厚实，观看清晰，不会给人感觉看不清、或者太乱、太细</strong>，楷体宋体都不好看，太细，给人感觉弱不禁风的样子</li>\n<li><strong>背景配色</strong>，<strong>不要纯白背景、最好背景后面有点很淡的一些东西，感觉不是很空</strong>，米白色会更好看，也不要纯黑背景，太黑暗，给人非常压抑，<strong>如果想要偏暗系背景的话，采用藏蓝色然后搞一个黑色透明套上去</strong>，我会提供几个背景模板</li>\n<li><strong>方块</strong>，PPT常用的就是各种方块，<strong>方块一定一定一定要无边框，不然非常的难看</strong>，想要在边框里面加上自己想要的字体，<strong>不建议新建文本框，而是直接在方块里面编辑，不然后续想改的时候会非常麻烦，非常的累</strong></li>\n<li><strong>设计器</strong>，微软的PPT自带设计器，有时候能够解决你非常多的麻烦，又好看又快速</li>\n<li><strong>图片版PPT，一定不要另存出来图片版，图片的质量非常的差，一定要一页一页播放，截图，然后粘贴在新的PPT里面</strong>，遇到动图的时候，直接复制过去就行，如果遇到覆盖的时候，就做两页或者更多页</li>\n<li><strong>切换方式，不要任何切换方式，所有PPT都不要任何切换方式</strong>，评委会头晕，看的真的非常晕，而且而且，遇到垃圾电脑，你的动画会比老太太还慢，会出现各种bug，如果是线上的话，直接死亡，你觉得很快速，但是网速延迟非常高，别人那边就是一卡一卡的，印象分非常低</li>\n</ul>\n"},{"title":"电气路控制设计","date":"2023-11-25T16:00:00.000Z","_content":"\n# 电气路控制设计\n- **一个简单的气动控制一共分为四大步：**\n  - 第一步是进行**气路仿真**，然后确定气路控制的逻辑性；\n  - 第二步**编写控制程序**，将气路仿真得出的逻辑结果以控制代码的形式进行书写；\n  - 第三步**设计气路控制板**，因为很多电磁阀根本无法直接通过单片机进行驱动，因此我们需要借助外部电源的力量，就需要制作外围电路，来完成小马拉大车的效果；\n  - 第四步进行实际的**气路连接并控制**，连线的话就需要根据之前的仿真图来进行气路的连线，测试当然也是要基于第二步的控制代码来进行；\n- 所以要想做好一个完整的气路控制，这四步少一步不行，不要因为很麻烦而去省略其中一步，当你在排查气路问题的时候，会让你抓狂的\n\n## 1.设计需求假设\n\n- 示例：现在要设计一个机械臂的抬升，使用了一个双作用气缸，该气缸能够通过控制实现伸长和收缩\n\n## 2.气路仿真\n\n- 气路仿真最好用的还是FuildSim，这款软件是费斯托公司提供用户进行气路仿真，用法简单，操作容易，因此我这边仿真都是采用了这个软件进行仿真\n- 构建仿真原理图，这个软件的详细操作请看**FuildSim**专栏帖子，这边不进行详细介绍，下面是我构建的简易气路图，这个气路图里面包含了1个双作用气缸，3个电磁阀，1个气泵，1个节流阀，节流阀的作用是控制气流量来控制气缸伸缩的用时，这里面**我给电磁阀进行了编号，这个编号非常重要，而且后续接线以及编写代码，必须要按这个编号严格进行，减少错误，甚至后续测试的时候，必须在电磁阀上面贴上编号**\n\n![气路图](https://picss.sunbangyan.cn/2023/11/29/f271e8d8706ef9ac62eaab4025ec81f3.jpeg)\n\n- 开始进行仿真，这次的目的是要实现一个双作用气缸的伸长和收缩控制，开始仿真后，得出控制顺序为：\n  - 伸长：打开DCF3，保持通路，打开DCF1，实现进气，进行延时，以达到所需要求，达到固定位置后，关闭DCF1，关闭DCF3，归为所有电磁阀，达到伸长控制**（ DCF3 - DCF1 - 5秒 - DCF1 - DCF3 ）**；\n\n  ![气缸伸长](https://picdm.sunbangyan.cn/2023/11/29/f3526be0094237b34f961ecf2d2b9e04.jpeg)\n\n  \n\n  - 缩回：打开DCF2，保持通路，打开DCF1，实现进气，进行延时，以达到所需要求，达到固定位置后，关闭DCF1，关闭DCF2，归为所有电磁阀，达到伸长控制**（ DCF2 - DCF1 - 5秒 - DCF1 - DCF2 ）**；\n\n  ![气缸缩回](https://picst.sunbangyan.cn/2023/11/29/6b7f958fbe983a0f05d3e9c2ad4252c3.jpeg)\n\n- 完成仿真，得出想要的结果，之后开始根据结果进行代码的设计\n\n## 3.代码设计\n\n- 代码设计采用最简单的Arduino控制，设计的过程也很简单，跟点灯一模一样，按照仿真的结果进行顺序点灯，即可达到效果\n\n```\nint DCF1=5;\nint DCF2=6;\nint DCF3=7;\n//引脚的定义根据实际连接电磁阀的需求来设计\nvoid setup() {\n  pinMode(DCF1,OUTPUT);\n  pinMode(DCF2,OUTPUT);\n  pinMode(DCF3,OUTPUT);\n}\nvoid UP(){//气缸伸长（ DCF3 - DCF1 - 5秒 - DCF1 - DCF3 ）\n  digitalWrite(DCF3,HIGH);\n  delay(100);//延时的目的防止电磁阀响应过快\n  digitalWrite(DCF1,HIGH);\n  delay(5000);//延时的目的为了能够控制进入气流量，达到控制位置效果\n  digitalWrite(DCF1,LOW);\n  delay(100);\n  digitalWrite(DCF3,LOW);\n  delay(100);\n}\nvoid Down(){//气缸缩短（ DCF2 - DCF1 - 5秒 - DCF1 - DCF2 ）\n  digitalWrite(DCF2,HIGH);\n  delay(100);\n  digitalWrite(DCF1,HIGH);\n  delay(5000);\n  digitalWrite(DCF1,LOW);\n  delay(100);\n  digitalWrite(DCF2,LOW);\n  delay(100);\n}\nvoid loop() {\n  UP();\n  Down();\n}\n```\n\n- 这里面的代码逻辑是跟上面仿真的结果一样，因此环环相扣，不能因为怕麻烦，缺失了其中一个环节\n\n## 4.[电磁阀](https://item.taobao.com/item.htm?spm=a1z09.2.0.0.32c42e8dCPUvWl&id=36262310020&_u=t2g8gqc420ea)控制\n\n- 因为目前所用的电磁阀基本都是12V和24V的，所以要想能够利用单片机的3.3V输出的话是不可能的，因此就需要用我们的单片机的3.3V搭配上一个只能开关NMOS管来实现小电压控制大电压的效果，当然这里面还需要进行外部高电压的接入，以下是我们会用到的元器件以及他的功能\n  - **[ESP32](https://detail.tmall.com/item.htm?_u=t2g8gqc49fb1&id=670446268383&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**这个最简单理解，我们代码的承载体，以及整个机器人控制的设备，为啥选择ESP32，因为他简单而且比Arduino小，还集成WIFI功能\n  - **[24V/12V电源](https://item.taobao.com/item.htm?spm=a1z09.2.0.0.32c42e8dCPUvWl&id=672833563616&_u=t2g8gqc4b0ae)：**一部分用于驱动电磁阀的通断，借助外部电源的电压来实现驱动，一部分用于ESP32的供电\n  - **[DC-DC降压模块](https://detail.tmall.com/item.htm?_u=t2g8gqc495fe&id=582430989377&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**利用输入的高电压，转为5V的稳压电源，供电给ESP32，来保证一个电源即可实现多种利用\n  - **[NMOS管（A3400）](https://detail.tmall.com/item.htm?_u=t2g8gqc44f16&id=14478416081&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**用来充当开关的作用，G极连接单片机引脚，用于接收信号来实现控制，D极连接24V/12V电源的正极，S极连接接地端，来实现电路的导通\n  - **[光耦模块(LTV-247)](https://item.taobao.com/item.htm?spm=a21n57.1.0.0.3d58523cFi5cOt&id=583531277832&ns=1&abbucket=19#detail)：**利用光电隔离，实现高低电压的连接处隔离，防止大电流倒灌，损坏ESP32，光耦模块最好只用三组，四组的功率太大，容易损坏光耦模块，光耦模块的输出接地端，需要加一个保护电阻560欧，输出端也需要加一个保护电阻100K欧\n  - **[LED灯（0603）](https://detail.tmall.com/item.htm?_u=t2g8gqc49a07&id=13860351935&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**用来提示电源是否接入，需要添加一个保护电阻100K\n  - **[船型开关](https://detail.tmall.com/item.htm?_u=t2g8gqc4e83f&id=18691413288&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**用来开关控制电源的输入，减少插拔电源的麻烦\n  - **[快速插拔二端子（XH-2.54-2P）](https://detail.tmall.com/item.htm?_u=t2g8gqc448e3&id=13300685584&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**用来快速插拔电磁阀，能够实现电池阀的快速的接入\n  - [**DC插头母头（DC-005）**](https://detail.tmall.com/item.htm?_u=t2g8gqc4ad83&id=16520506238&spm=a1z09.2.0.0.32c42e8dCPUvWl)：\n- **电路图请看目录下的QL-EDA.pdf文件**\n- 以上的是整体所需的元器件以及购买链接，正常来说都是以上的类型，然后需要注意一个问题，**就是整个电路，必须低电压一个接地，高电压一个接地，不允许出现共地情况，防止出现烧坏的情况，整体电路，导通24V/12V的PCB电路宽度不低于0.8mm，导通常规5V/3.3V的电路宽度不低于0.5mm**\n\n## 5.气路连接并控制\n\n- 做到这一步的时候，基本上已经完成差不多了，这个时候只需要对照第一步进行连线，这边需要强调的是电磁阀的1、2、3口是具体指那几个口，图片会给予详细解答，请查看\n\n  - 费斯托电磁阀（24V），具备高速开关能力\n\n  ![费斯托电磁阀](https://picdm.sunbangyan.cn/2023/11/29/2be07b3e5d478d569f147c98f91da10d.jpeg)\n\n  - 海德斯电磁阀（12V），小巧，但是不具备高速开关能力\n\n  ![海德斯电磁阀](https://picdm.sunbangyan.cn/2023/11/29/a611906e4e773fa55356787357dcf618.jpeg)\n\n  - 转接头，仅仅列举几个\n\n  ![TLTBHDFZOG4_{`U(H9GL6MR](https://picss.sunbangyan.cn/2023/11/29/2e62fc7686022bc47f98f1fe186cf7df.jpeg)![四通转接头](https://picss.sunbangyan.cn/2023/11/29/0095a70ac81fa88a189f0f66f78b101b.jpeg)\n\n  - 气动调节阀\n\n  ![气动调节阀](https://picst.sunbangyan.cn/2023/11/29/8704c328c58619d6fb920f54f5bf54f2.jpeg)\n\n  - 稳压阀\n\n  ![稳压阀](https://picst.sunbangyan.cn/2023/11/29/9f9500dda6401faee73322dc803ee935.jpeg)\n\n- 以上就是电气路设计的全过程，这里面的经验成分居多，需要不断的实操，不断的学习，才能够更深的掌握气动方面的知识\n","source":"_posts/20231204ZYY-电气路设计.md","raw":"---\ntitle: 电气路控制设计\ntag: 控制设计\ndate: 2023-11-26\ncategories: 控制设计\n---\n\n# 电气路控制设计\n- **一个简单的气动控制一共分为四大步：**\n  - 第一步是进行**气路仿真**，然后确定气路控制的逻辑性；\n  - 第二步**编写控制程序**，将气路仿真得出的逻辑结果以控制代码的形式进行书写；\n  - 第三步**设计气路控制板**，因为很多电磁阀根本无法直接通过单片机进行驱动，因此我们需要借助外部电源的力量，就需要制作外围电路，来完成小马拉大车的效果；\n  - 第四步进行实际的**气路连接并控制**，连线的话就需要根据之前的仿真图来进行气路的连线，测试当然也是要基于第二步的控制代码来进行；\n- 所以要想做好一个完整的气路控制，这四步少一步不行，不要因为很麻烦而去省略其中一步，当你在排查气路问题的时候，会让你抓狂的\n\n## 1.设计需求假设\n\n- 示例：现在要设计一个机械臂的抬升，使用了一个双作用气缸，该气缸能够通过控制实现伸长和收缩\n\n## 2.气路仿真\n\n- 气路仿真最好用的还是FuildSim，这款软件是费斯托公司提供用户进行气路仿真，用法简单，操作容易，因此我这边仿真都是采用了这个软件进行仿真\n- 构建仿真原理图，这个软件的详细操作请看**FuildSim**专栏帖子，这边不进行详细介绍，下面是我构建的简易气路图，这个气路图里面包含了1个双作用气缸，3个电磁阀，1个气泵，1个节流阀，节流阀的作用是控制气流量来控制气缸伸缩的用时，这里面**我给电磁阀进行了编号，这个编号非常重要，而且后续接线以及编写代码，必须要按这个编号严格进行，减少错误，甚至后续测试的时候，必须在电磁阀上面贴上编号**\n\n![气路图](https://picss.sunbangyan.cn/2023/11/29/f271e8d8706ef9ac62eaab4025ec81f3.jpeg)\n\n- 开始进行仿真，这次的目的是要实现一个双作用气缸的伸长和收缩控制，开始仿真后，得出控制顺序为：\n  - 伸长：打开DCF3，保持通路，打开DCF1，实现进气，进行延时，以达到所需要求，达到固定位置后，关闭DCF1，关闭DCF3，归为所有电磁阀，达到伸长控制**（ DCF3 - DCF1 - 5秒 - DCF1 - DCF3 ）**；\n\n  ![气缸伸长](https://picdm.sunbangyan.cn/2023/11/29/f3526be0094237b34f961ecf2d2b9e04.jpeg)\n\n  \n\n  - 缩回：打开DCF2，保持通路，打开DCF1，实现进气，进行延时，以达到所需要求，达到固定位置后，关闭DCF1，关闭DCF2，归为所有电磁阀，达到伸长控制**（ DCF2 - DCF1 - 5秒 - DCF1 - DCF2 ）**；\n\n  ![气缸缩回](https://picst.sunbangyan.cn/2023/11/29/6b7f958fbe983a0f05d3e9c2ad4252c3.jpeg)\n\n- 完成仿真，得出想要的结果，之后开始根据结果进行代码的设计\n\n## 3.代码设计\n\n- 代码设计采用最简单的Arduino控制，设计的过程也很简单，跟点灯一模一样，按照仿真的结果进行顺序点灯，即可达到效果\n\n```\nint DCF1=5;\nint DCF2=6;\nint DCF3=7;\n//引脚的定义根据实际连接电磁阀的需求来设计\nvoid setup() {\n  pinMode(DCF1,OUTPUT);\n  pinMode(DCF2,OUTPUT);\n  pinMode(DCF3,OUTPUT);\n}\nvoid UP(){//气缸伸长（ DCF3 - DCF1 - 5秒 - DCF1 - DCF3 ）\n  digitalWrite(DCF3,HIGH);\n  delay(100);//延时的目的防止电磁阀响应过快\n  digitalWrite(DCF1,HIGH);\n  delay(5000);//延时的目的为了能够控制进入气流量，达到控制位置效果\n  digitalWrite(DCF1,LOW);\n  delay(100);\n  digitalWrite(DCF3,LOW);\n  delay(100);\n}\nvoid Down(){//气缸缩短（ DCF2 - DCF1 - 5秒 - DCF1 - DCF2 ）\n  digitalWrite(DCF2,HIGH);\n  delay(100);\n  digitalWrite(DCF1,HIGH);\n  delay(5000);\n  digitalWrite(DCF1,LOW);\n  delay(100);\n  digitalWrite(DCF2,LOW);\n  delay(100);\n}\nvoid loop() {\n  UP();\n  Down();\n}\n```\n\n- 这里面的代码逻辑是跟上面仿真的结果一样，因此环环相扣，不能因为怕麻烦，缺失了其中一个环节\n\n## 4.[电磁阀](https://item.taobao.com/item.htm?spm=a1z09.2.0.0.32c42e8dCPUvWl&id=36262310020&_u=t2g8gqc420ea)控制\n\n- 因为目前所用的电磁阀基本都是12V和24V的，所以要想能够利用单片机的3.3V输出的话是不可能的，因此就需要用我们的单片机的3.3V搭配上一个只能开关NMOS管来实现小电压控制大电压的效果，当然这里面还需要进行外部高电压的接入，以下是我们会用到的元器件以及他的功能\n  - **[ESP32](https://detail.tmall.com/item.htm?_u=t2g8gqc49fb1&id=670446268383&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**这个最简单理解，我们代码的承载体，以及整个机器人控制的设备，为啥选择ESP32，因为他简单而且比Arduino小，还集成WIFI功能\n  - **[24V/12V电源](https://item.taobao.com/item.htm?spm=a1z09.2.0.0.32c42e8dCPUvWl&id=672833563616&_u=t2g8gqc4b0ae)：**一部分用于驱动电磁阀的通断，借助外部电源的电压来实现驱动，一部分用于ESP32的供电\n  - **[DC-DC降压模块](https://detail.tmall.com/item.htm?_u=t2g8gqc495fe&id=582430989377&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**利用输入的高电压，转为5V的稳压电源，供电给ESP32，来保证一个电源即可实现多种利用\n  - **[NMOS管（A3400）](https://detail.tmall.com/item.htm?_u=t2g8gqc44f16&id=14478416081&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**用来充当开关的作用，G极连接单片机引脚，用于接收信号来实现控制，D极连接24V/12V电源的正极，S极连接接地端，来实现电路的导通\n  - **[光耦模块(LTV-247)](https://item.taobao.com/item.htm?spm=a21n57.1.0.0.3d58523cFi5cOt&id=583531277832&ns=1&abbucket=19#detail)：**利用光电隔离，实现高低电压的连接处隔离，防止大电流倒灌，损坏ESP32，光耦模块最好只用三组，四组的功率太大，容易损坏光耦模块，光耦模块的输出接地端，需要加一个保护电阻560欧，输出端也需要加一个保护电阻100K欧\n  - **[LED灯（0603）](https://detail.tmall.com/item.htm?_u=t2g8gqc49a07&id=13860351935&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**用来提示电源是否接入，需要添加一个保护电阻100K\n  - **[船型开关](https://detail.tmall.com/item.htm?_u=t2g8gqc4e83f&id=18691413288&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**用来开关控制电源的输入，减少插拔电源的麻烦\n  - **[快速插拔二端子（XH-2.54-2P）](https://detail.tmall.com/item.htm?_u=t2g8gqc448e3&id=13300685584&spm=a1z09.2.0.0.32c42e8dCPUvWl)：**用来快速插拔电磁阀，能够实现电池阀的快速的接入\n  - [**DC插头母头（DC-005）**](https://detail.tmall.com/item.htm?_u=t2g8gqc4ad83&id=16520506238&spm=a1z09.2.0.0.32c42e8dCPUvWl)：\n- **电路图请看目录下的QL-EDA.pdf文件**\n- 以上的是整体所需的元器件以及购买链接，正常来说都是以上的类型，然后需要注意一个问题，**就是整个电路，必须低电压一个接地，高电压一个接地，不允许出现共地情况，防止出现烧坏的情况，整体电路，导通24V/12V的PCB电路宽度不低于0.8mm，导通常规5V/3.3V的电路宽度不低于0.5mm**\n\n## 5.气路连接并控制\n\n- 做到这一步的时候，基本上已经完成差不多了，这个时候只需要对照第一步进行连线，这边需要强调的是电磁阀的1、2、3口是具体指那几个口，图片会给予详细解答，请查看\n\n  - 费斯托电磁阀（24V），具备高速开关能力\n\n  ![费斯托电磁阀](https://picdm.sunbangyan.cn/2023/11/29/2be07b3e5d478d569f147c98f91da10d.jpeg)\n\n  - 海德斯电磁阀（12V），小巧，但是不具备高速开关能力\n\n  ![海德斯电磁阀](https://picdm.sunbangyan.cn/2023/11/29/a611906e4e773fa55356787357dcf618.jpeg)\n\n  - 转接头，仅仅列举几个\n\n  ![TLTBHDFZOG4_{`U(H9GL6MR](https://picss.sunbangyan.cn/2023/11/29/2e62fc7686022bc47f98f1fe186cf7df.jpeg)![四通转接头](https://picss.sunbangyan.cn/2023/11/29/0095a70ac81fa88a189f0f66f78b101b.jpeg)\n\n  - 气动调节阀\n\n  ![气动调节阀](https://picst.sunbangyan.cn/2023/11/29/8704c328c58619d6fb920f54f5bf54f2.jpeg)\n\n  - 稳压阀\n\n  ![稳压阀](https://picst.sunbangyan.cn/2023/11/29/9f9500dda6401faee73322dc803ee935.jpeg)\n\n- 以上就是电气路设计的全过程，这里面的经验成分居多，需要不断的实操，不断的学习，才能够更深的掌握气动方面的知识\n","slug":"20231204ZYY-电气路设计","published":1,"updated":"2024-07-26T09:53:46.555Z","_id":"clz1edk9p0005x8uwa0a7dn12","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"电气路控制设计\"><a href=\"#电气路控制设计\" class=\"headerlink\" title=\"电气路控制设计\"></a>电气路控制设计</h1><ul>\n<li><strong>一个简单的气动控制一共分为四大步：</strong><ul>\n<li>第一步是进行<strong>气路仿真</strong>，然后确定气路控制的逻辑性；</li>\n<li>第二步<strong>编写控制程序</strong>，将气路仿真得出的逻辑结果以控制代码的形式进行书写；</li>\n<li>第三步<strong>设计气路控制板</strong>，因为很多电磁阀根本无法直接通过单片机进行驱动，因此我们需要借助外部电源的力量，就需要制作外围电路，来完成小马拉大车的效果；</li>\n<li>第四步进行实际的<strong>气路连接并控制</strong>，连线的话就需要根据之前的仿真图来进行气路的连线，测试当然也是要基于第二步的控制代码来进行；</li>\n</ul>\n</li>\n<li>所以要想做好一个完整的气路控制，这四步少一步不行，不要因为很麻烦而去省略其中一步，当你在排查气路问题的时候，会让你抓狂的</li>\n</ul>\n<h2 id=\"1-设计需求假设\"><a href=\"#1-设计需求假设\" class=\"headerlink\" title=\"1.设计需求假设\"></a>1.设计需求假设</h2><ul>\n<li>示例：现在要设计一个机械臂的抬升，使用了一个双作用气缸，该气缸能够通过控制实现伸长和收缩</li>\n</ul>\n<h2 id=\"2-气路仿真\"><a href=\"#2-气路仿真\" class=\"headerlink\" title=\"2.气路仿真\"></a>2.气路仿真</h2><ul>\n<li>气路仿真最好用的还是FuildSim，这款软件是费斯托公司提供用户进行气路仿真，用法简单，操作容易，因此我这边仿真都是采用了这个软件进行仿真</li>\n<li>构建仿真原理图，这个软件的详细操作请看<strong>FuildSim</strong>专栏帖子，这边不进行详细介绍，下面是我构建的简易气路图，这个气路图里面包含了1个双作用气缸，3个电磁阀，1个气泵，1个节流阀，节流阀的作用是控制气流量来控制气缸伸缩的用时，这里面<strong>我给电磁阀进行了编号，这个编号非常重要，而且后续接线以及编写代码，必须要按这个编号严格进行，减少错误，甚至后续测试的时候，必须在电磁阀上面贴上编号</strong></li>\n</ul>\n<p><img src=\"https://picss.sunbangyan.cn/2023/11/29/f271e8d8706ef9ac62eaab4025ec81f3.jpeg\" alt=\"气路图\"></p>\n<ul>\n<li><p>开始进行仿真，这次的目的是要实现一个双作用气缸的伸长和收缩控制，开始仿真后，得出控制顺序为：</p>\n<ul>\n<li>伸长：打开DCF3，保持通路，打开DCF1，实现进气，进行延时，以达到所需要求，达到固定位置后，关闭DCF1，关闭DCF3，归为所有电磁阀，达到伸长控制<strong>（ DCF3 - DCF1 - 5秒 - DCF1 - DCF3 ）</strong>；</li>\n</ul>\n<p><img src=\"https://picdm.sunbangyan.cn/2023/11/29/f3526be0094237b34f961ecf2d2b9e04.jpeg\" alt=\"气缸伸长\"></p>\n<ul>\n<li>缩回：打开DCF2，保持通路，打开DCF1，实现进气，进行延时，以达到所需要求，达到固定位置后，关闭DCF1，关闭DCF2，归为所有电磁阀，达到伸长控制<strong>（ DCF2 - DCF1 - 5秒 - DCF1 - DCF2 ）</strong>；</li>\n</ul>\n<p><img src=\"https://picst.sunbangyan.cn/2023/11/29/6b7f958fbe983a0f05d3e9c2ad4252c3.jpeg\" alt=\"气缸缩回\"></p>\n</li>\n<li><p>完成仿真，得出想要的结果，之后开始根据结果进行代码的设计</p>\n</li>\n</ul>\n<h2 id=\"3-代码设计\"><a href=\"#3-代码设计\" class=\"headerlink\" title=\"3.代码设计\"></a>3.代码设计</h2><ul>\n<li>代码设计采用最简单的Arduino控制，设计的过程也很简单，跟点灯一模一样，按照仿真的结果进行顺序点灯，即可达到效果</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-type\">int</span> DCF1=<span class=\"hljs-number\">5</span>;<br><span class=\"hljs-type\">int</span> DCF2=<span class=\"hljs-number\">6</span>;<br><span class=\"hljs-type\">int</span> DCF3=<span class=\"hljs-number\">7</span>;<br><span class=\"hljs-comment\">//引脚的定义根据实际连接电磁阀的需求来设计</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setup</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-built_in\">pinMode</span>(DCF1,<span class=\"hljs-literal\">OUTPUT</span>);<br>  <span class=\"hljs-built_in\">pinMode</span>(DCF2,<span class=\"hljs-literal\">OUTPUT</span>);<br>  <span class=\"hljs-built_in\">pinMode</span>(DCF3,<span class=\"hljs-literal\">OUTPUT</span>);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">UP</span><span class=\"hljs-params\">()</span></span>&#123;<span class=\"hljs-comment\">//气缸伸长（ DCF3 - DCF1 - 5秒 - DCF1 - DCF3 ）</span><br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF3,<span class=\"hljs-literal\">HIGH</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<span class=\"hljs-comment\">//延时的目的防止电磁阀响应过快</span><br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF1,<span class=\"hljs-literal\">HIGH</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);<span class=\"hljs-comment\">//延时的目的为了能够控制进入气流量，达到控制位置效果</span><br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF1,<span class=\"hljs-literal\">LOW</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF3,<span class=\"hljs-literal\">LOW</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Down</span><span class=\"hljs-params\">()</span></span>&#123;<span class=\"hljs-comment\">//气缸缩短（ DCF2 - DCF1 - 5秒 - DCF1 - DCF2 ）</span><br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF2,<span class=\"hljs-literal\">HIGH</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF1,<span class=\"hljs-literal\">HIGH</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);<br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF1,<span class=\"hljs-literal\">LOW</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF2,<span class=\"hljs-literal\">LOW</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">loop</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-built_in\">UP</span>();<br>  <span class=\"hljs-built_in\">Down</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>这里面的代码逻辑是跟上面仿真的结果一样，因此环环相扣，不能因为怕麻烦，缺失了其中一个环节</li>\n</ul>\n<h2 id=\"4-电磁阀控制\"><a href=\"#4-电磁阀控制\" class=\"headerlink\" title=\"4.电磁阀控制\"></a>4.<a href=\"https://item.taobao.com/item.htm?spm=a1z09.2.0.0.32c42e8dCPUvWl&id=36262310020&_u=t2g8gqc420ea\">电磁阀</a>控制</h2><ul>\n<li>因为目前所用的电磁阀基本都是12V和24V的，所以要想能够利用单片机的3.3V输出的话是不可能的，因此就需要用我们的单片机的3.3V搭配上一个只能开关NMOS管来实现小电压控制大电压的效果，当然这里面还需要进行外部高电压的接入，以下是我们会用到的元器件以及他的功能<ul>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc49fb1&id=670446268383&spm=a1z09.2.0.0.32c42e8dCPUvWl\">ESP32</a>：</strong>这个最简单理解，我们代码的承载体，以及整个机器人控制的设备，为啥选择ESP32，因为他简单而且比Arduino小，还集成WIFI功能</li>\n<li><strong><a href=\"https://item.taobao.com/item.htm?spm=a1z09.2.0.0.32c42e8dCPUvWl&id=672833563616&_u=t2g8gqc4b0ae\">24V&#x2F;12V电源</a>：</strong>一部分用于驱动电磁阀的通断，借助外部电源的电压来实现驱动，一部分用于ESP32的供电</li>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc495fe&id=582430989377&spm=a1z09.2.0.0.32c42e8dCPUvWl\">DC-DC降压模块</a>：</strong>利用输入的高电压，转为5V的稳压电源，供电给ESP32，来保证一个电源即可实现多种利用</li>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc44f16&id=14478416081&spm=a1z09.2.0.0.32c42e8dCPUvWl\">NMOS管（A3400）</a>：</strong>用来充当开关的作用，G极连接单片机引脚，用于接收信号来实现控制，D极连接24V&#x2F;12V电源的正极，S极连接接地端，来实现电路的导通</li>\n<li><strong><a href=\"https://item.taobao.com/item.htm?spm=a21n57.1.0.0.3d58523cFi5cOt&id=583531277832&ns=1&abbucket=19#detail\">光耦模块(LTV-247)</a>：</strong>利用光电隔离，实现高低电压的连接处隔离，防止大电流倒灌，损坏ESP32，光耦模块最好只用三组，四组的功率太大，容易损坏光耦模块，光耦模块的输出接地端，需要加一个保护电阻560欧，输出端也需要加一个保护电阻100K欧</li>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc49a07&id=13860351935&spm=a1z09.2.0.0.32c42e8dCPUvWl\">LED灯（0603）</a>：</strong>用来提示电源是否接入，需要添加一个保护电阻100K</li>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc4e83f&id=18691413288&spm=a1z09.2.0.0.32c42e8dCPUvWl\">船型开关</a>：</strong>用来开关控制电源的输入，减少插拔电源的麻烦</li>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc448e3&id=13300685584&spm=a1z09.2.0.0.32c42e8dCPUvWl\">快速插拔二端子（XH-2.54-2P）</a>：</strong>用来快速插拔电磁阀，能够实现电池阀的快速的接入</li>\n<li><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc4ad83&id=16520506238&spm=a1z09.2.0.0.32c42e8dCPUvWl\"><strong>DC插头母头（DC-005）</strong></a>：</li>\n</ul>\n</li>\n<li><strong>电路图请看目录下的QL-EDA.pdf文件</strong></li>\n<li>以上的是整体所需的元器件以及购买链接，正常来说都是以上的类型，然后需要注意一个问题，<strong>就是整个电路，必须低电压一个接地，高电压一个接地，不允许出现共地情况，防止出现烧坏的情况，整体电路，导通24V&#x2F;12V的PCB电路宽度不低于0.8mm，导通常规5V&#x2F;3.3V的电路宽度不低于0.5mm</strong></li>\n</ul>\n<h2 id=\"5-气路连接并控制\"><a href=\"#5-气路连接并控制\" class=\"headerlink\" title=\"5.气路连接并控制\"></a>5.气路连接并控制</h2><ul>\n<li><p>做到这一步的时候，基本上已经完成差不多了，这个时候只需要对照第一步进行连线，这边需要强调的是电磁阀的1、2、3口是具体指那几个口，图片会给予详细解答，请查看</p>\n<ul>\n<li>费斯托电磁阀（24V），具备高速开关能力</li>\n</ul>\n<p><img src=\"https://picdm.sunbangyan.cn/2023/11/29/2be07b3e5d478d569f147c98f91da10d.jpeg\" alt=\"费斯托电磁阀\"></p>\n<ul>\n<li>海德斯电磁阀（12V），小巧，但是不具备高速开关能力</li>\n</ul>\n<p><img src=\"https://picdm.sunbangyan.cn/2023/11/29/a611906e4e773fa55356787357dcf618.jpeg\" alt=\"海德斯电磁阀\"></p>\n<ul>\n<li>转接头，仅仅列举几个</li>\n</ul>\n<p>![TLTBHDFZOG4_{&#96;U(H9GL6MR](<a href=\"https://picss.sunbangyan.cn/2023/11/29/2e62fc7686022bc47f98f1fe186cf7df.jpeg)![%E5%9B%9B%E9%80%9A%E8%BD%AC%E6%8E%A5%E5%A4%B4](https://picss.sunbangyan.cn/2023/11/29/0095a70ac81fa88a189f0f66f78b101b.jpeg)\">https://picss.sunbangyan.cn/2023/11/29/2e62fc7686022bc47f98f1fe186cf7df.jpeg)![四通转接头](https://picss.sunbangyan.cn/2023/11/29/0095a70ac81fa88a189f0f66f78b101b.jpeg)</a></p>\n<ul>\n<li>气动调节阀</li>\n</ul>\n<p><img src=\"https://picst.sunbangyan.cn/2023/11/29/8704c328c58619d6fb920f54f5bf54f2.jpeg\" alt=\"气动调节阀\"></p>\n<ul>\n<li>稳压阀</li>\n</ul>\n<p><img src=\"https://picst.sunbangyan.cn/2023/11/29/9f9500dda6401faee73322dc803ee935.jpeg\" alt=\"稳压阀\"></p>\n</li>\n<li><p>以上就是电气路设计的全过程，这里面的经验成分居多，需要不断的实操，不断的学习，才能够更深的掌握气动方面的知识</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"电气路控制设计\"><a href=\"#电气路控制设计\" class=\"headerlink\" title=\"电气路控制设计\"></a>电气路控制设计</h1><ul>\n<li><strong>一个简单的气动控制一共分为四大步：</strong><ul>\n<li>第一步是进行<strong>气路仿真</strong>，然后确定气路控制的逻辑性；</li>\n<li>第二步<strong>编写控制程序</strong>，将气路仿真得出的逻辑结果以控制代码的形式进行书写；</li>\n<li>第三步<strong>设计气路控制板</strong>，因为很多电磁阀根本无法直接通过单片机进行驱动，因此我们需要借助外部电源的力量，就需要制作外围电路，来完成小马拉大车的效果；</li>\n<li>第四步进行实际的<strong>气路连接并控制</strong>，连线的话就需要根据之前的仿真图来进行气路的连线，测试当然也是要基于第二步的控制代码来进行；</li>\n</ul>\n</li>\n<li>所以要想做好一个完整的气路控制，这四步少一步不行，不要因为很麻烦而去省略其中一步，当你在排查气路问题的时候，会让你抓狂的</li>\n</ul>\n<h2 id=\"1-设计需求假设\"><a href=\"#1-设计需求假设\" class=\"headerlink\" title=\"1.设计需求假设\"></a>1.设计需求假设</h2><ul>\n<li>示例：现在要设计一个机械臂的抬升，使用了一个双作用气缸，该气缸能够通过控制实现伸长和收缩</li>\n</ul>\n<h2 id=\"2-气路仿真\"><a href=\"#2-气路仿真\" class=\"headerlink\" title=\"2.气路仿真\"></a>2.气路仿真</h2><ul>\n<li>气路仿真最好用的还是FuildSim，这款软件是费斯托公司提供用户进行气路仿真，用法简单，操作容易，因此我这边仿真都是采用了这个软件进行仿真</li>\n<li>构建仿真原理图，这个软件的详细操作请看<strong>FuildSim</strong>专栏帖子，这边不进行详细介绍，下面是我构建的简易气路图，这个气路图里面包含了1个双作用气缸，3个电磁阀，1个气泵，1个节流阀，节流阀的作用是控制气流量来控制气缸伸缩的用时，这里面<strong>我给电磁阀进行了编号，这个编号非常重要，而且后续接线以及编写代码，必须要按这个编号严格进行，减少错误，甚至后续测试的时候，必须在电磁阀上面贴上编号</strong></li>\n</ul>\n<p><img src=\"https://picss.sunbangyan.cn/2023/11/29/f271e8d8706ef9ac62eaab4025ec81f3.jpeg\" alt=\"气路图\"></p>\n<ul>\n<li><p>开始进行仿真，这次的目的是要实现一个双作用气缸的伸长和收缩控制，开始仿真后，得出控制顺序为：</p>\n<ul>\n<li>伸长：打开DCF3，保持通路，打开DCF1，实现进气，进行延时，以达到所需要求，达到固定位置后，关闭DCF1，关闭DCF3，归为所有电磁阀，达到伸长控制<strong>（ DCF3 - DCF1 - 5秒 - DCF1 - DCF3 ）</strong>；</li>\n</ul>\n<p><img src=\"https://picdm.sunbangyan.cn/2023/11/29/f3526be0094237b34f961ecf2d2b9e04.jpeg\" alt=\"气缸伸长\"></p>\n<ul>\n<li>缩回：打开DCF2，保持通路，打开DCF1，实现进气，进行延时，以达到所需要求，达到固定位置后，关闭DCF1，关闭DCF2，归为所有电磁阀，达到伸长控制<strong>（ DCF2 - DCF1 - 5秒 - DCF1 - DCF2 ）</strong>；</li>\n</ul>\n<p><img src=\"https://picst.sunbangyan.cn/2023/11/29/6b7f958fbe983a0f05d3e9c2ad4252c3.jpeg\" alt=\"气缸缩回\"></p>\n</li>\n<li><p>完成仿真，得出想要的结果，之后开始根据结果进行代码的设计</p>\n</li>\n</ul>\n<h2 id=\"3-代码设计\"><a href=\"#3-代码设计\" class=\"headerlink\" title=\"3.代码设计\"></a>3.代码设计</h2><ul>\n<li>代码设计采用最简单的Arduino控制，设计的过程也很简单，跟点灯一模一样，按照仿真的结果进行顺序点灯，即可达到效果</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-type\">int</span> DCF1=<span class=\"hljs-number\">5</span>;<br><span class=\"hljs-type\">int</span> DCF2=<span class=\"hljs-number\">6</span>;<br><span class=\"hljs-type\">int</span> DCF3=<span class=\"hljs-number\">7</span>;<br><span class=\"hljs-comment\">//引脚的定义根据实际连接电磁阀的需求来设计</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setup</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-built_in\">pinMode</span>(DCF1,<span class=\"hljs-literal\">OUTPUT</span>);<br>  <span class=\"hljs-built_in\">pinMode</span>(DCF2,<span class=\"hljs-literal\">OUTPUT</span>);<br>  <span class=\"hljs-built_in\">pinMode</span>(DCF3,<span class=\"hljs-literal\">OUTPUT</span>);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">UP</span><span class=\"hljs-params\">()</span></span>&#123;<span class=\"hljs-comment\">//气缸伸长（ DCF3 - DCF1 - 5秒 - DCF1 - DCF3 ）</span><br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF3,<span class=\"hljs-literal\">HIGH</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<span class=\"hljs-comment\">//延时的目的防止电磁阀响应过快</span><br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF1,<span class=\"hljs-literal\">HIGH</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);<span class=\"hljs-comment\">//延时的目的为了能够控制进入气流量，达到控制位置效果</span><br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF1,<span class=\"hljs-literal\">LOW</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF3,<span class=\"hljs-literal\">LOW</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Down</span><span class=\"hljs-params\">()</span></span>&#123;<span class=\"hljs-comment\">//气缸缩短（ DCF2 - DCF1 - 5秒 - DCF1 - DCF2 ）</span><br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF2,<span class=\"hljs-literal\">HIGH</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF1,<span class=\"hljs-literal\">HIGH</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);<br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF1,<span class=\"hljs-literal\">LOW</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<br>  <span class=\"hljs-built_in\">digitalWrite</span>(DCF2,<span class=\"hljs-literal\">LOW</span>);<br>  <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">100</span>);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">loop</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-built_in\">UP</span>();<br>  <span class=\"hljs-built_in\">Down</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>这里面的代码逻辑是跟上面仿真的结果一样，因此环环相扣，不能因为怕麻烦，缺失了其中一个环节</li>\n</ul>\n<h2 id=\"4-电磁阀控制\"><a href=\"#4-电磁阀控制\" class=\"headerlink\" title=\"4.电磁阀控制\"></a>4.<a href=\"https://item.taobao.com/item.htm?spm=a1z09.2.0.0.32c42e8dCPUvWl&id=36262310020&_u=t2g8gqc420ea\">电磁阀</a>控制</h2><ul>\n<li>因为目前所用的电磁阀基本都是12V和24V的，所以要想能够利用单片机的3.3V输出的话是不可能的，因此就需要用我们的单片机的3.3V搭配上一个只能开关NMOS管来实现小电压控制大电压的效果，当然这里面还需要进行外部高电压的接入，以下是我们会用到的元器件以及他的功能<ul>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc49fb1&id=670446268383&spm=a1z09.2.0.0.32c42e8dCPUvWl\">ESP32</a>：</strong>这个最简单理解，我们代码的承载体，以及整个机器人控制的设备，为啥选择ESP32，因为他简单而且比Arduino小，还集成WIFI功能</li>\n<li><strong><a href=\"https://item.taobao.com/item.htm?spm=a1z09.2.0.0.32c42e8dCPUvWl&id=672833563616&_u=t2g8gqc4b0ae\">24V&#x2F;12V电源</a>：</strong>一部分用于驱动电磁阀的通断，借助外部电源的电压来实现驱动，一部分用于ESP32的供电</li>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc495fe&id=582430989377&spm=a1z09.2.0.0.32c42e8dCPUvWl\">DC-DC降压模块</a>：</strong>利用输入的高电压，转为5V的稳压电源，供电给ESP32，来保证一个电源即可实现多种利用</li>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc44f16&id=14478416081&spm=a1z09.2.0.0.32c42e8dCPUvWl\">NMOS管（A3400）</a>：</strong>用来充当开关的作用，G极连接单片机引脚，用于接收信号来实现控制，D极连接24V&#x2F;12V电源的正极，S极连接接地端，来实现电路的导通</li>\n<li><strong><a href=\"https://item.taobao.com/item.htm?spm=a21n57.1.0.0.3d58523cFi5cOt&id=583531277832&ns=1&abbucket=19#detail\">光耦模块(LTV-247)</a>：</strong>利用光电隔离，实现高低电压的连接处隔离，防止大电流倒灌，损坏ESP32，光耦模块最好只用三组，四组的功率太大，容易损坏光耦模块，光耦模块的输出接地端，需要加一个保护电阻560欧，输出端也需要加一个保护电阻100K欧</li>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc49a07&id=13860351935&spm=a1z09.2.0.0.32c42e8dCPUvWl\">LED灯（0603）</a>：</strong>用来提示电源是否接入，需要添加一个保护电阻100K</li>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc4e83f&id=18691413288&spm=a1z09.2.0.0.32c42e8dCPUvWl\">船型开关</a>：</strong>用来开关控制电源的输入，减少插拔电源的麻烦</li>\n<li><strong><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc448e3&id=13300685584&spm=a1z09.2.0.0.32c42e8dCPUvWl\">快速插拔二端子（XH-2.54-2P）</a>：</strong>用来快速插拔电磁阀，能够实现电池阀的快速的接入</li>\n<li><a href=\"https://detail.tmall.com/item.htm?_u=t2g8gqc4ad83&id=16520506238&spm=a1z09.2.0.0.32c42e8dCPUvWl\"><strong>DC插头母头（DC-005）</strong></a>：</li>\n</ul>\n</li>\n<li><strong>电路图请看目录下的QL-EDA.pdf文件</strong></li>\n<li>以上的是整体所需的元器件以及购买链接，正常来说都是以上的类型，然后需要注意一个问题，<strong>就是整个电路，必须低电压一个接地，高电压一个接地，不允许出现共地情况，防止出现烧坏的情况，整体电路，导通24V&#x2F;12V的PCB电路宽度不低于0.8mm，导通常规5V&#x2F;3.3V的电路宽度不低于0.5mm</strong></li>\n</ul>\n<h2 id=\"5-气路连接并控制\"><a href=\"#5-气路连接并控制\" class=\"headerlink\" title=\"5.气路连接并控制\"></a>5.气路连接并控制</h2><ul>\n<li><p>做到这一步的时候，基本上已经完成差不多了，这个时候只需要对照第一步进行连线，这边需要强调的是电磁阀的1、2、3口是具体指那几个口，图片会给予详细解答，请查看</p>\n<ul>\n<li>费斯托电磁阀（24V），具备高速开关能力</li>\n</ul>\n<p><img src=\"https://picdm.sunbangyan.cn/2023/11/29/2be07b3e5d478d569f147c98f91da10d.jpeg\" alt=\"费斯托电磁阀\"></p>\n<ul>\n<li>海德斯电磁阀（12V），小巧，但是不具备高速开关能力</li>\n</ul>\n<p><img src=\"https://picdm.sunbangyan.cn/2023/11/29/a611906e4e773fa55356787357dcf618.jpeg\" alt=\"海德斯电磁阀\"></p>\n<ul>\n<li>转接头，仅仅列举几个</li>\n</ul>\n<p>![TLTBHDFZOG4_{&#96;U(H9GL6MR](<a href=\"https://picss.sunbangyan.cn/2023/11/29/2e62fc7686022bc47f98f1fe186cf7df.jpeg)![%E5%9B%9B%E9%80%9A%E8%BD%AC%E6%8E%A5%E5%A4%B4](https://picss.sunbangyan.cn/2023/11/29/0095a70ac81fa88a189f0f66f78b101b.jpeg)\">https://picss.sunbangyan.cn/2023/11/29/2e62fc7686022bc47f98f1fe186cf7df.jpeg)![四通转接头](https://picss.sunbangyan.cn/2023/11/29/0095a70ac81fa88a189f0f66f78b101b.jpeg)</a></p>\n<ul>\n<li>气动调节阀</li>\n</ul>\n<p><img src=\"https://picst.sunbangyan.cn/2023/11/29/8704c328c58619d6fb920f54f5bf54f2.jpeg\" alt=\"气动调节阀\"></p>\n<ul>\n<li>稳压阀</li>\n</ul>\n<p><img src=\"https://picst.sunbangyan.cn/2023/11/29/9f9500dda6401faee73322dc803ee935.jpeg\" alt=\"稳压阀\"></p>\n</li>\n<li><p>以上就是电气路设计的全过程，这里面的经验成分居多，需要不断的实操，不断的学习，才能够更深的掌握气动方面的知识</p>\n</li>\n</ul>\n"},{"title":"控制工程学习笔记","date":"2024-01-25T16:00:00.000Z","_content":"\n# 控制工程学习笔记\n\n- 【学习路径】动力学方程-拉普拉斯变换-PID-卡尔曼滤波-bode+奈奎斯特图\n\n## **1 学习资料**\n\n- 【怎么学习经典控制（结合MATLAB）】https://zhuanlan.zhihu.com/p/266048048\n- 【物理量解释】[转动惯量到底是个什么物理量_转动惯量类比-CSDN博客](https://blog.csdn.net/qq_38422317/article/details/108460482)\n- 【常用的微分，求导和积分公式大总结】[数学之美：常用的微分，求导和积分公式大总结_微积分求导公式-CSDN博客](https://blog.csdn.net/wfei101/article/details/82431442)\n- 【倒立摆建模控制系统设计】[线性系统大作业——1.一阶倒立摆建模与控制系统设计_一阶倒立摆系统的建模仿真与控制-CSDN博客](https://blog.csdn.net/qq_42731705/article/details/122464642)\n- 【小车动态模型设计Matlab】[J_H_Li投稿视频-J_H_Li视频分享-哔哩哔哩视频 (bilibili.com)](https://space.bilibili.com/1134403370/video)\n- 【如何使用Typora编辑数学公式】[如何使用Typora编辑数学公式](https://www.cnblogs.com/YanQing1998/p/10986911.html#:~:text=打开Typora选择数学模块 点击“段落”—>“公式块”,快捷键Ctrl%2BShift%2Bm 在两个%24中间直接编辑公式)\n- 【由拉普拉斯变换到传递函数】[由拉普拉斯变换到传递函数 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/146769901)\n- 【如何给文科生解释傅里叶变换】[如何给文科生解释傅里叶变换？ - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/48305950)\n- 【超级直观！！！】[直观の数学 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/c_1041689010053341184)\n- 【一阶倒立摆的PID控制和LQR控制】[一阶倒立摆的PID控制和LQR控制 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/54071212)\n- 【拉普拉斯变换】[拉普拉斯变换 - 维基百科，自由的百科全书 (wikipedia.org)](https://zh.wikipedia.org/wiki/拉普拉斯变换#)\n- 【LQR算法】https://www.bilibili.com/video/BV1Ng4y1V7JQ?p=1\n- 【simulink快捷键】[Simulink建模与仿真学习笔记之常用快捷操作（快捷键）_simulink快捷键-CSDN博客](https://blog.csdn.net/booksyhay/article/details/88129359)\n\n![image-20240131111616891.png](https://s2.loli.net/2024/07/25/K2CbOEa8XyjN9Io.png)\n\n## 2 动力学方程求解\n\n### 2.1 什么是动力学方程\n\n- 动力学方程（Differential Equations of Motion），也称为运动方程，是描述物体运动的数学方程。这些方程通常是微分方程，用来描述物体的位置、速度、加速度等随时间的变化关系。**动力学方程是经典力学的基础，它们揭示了物体受到的力和运动状态之间的关系。**\n\n### 2.2 建立倒立摆动力学方程步骤\n\n#### **①牛顿第二定律**\n\n- **【确定世界坐标】**世界坐标设立不同，求解结果不同\n- **【确定反馈量、控制量和控制目标】**获得需要设置的传感器和控制对象以及实现目标\n- **【分析系统受力情况】**分析系统位移和转动的情况以及所受外力情况\n- **【罗列涉及物理量】**罗列所有已知的量，并确定质心\n- **【分析受力情况】**根据位移和转动情况，列各个子系统的受力\n- **【合并公式求出动力学方程】**合并子系统受力，求出总系统的动力学方程\n\n#### **②拉格朗日定理**\n\n- **【确定世界坐标】**世界坐标设立不同，求解结果不同\n- **【确定反馈量、控制量和控制目标】**获得需要设置的传感器和控制对象以及实现目标\n- **【分析系统受力情况】**分析系统位移和转动的情况以及所受外力情况\n- **【罗列涉及物理量】**罗列所有已知的量，并确定质心\n- **【列举拉格朗日方程】**罗列拉格朗日表达式\n- **【求解拉格朗日方程】**多少个变量，求解多少个拉格朗日方程，分析所有系统的总动能（由于速度产生的动能，竖直方向也可能存在，除重力势能之外的所有力）、总势能（重力势能），并根据拉格朗日公式进行求解，求出动力学方程\n- **【合并得出动力学方程】**合并变量式，得到总系统的动力学方程\n\n### 2.3 求解案例过程\n\n![image-20240202100715483.png](https://s2.loli.net/2024/07/25/J3nAMrF8SgCkzZ5.png)\n\n#### **①牛顿第二定律求解**\n\n![image-20240203181633034.png](https://s2.loli.net/2024/07/25/tJMUe8F5PoNnumL.png)\n\n#### **②拉格朗日定理** \n\n![image-20240203121952572.png](https://s2.loli.net/2024/07/25/2Pg6zReWbKABMTu.png)\n\n### 2.4 线性化处理\n\n倒立摆的动力学方程通常是非线性的，但在某些应用中，为了进行控制设计或分析，可以对动力学方程进行线性化。线性化的目的是获得一个简化的线性系统，以便应用线性控制理论。\n\n小角度近似 sin(*θ*)≈*θ* 是一种在角度较小的情况下进行近似的数学技巧，它通常用于简化非线性系统的分析和求解。这个近似的合理性来源于正弦函数在零附近的泰勒级数展开。\n\n![image-20240203181307595.png](https://s2.loli.net/2024/07/25/VwCkGBTNlHUOQp1.png)\n\n![image-20240203181739601](C:\\Users\\BMW\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240203181739601.png)\n\n## 3 拉普拉斯变换求传递函数\n\n拉普拉斯变换是一种数学工具，用于将一个函数从时域（通常是时间域）转换到复频域。拉普拉斯变换的好处之一是它可以将微分方程转换成代数方程，从而简化了问题的求解。\n\n物理上可实现的信号总有相对应的拉氏变换（根据拉普拉斯的存在定义可得）\n\n拉普拉斯变换通常更适用于线性系统和线性微分方程。当面对非线性常微分方程时，使用拉普拉斯变换可能会变得更加困难，因为拉普拉斯变换的一些性质和简便性主要基于线性系统的性质，有时可以尝试将非线性问题线性化\n\n### 3.1 拉氏变换定义\n\n![image-20240205132357835.png](https://s2.loli.net/2024/07/25/FzdD1hvwgUOriQf.png)\n\n### 3.2 拉氏逆变换定义\n\n![image-20240205132336647.png](https://s2.loli.net/2024/07/25/Ikbf73zKeJ1VLSN.png)\n\n### 3.3 拉普拉斯各类定理\n\n![image-20240205133019691.png](https://s2.loli.net/2024/07/25/LnF38Jj7eR1cE6o.png)\n\n### 3.4 常用拉氏变换公式\n\n![image-20240205171104326.png](https://s2.loli.net/2024/07/25/O9zh1y8KqlYjbDH.png)\n\n![image-20240205171210118.png](https://s2.loli.net/2024/07/25/8LqcGhTnJNzOPIR.png)\n\n### 3.5 复频域好处\n\n- **频率响应分析：** 复频域提供了对系统对不同频率输入信号的响应更清晰的视角。通过分析系统在复频域中的行为，可以得到频率响应信息，即系统对不同频率成分的放大或衰减程度。这对于了解系统的频率特性和选择适当的滤波器或控制器非常有帮助。\n\n- **稳定性分析：** 复频域分析对于评估系统的稳定性至关重要。通过观察系统在复频域中的极点（pole）和零点（zero），可以得知系统的稳定性信息。例如，在控制系统中，稳定性分析可以通过查看系统的极点位置来判断系统的稳定性和相应的性能。\n\n- **传递函数表示：** 复频域中，系统的行为可以通过传递函数（Transfer Function）更简洁地表示。传递函数是输出与输入的拉普拉斯变换之比，对于线性时不变系统，它在复频域提供了对系统的完整描述。\n\n- **频域设计：** 复频域分析对于在设计中选择合适的控制器或滤波器参数非常有用。通过在频域中分析性能要求和系统响应，可以更好地调整系统以满足指定的性能规范。\n\n- **去除时域中的复杂性：** 在复频域中分析系统可能会使分析更简便。例如，复频域分析可以通过拉普拉斯变换将微分方程转换为代数方程，从而减少问题的复杂性。\n\n### 3.6 案例求解\n\n![image-20240205191534825.png](https://s2.loli.net/2024/07/25/4LZuYacRPtHSbkW.png)\n\n### 3.7 传递函数求解\n\n![image-20240210115216577.png](https://s2.loli.net/2024/07/25/u8FnNmArfQo7HRS.png)\n\n## 4 知识点总结\n\n- **【分析力】**小车水平位移、竖直位移，摆杆转动、水平位移、竖直位移\n\n- **【拉格朗日建模】**小车受到外力，摆杆没有受到外力，小车的变量是位移，摆杆的变量是角度，所以一共两个方程，摆杆右边等于零\n\n- **【线性化】**消去三角函数，利用约等假设进行消除\n- **【转动惯量定义】**转动惯量（也称为转动惯性、惯性矩）是描述物体对绕轴旋转的难度或惯性程度的物理量。它与物体的质量分布和形状有关，是旋转运动中的重要参量。\n- **【势能定义】**势能是物体由于位置而具有的能量，它与物体的位置和相互作用力有关。势能通常用符号 *U* 表示\n- **【动能定义】**动能是物体由于运动而具有的能量，它与物体的质量和速度有关。动能通常用符号 *T* 表示\n- **【系统总动能】**摆杆动能需要考虑竖直方向具有速度的运动，除重力做功之外，支撑力也有做功\n\n- **【转动惯量正反】**顺时针为正、逆时针为副\n- 【**线性化处理**】如果两个变量的关系可以通过直线来表示，且满足以下两个条件：1.比例性，变量的变化是成比例的。2.叠加性，两个或多个影响因素的效应可以相加。\n- **【傅里叶变换】**傅里叶变换的内涵，就是满足一定条件的函数可以表示成三角函数(正弦和/或余弦函数)或者它们的积分的线性组合。","source":"_posts/20240201ZYY-控制工程学习笔记.md","raw":"---\ntitle: 控制工程学习笔记\ntag: 控制工程\ndate: 2024-01-26\ncategories: 控制设计\n---\n\n# 控制工程学习笔记\n\n- 【学习路径】动力学方程-拉普拉斯变换-PID-卡尔曼滤波-bode+奈奎斯特图\n\n## **1 学习资料**\n\n- 【怎么学习经典控制（结合MATLAB）】https://zhuanlan.zhihu.com/p/266048048\n- 【物理量解释】[转动惯量到底是个什么物理量_转动惯量类比-CSDN博客](https://blog.csdn.net/qq_38422317/article/details/108460482)\n- 【常用的微分，求导和积分公式大总结】[数学之美：常用的微分，求导和积分公式大总结_微积分求导公式-CSDN博客](https://blog.csdn.net/wfei101/article/details/82431442)\n- 【倒立摆建模控制系统设计】[线性系统大作业——1.一阶倒立摆建模与控制系统设计_一阶倒立摆系统的建模仿真与控制-CSDN博客](https://blog.csdn.net/qq_42731705/article/details/122464642)\n- 【小车动态模型设计Matlab】[J_H_Li投稿视频-J_H_Li视频分享-哔哩哔哩视频 (bilibili.com)](https://space.bilibili.com/1134403370/video)\n- 【如何使用Typora编辑数学公式】[如何使用Typora编辑数学公式](https://www.cnblogs.com/YanQing1998/p/10986911.html#:~:text=打开Typora选择数学模块 点击“段落”—>“公式块”,快捷键Ctrl%2BShift%2Bm 在两个%24中间直接编辑公式)\n- 【由拉普拉斯变换到传递函数】[由拉普拉斯变换到传递函数 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/146769901)\n- 【如何给文科生解释傅里叶变换】[如何给文科生解释傅里叶变换？ - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/48305950)\n- 【超级直观！！！】[直观の数学 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/c_1041689010053341184)\n- 【一阶倒立摆的PID控制和LQR控制】[一阶倒立摆的PID控制和LQR控制 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/54071212)\n- 【拉普拉斯变换】[拉普拉斯变换 - 维基百科，自由的百科全书 (wikipedia.org)](https://zh.wikipedia.org/wiki/拉普拉斯变换#)\n- 【LQR算法】https://www.bilibili.com/video/BV1Ng4y1V7JQ?p=1\n- 【simulink快捷键】[Simulink建模与仿真学习笔记之常用快捷操作（快捷键）_simulink快捷键-CSDN博客](https://blog.csdn.net/booksyhay/article/details/88129359)\n\n![image-20240131111616891.png](https://s2.loli.net/2024/07/25/K2CbOEa8XyjN9Io.png)\n\n## 2 动力学方程求解\n\n### 2.1 什么是动力学方程\n\n- 动力学方程（Differential Equations of Motion），也称为运动方程，是描述物体运动的数学方程。这些方程通常是微分方程，用来描述物体的位置、速度、加速度等随时间的变化关系。**动力学方程是经典力学的基础，它们揭示了物体受到的力和运动状态之间的关系。**\n\n### 2.2 建立倒立摆动力学方程步骤\n\n#### **①牛顿第二定律**\n\n- **【确定世界坐标】**世界坐标设立不同，求解结果不同\n- **【确定反馈量、控制量和控制目标】**获得需要设置的传感器和控制对象以及实现目标\n- **【分析系统受力情况】**分析系统位移和转动的情况以及所受外力情况\n- **【罗列涉及物理量】**罗列所有已知的量，并确定质心\n- **【分析受力情况】**根据位移和转动情况，列各个子系统的受力\n- **【合并公式求出动力学方程】**合并子系统受力，求出总系统的动力学方程\n\n#### **②拉格朗日定理**\n\n- **【确定世界坐标】**世界坐标设立不同，求解结果不同\n- **【确定反馈量、控制量和控制目标】**获得需要设置的传感器和控制对象以及实现目标\n- **【分析系统受力情况】**分析系统位移和转动的情况以及所受外力情况\n- **【罗列涉及物理量】**罗列所有已知的量，并确定质心\n- **【列举拉格朗日方程】**罗列拉格朗日表达式\n- **【求解拉格朗日方程】**多少个变量，求解多少个拉格朗日方程，分析所有系统的总动能（由于速度产生的动能，竖直方向也可能存在，除重力势能之外的所有力）、总势能（重力势能），并根据拉格朗日公式进行求解，求出动力学方程\n- **【合并得出动力学方程】**合并变量式，得到总系统的动力学方程\n\n### 2.3 求解案例过程\n\n![image-20240202100715483.png](https://s2.loli.net/2024/07/25/J3nAMrF8SgCkzZ5.png)\n\n#### **①牛顿第二定律求解**\n\n![image-20240203181633034.png](https://s2.loli.net/2024/07/25/tJMUe8F5PoNnumL.png)\n\n#### **②拉格朗日定理** \n\n![image-20240203121952572.png](https://s2.loli.net/2024/07/25/2Pg6zReWbKABMTu.png)\n\n### 2.4 线性化处理\n\n倒立摆的动力学方程通常是非线性的，但在某些应用中，为了进行控制设计或分析，可以对动力学方程进行线性化。线性化的目的是获得一个简化的线性系统，以便应用线性控制理论。\n\n小角度近似 sin(*θ*)≈*θ* 是一种在角度较小的情况下进行近似的数学技巧，它通常用于简化非线性系统的分析和求解。这个近似的合理性来源于正弦函数在零附近的泰勒级数展开。\n\n![image-20240203181307595.png](https://s2.loli.net/2024/07/25/VwCkGBTNlHUOQp1.png)\n\n![image-20240203181739601](C:\\Users\\BMW\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240203181739601.png)\n\n## 3 拉普拉斯变换求传递函数\n\n拉普拉斯变换是一种数学工具，用于将一个函数从时域（通常是时间域）转换到复频域。拉普拉斯变换的好处之一是它可以将微分方程转换成代数方程，从而简化了问题的求解。\n\n物理上可实现的信号总有相对应的拉氏变换（根据拉普拉斯的存在定义可得）\n\n拉普拉斯变换通常更适用于线性系统和线性微分方程。当面对非线性常微分方程时，使用拉普拉斯变换可能会变得更加困难，因为拉普拉斯变换的一些性质和简便性主要基于线性系统的性质，有时可以尝试将非线性问题线性化\n\n### 3.1 拉氏变换定义\n\n![image-20240205132357835.png](https://s2.loli.net/2024/07/25/FzdD1hvwgUOriQf.png)\n\n### 3.2 拉氏逆变换定义\n\n![image-20240205132336647.png](https://s2.loli.net/2024/07/25/Ikbf73zKeJ1VLSN.png)\n\n### 3.3 拉普拉斯各类定理\n\n![image-20240205133019691.png](https://s2.loli.net/2024/07/25/LnF38Jj7eR1cE6o.png)\n\n### 3.4 常用拉氏变换公式\n\n![image-20240205171104326.png](https://s2.loli.net/2024/07/25/O9zh1y8KqlYjbDH.png)\n\n![image-20240205171210118.png](https://s2.loli.net/2024/07/25/8LqcGhTnJNzOPIR.png)\n\n### 3.5 复频域好处\n\n- **频率响应分析：** 复频域提供了对系统对不同频率输入信号的响应更清晰的视角。通过分析系统在复频域中的行为，可以得到频率响应信息，即系统对不同频率成分的放大或衰减程度。这对于了解系统的频率特性和选择适当的滤波器或控制器非常有帮助。\n\n- **稳定性分析：** 复频域分析对于评估系统的稳定性至关重要。通过观察系统在复频域中的极点（pole）和零点（zero），可以得知系统的稳定性信息。例如，在控制系统中，稳定性分析可以通过查看系统的极点位置来判断系统的稳定性和相应的性能。\n\n- **传递函数表示：** 复频域中，系统的行为可以通过传递函数（Transfer Function）更简洁地表示。传递函数是输出与输入的拉普拉斯变换之比，对于线性时不变系统，它在复频域提供了对系统的完整描述。\n\n- **频域设计：** 复频域分析对于在设计中选择合适的控制器或滤波器参数非常有用。通过在频域中分析性能要求和系统响应，可以更好地调整系统以满足指定的性能规范。\n\n- **去除时域中的复杂性：** 在复频域中分析系统可能会使分析更简便。例如，复频域分析可以通过拉普拉斯变换将微分方程转换为代数方程，从而减少问题的复杂性。\n\n### 3.6 案例求解\n\n![image-20240205191534825.png](https://s2.loli.net/2024/07/25/4LZuYacRPtHSbkW.png)\n\n### 3.7 传递函数求解\n\n![image-20240210115216577.png](https://s2.loli.net/2024/07/25/u8FnNmArfQo7HRS.png)\n\n## 4 知识点总结\n\n- **【分析力】**小车水平位移、竖直位移，摆杆转动、水平位移、竖直位移\n\n- **【拉格朗日建模】**小车受到外力，摆杆没有受到外力，小车的变量是位移，摆杆的变量是角度，所以一共两个方程，摆杆右边等于零\n\n- **【线性化】**消去三角函数，利用约等假设进行消除\n- **【转动惯量定义】**转动惯量（也称为转动惯性、惯性矩）是描述物体对绕轴旋转的难度或惯性程度的物理量。它与物体的质量分布和形状有关，是旋转运动中的重要参量。\n- **【势能定义】**势能是物体由于位置而具有的能量，它与物体的位置和相互作用力有关。势能通常用符号 *U* 表示\n- **【动能定义】**动能是物体由于运动而具有的能量，它与物体的质量和速度有关。动能通常用符号 *T* 表示\n- **【系统总动能】**摆杆动能需要考虑竖直方向具有速度的运动，除重力做功之外，支撑力也有做功\n\n- **【转动惯量正反】**顺时针为正、逆时针为副\n- 【**线性化处理**】如果两个变量的关系可以通过直线来表示，且满足以下两个条件：1.比例性，变量的变化是成比例的。2.叠加性，两个或多个影响因素的效应可以相加。\n- **【傅里叶变换】**傅里叶变换的内涵，就是满足一定条件的函数可以表示成三角函数(正弦和/或余弦函数)或者它们的积分的线性组合。","slug":"20240201ZYY-控制工程学习笔记","published":1,"updated":"2024-07-26T09:54:14.469Z","_id":"clz1edk9q0006x8uwbywj7i5v","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"控制工程学习笔记\"><a href=\"#控制工程学习笔记\" class=\"headerlink\" title=\"控制工程学习笔记\"></a>控制工程学习笔记</h1><ul>\n<li>【学习路径】动力学方程-拉普拉斯变换-PID-卡尔曼滤波-bode+奈奎斯特图</li>\n</ul>\n<h2 id=\"1-学习资料\"><a href=\"#1-学习资料\" class=\"headerlink\" title=\"1 学习资料\"></a><strong>1 学习资料</strong></h2><ul>\n<li>【怎么学习经典控制（结合MATLAB）】<a href=\"https://zhuanlan.zhihu.com/p/266048048\">https://zhuanlan.zhihu.com/p/266048048</a></li>\n<li>【物理量解释】<a href=\"https://blog.csdn.net/qq_38422317/article/details/108460482\">转动惯量到底是个什么物理量_转动惯量类比-CSDN博客</a></li>\n<li>【常用的微分，求导和积分公式大总结】<a href=\"https://blog.csdn.net/wfei101/article/details/82431442\">数学之美：常用的微分，求导和积分公式大总结_微积分求导公式-CSDN博客</a></li>\n<li>【倒立摆建模控制系统设计】<a href=\"https://blog.csdn.net/qq_42731705/article/details/122464642\">线性系统大作业——1.一阶倒立摆建模与控制系统设计_一阶倒立摆系统的建模仿真与控制-CSDN博客</a></li>\n<li>【小车动态模型设计Matlab】<a href=\"https://space.bilibili.com/1134403370/video\">J_H_Li投稿视频-J_H_Li视频分享-哔哩哔哩视频 (bilibili.com)</a></li>\n<li>【如何使用Typora编辑数学公式】[如何使用Typora编辑数学公式](<a href=\"https://www.cnblogs.com/YanQing1998/p/10986911.html#:~:text=%E6%89%93%E5%BC%80Typora%E9%80%89%E6%8B%A9%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9D%97\">https://www.cnblogs.com/YanQing1998/p/10986911.html#:~:text=打开Typora选择数学模块</a> 点击“段落”—&gt;“公式块”,快捷键Ctrl%2BShift%2Bm 在两个%24中间直接编辑公式)</li>\n<li>【由拉普拉斯变换到传递函数】<a href=\"https://zhuanlan.zhihu.com/p/146769901\">由拉普拉斯变换到传递函数 - 知乎 (zhihu.com)</a></li>\n<li>【如何给文科生解释傅里叶变换】<a href=\"https://zhuanlan.zhihu.com/p/48305950\">如何给文科生解释傅里叶变换？ - 知乎 (zhihu.com)</a></li>\n<li>【超级直观！！！】<a href=\"https://zhuanlan.zhihu.com/c_1041689010053341184\">直观の数学 - 知乎 (zhihu.com)</a></li>\n<li>【一阶倒立摆的PID控制和LQR控制】<a href=\"https://zhuanlan.zhihu.com/p/54071212\">一阶倒立摆的PID控制和LQR控制 - 知乎 (zhihu.com)</a></li>\n<li>【拉普拉斯变换】<a href=\"https://zh.wikipedia.org/wiki/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E5%8F%98%E6%8D%A2#\">拉普拉斯变换 - 维基百科，自由的百科全书 (wikipedia.org)</a></li>\n<li>【LQR算法】<a href=\"https://www.bilibili.com/video/BV1Ng4y1V7JQ?p=1\">https://www.bilibili.com/video/BV1Ng4y1V7JQ?p=1</a></li>\n<li>【simulink快捷键】<a href=\"https://blog.csdn.net/booksyhay/article/details/88129359\">Simulink建模与仿真学习笔记之常用快捷操作（快捷键）_simulink快捷键-CSDN博客</a></li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/07/25/K2CbOEa8XyjN9Io.png\" alt=\"image-20240131111616891.png\"></p>\n<h2 id=\"2-动力学方程求解\"><a href=\"#2-动力学方程求解\" class=\"headerlink\" title=\"2 动力学方程求解\"></a>2 动力学方程求解</h2><h3 id=\"2-1-什么是动力学方程\"><a href=\"#2-1-什么是动力学方程\" class=\"headerlink\" title=\"2.1 什么是动力学方程\"></a>2.1 什么是动力学方程</h3><ul>\n<li>动力学方程（Differential Equations of Motion），也称为运动方程，是描述物体运动的数学方程。这些方程通常是微分方程，用来描述物体的位置、速度、加速度等随时间的变化关系。<strong>动力学方程是经典力学的基础，它们揭示了物体受到的力和运动状态之间的关系。</strong></li>\n</ul>\n<h3 id=\"2-2-建立倒立摆动力学方程步骤\"><a href=\"#2-2-建立倒立摆动力学方程步骤\" class=\"headerlink\" title=\"2.2 建立倒立摆动力学方程步骤\"></a>2.2 建立倒立摆动力学方程步骤</h3><h4 id=\"①牛顿第二定律\"><a href=\"#①牛顿第二定律\" class=\"headerlink\" title=\"①牛顿第二定律\"></a><strong>①牛顿第二定律</strong></h4><ul>\n<li><strong>【确定世界坐标】</strong>世界坐标设立不同，求解结果不同</li>\n<li><strong>【确定反馈量、控制量和控制目标】</strong>获得需要设置的传感器和控制对象以及实现目标</li>\n<li><strong>【分析系统受力情况】</strong>分析系统位移和转动的情况以及所受外力情况</li>\n<li><strong>【罗列涉及物理量】</strong>罗列所有已知的量，并确定质心</li>\n<li><strong>【分析受力情况】</strong>根据位移和转动情况，列各个子系统的受力</li>\n<li><strong>【合并公式求出动力学方程】</strong>合并子系统受力，求出总系统的动力学方程</li>\n</ul>\n<h4 id=\"②拉格朗日定理\"><a href=\"#②拉格朗日定理\" class=\"headerlink\" title=\"②拉格朗日定理\"></a><strong>②拉格朗日定理</strong></h4><ul>\n<li><strong>【确定世界坐标】</strong>世界坐标设立不同，求解结果不同</li>\n<li><strong>【确定反馈量、控制量和控制目标】</strong>获得需要设置的传感器和控制对象以及实现目标</li>\n<li><strong>【分析系统受力情况】</strong>分析系统位移和转动的情况以及所受外力情况</li>\n<li><strong>【罗列涉及物理量】</strong>罗列所有已知的量，并确定质心</li>\n<li><strong>【列举拉格朗日方程】</strong>罗列拉格朗日表达式</li>\n<li><strong>【求解拉格朗日方程】</strong>多少个变量，求解多少个拉格朗日方程，分析所有系统的总动能（由于速度产生的动能，竖直方向也可能存在，除重力势能之外的所有力）、总势能（重力势能），并根据拉格朗日公式进行求解，求出动力学方程</li>\n<li><strong>【合并得出动力学方程】</strong>合并变量式，得到总系统的动力学方程</li>\n</ul>\n<h3 id=\"2-3-求解案例过程\"><a href=\"#2-3-求解案例过程\" class=\"headerlink\" title=\"2.3 求解案例过程\"></a>2.3 求解案例过程</h3><p><img src=\"https://s2.loli.net/2024/07/25/J3nAMrF8SgCkzZ5.png\" alt=\"image-20240202100715483.png\"></p>\n<h4 id=\"①牛顿第二定律求解\"><a href=\"#①牛顿第二定律求解\" class=\"headerlink\" title=\"①牛顿第二定律求解\"></a><strong>①牛顿第二定律求解</strong></h4><p><img src=\"https://s2.loli.net/2024/07/25/tJMUe8F5PoNnumL.png\" alt=\"image-20240203181633034.png\"></p>\n<h4 id=\"②拉格朗日定理-1\"><a href=\"#②拉格朗日定理-1\" class=\"headerlink\" title=\"②拉格朗日定理\"></a><strong>②拉格朗日定理</strong></h4><p><img src=\"https://s2.loli.net/2024/07/25/2Pg6zReWbKABMTu.png\" alt=\"image-20240203121952572.png\"></p>\n<h3 id=\"2-4-线性化处理\"><a href=\"#2-4-线性化处理\" class=\"headerlink\" title=\"2.4 线性化处理\"></a>2.4 线性化处理</h3><p>倒立摆的动力学方程通常是非线性的，但在某些应用中，为了进行控制设计或分析，可以对动力学方程进行线性化。线性化的目的是获得一个简化的线性系统，以便应用线性控制理论。</p>\n<p>小角度近似 sin(<em>θ</em>)≈<em>θ</em> 是一种在角度较小的情况下进行近似的数学技巧，它通常用于简化非线性系统的分析和求解。这个近似的合理性来源于正弦函数在零附近的泰勒级数展开。</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/VwCkGBTNlHUOQp1.png\" alt=\"image-20240203181307595.png\"></p>\n<p><img src=\"C:\\Users\\BMW\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240203181739601.png\" alt=\"image-20240203181739601\"></p>\n<h2 id=\"3-拉普拉斯变换求传递函数\"><a href=\"#3-拉普拉斯变换求传递函数\" class=\"headerlink\" title=\"3 拉普拉斯变换求传递函数\"></a>3 拉普拉斯变换求传递函数</h2><p>拉普拉斯变换是一种数学工具，用于将一个函数从时域（通常是时间域）转换到复频域。拉普拉斯变换的好处之一是它可以将微分方程转换成代数方程，从而简化了问题的求解。</p>\n<p>物理上可实现的信号总有相对应的拉氏变换（根据拉普拉斯的存在定义可得）</p>\n<p>拉普拉斯变换通常更适用于线性系统和线性微分方程。当面对非线性常微分方程时，使用拉普拉斯变换可能会变得更加困难，因为拉普拉斯变换的一些性质和简便性主要基于线性系统的性质，有时可以尝试将非线性问题线性化</p>\n<h3 id=\"3-1-拉氏变换定义\"><a href=\"#3-1-拉氏变换定义\" class=\"headerlink\" title=\"3.1 拉氏变换定义\"></a>3.1 拉氏变换定义</h3><p><img src=\"https://s2.loli.net/2024/07/25/FzdD1hvwgUOriQf.png\" alt=\"image-20240205132357835.png\"></p>\n<h3 id=\"3-2-拉氏逆变换定义\"><a href=\"#3-2-拉氏逆变换定义\" class=\"headerlink\" title=\"3.2 拉氏逆变换定义\"></a>3.2 拉氏逆变换定义</h3><p><img src=\"https://s2.loli.net/2024/07/25/Ikbf73zKeJ1VLSN.png\" alt=\"image-20240205132336647.png\"></p>\n<h3 id=\"3-3-拉普拉斯各类定理\"><a href=\"#3-3-拉普拉斯各类定理\" class=\"headerlink\" title=\"3.3 拉普拉斯各类定理\"></a>3.3 拉普拉斯各类定理</h3><p><img src=\"https://s2.loli.net/2024/07/25/LnF38Jj7eR1cE6o.png\" alt=\"image-20240205133019691.png\"></p>\n<h3 id=\"3-4-常用拉氏变换公式\"><a href=\"#3-4-常用拉氏变换公式\" class=\"headerlink\" title=\"3.4 常用拉氏变换公式\"></a>3.4 常用拉氏变换公式</h3><p><img src=\"https://s2.loli.net/2024/07/25/O9zh1y8KqlYjbDH.png\" alt=\"image-20240205171104326.png\"></p>\n<p><img src=\"https://s2.loli.net/2024/07/25/8LqcGhTnJNzOPIR.png\" alt=\"image-20240205171210118.png\"></p>\n<h3 id=\"3-5-复频域好处\"><a href=\"#3-5-复频域好处\" class=\"headerlink\" title=\"3.5 复频域好处\"></a>3.5 复频域好处</h3><ul>\n<li><p><strong>频率响应分析：</strong> 复频域提供了对系统对不同频率输入信号的响应更清晰的视角。通过分析系统在复频域中的行为，可以得到频率响应信息，即系统对不同频率成分的放大或衰减程度。这对于了解系统的频率特性和选择适当的滤波器或控制器非常有帮助。</p>\n</li>\n<li><p><strong>稳定性分析：</strong> 复频域分析对于评估系统的稳定性至关重要。通过观察系统在复频域中的极点（pole）和零点（zero），可以得知系统的稳定性信息。例如，在控制系统中，稳定性分析可以通过查看系统的极点位置来判断系统的稳定性和相应的性能。</p>\n</li>\n<li><p><strong>传递函数表示：</strong> 复频域中，系统的行为可以通过传递函数（Transfer Function）更简洁地表示。传递函数是输出与输入的拉普拉斯变换之比，对于线性时不变系统，它在复频域提供了对系统的完整描述。</p>\n</li>\n<li><p><strong>频域设计：</strong> 复频域分析对于在设计中选择合适的控制器或滤波器参数非常有用。通过在频域中分析性能要求和系统响应，可以更好地调整系统以满足指定的性能规范。</p>\n</li>\n<li><p><strong>去除时域中的复杂性：</strong> 在复频域中分析系统可能会使分析更简便。例如，复频域分析可以通过拉普拉斯变换将微分方程转换为代数方程，从而减少问题的复杂性。</p>\n</li>\n</ul>\n<h3 id=\"3-6-案例求解\"><a href=\"#3-6-案例求解\" class=\"headerlink\" title=\"3.6 案例求解\"></a>3.6 案例求解</h3><p><img src=\"https://s2.loli.net/2024/07/25/4LZuYacRPtHSbkW.png\" alt=\"image-20240205191534825.png\"></p>\n<h3 id=\"3-7-传递函数求解\"><a href=\"#3-7-传递函数求解\" class=\"headerlink\" title=\"3.7 传递函数求解\"></a>3.7 传递函数求解</h3><p><img src=\"https://s2.loli.net/2024/07/25/u8FnNmArfQo7HRS.png\" alt=\"image-20240210115216577.png\"></p>\n<h2 id=\"4-知识点总结\"><a href=\"#4-知识点总结\" class=\"headerlink\" title=\"4 知识点总结\"></a>4 知识点总结</h2><ul>\n<li><p><strong>【分析力】</strong>小车水平位移、竖直位移，摆杆转动、水平位移、竖直位移</p>\n</li>\n<li><p><strong>【拉格朗日建模】</strong>小车受到外力，摆杆没有受到外力，小车的变量是位移，摆杆的变量是角度，所以一共两个方程，摆杆右边等于零</p>\n</li>\n<li><p><strong>【线性化】</strong>消去三角函数，利用约等假设进行消除</p>\n</li>\n<li><p><strong>【转动惯量定义】</strong>转动惯量（也称为转动惯性、惯性矩）是描述物体对绕轴旋转的难度或惯性程度的物理量。它与物体的质量分布和形状有关，是旋转运动中的重要参量。</p>\n</li>\n<li><p><strong>【势能定义】</strong>势能是物体由于位置而具有的能量，它与物体的位置和相互作用力有关。势能通常用符号 <em>U</em> 表示</p>\n</li>\n<li><p><strong>【动能定义】</strong>动能是物体由于运动而具有的能量，它与物体的质量和速度有关。动能通常用符号 <em>T</em> 表示</p>\n</li>\n<li><p><strong>【系统总动能】</strong>摆杆动能需要考虑竖直方向具有速度的运动，除重力做功之外，支撑力也有做功</p>\n</li>\n<li><p><strong>【转动惯量正反】</strong>顺时针为正、逆时针为副</p>\n</li>\n<li><p>【<strong>线性化处理</strong>】如果两个变量的关系可以通过直线来表示，且满足以下两个条件：1.比例性，变量的变化是成比例的。2.叠加性，两个或多个影响因素的效应可以相加。</p>\n</li>\n<li><p><strong>【傅里叶变换】</strong>傅里叶变换的内涵，就是满足一定条件的函数可以表示成三角函数(正弦和&#x2F;或余弦函数)或者它们的积分的线性组合。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"控制工程学习笔记\"><a href=\"#控制工程学习笔记\" class=\"headerlink\" title=\"控制工程学习笔记\"></a>控制工程学习笔记</h1><ul>\n<li>【学习路径】动力学方程-拉普拉斯变换-PID-卡尔曼滤波-bode+奈奎斯特图</li>\n</ul>\n<h2 id=\"1-学习资料\"><a href=\"#1-学习资料\" class=\"headerlink\" title=\"1 学习资料\"></a><strong>1 学习资料</strong></h2><ul>\n<li>【怎么学习经典控制（结合MATLAB）】<a href=\"https://zhuanlan.zhihu.com/p/266048048\">https://zhuanlan.zhihu.com/p/266048048</a></li>\n<li>【物理量解释】<a href=\"https://blog.csdn.net/qq_38422317/article/details/108460482\">转动惯量到底是个什么物理量_转动惯量类比-CSDN博客</a></li>\n<li>【常用的微分，求导和积分公式大总结】<a href=\"https://blog.csdn.net/wfei101/article/details/82431442\">数学之美：常用的微分，求导和积分公式大总结_微积分求导公式-CSDN博客</a></li>\n<li>【倒立摆建模控制系统设计】<a href=\"https://blog.csdn.net/qq_42731705/article/details/122464642\">线性系统大作业——1.一阶倒立摆建模与控制系统设计_一阶倒立摆系统的建模仿真与控制-CSDN博客</a></li>\n<li>【小车动态模型设计Matlab】<a href=\"https://space.bilibili.com/1134403370/video\">J_H_Li投稿视频-J_H_Li视频分享-哔哩哔哩视频 (bilibili.com)</a></li>\n<li>【如何使用Typora编辑数学公式】[如何使用Typora编辑数学公式](<a href=\"https://www.cnblogs.com/YanQing1998/p/10986911.html#:~:text=%E6%89%93%E5%BC%80Typora%E9%80%89%E6%8B%A9%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9D%97\">https://www.cnblogs.com/YanQing1998/p/10986911.html#:~:text=打开Typora选择数学模块</a> 点击“段落”—&gt;“公式块”,快捷键Ctrl%2BShift%2Bm 在两个%24中间直接编辑公式)</li>\n<li>【由拉普拉斯变换到传递函数】<a href=\"https://zhuanlan.zhihu.com/p/146769901\">由拉普拉斯变换到传递函数 - 知乎 (zhihu.com)</a></li>\n<li>【如何给文科生解释傅里叶变换】<a href=\"https://zhuanlan.zhihu.com/p/48305950\">如何给文科生解释傅里叶变换？ - 知乎 (zhihu.com)</a></li>\n<li>【超级直观！！！】<a href=\"https://zhuanlan.zhihu.com/c_1041689010053341184\">直观の数学 - 知乎 (zhihu.com)</a></li>\n<li>【一阶倒立摆的PID控制和LQR控制】<a href=\"https://zhuanlan.zhihu.com/p/54071212\">一阶倒立摆的PID控制和LQR控制 - 知乎 (zhihu.com)</a></li>\n<li>【拉普拉斯变换】<a href=\"https://zh.wikipedia.org/wiki/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E5%8F%98%E6%8D%A2#\">拉普拉斯变换 - 维基百科，自由的百科全书 (wikipedia.org)</a></li>\n<li>【LQR算法】<a href=\"https://www.bilibili.com/video/BV1Ng4y1V7JQ?p=1\">https://www.bilibili.com/video/BV1Ng4y1V7JQ?p=1</a></li>\n<li>【simulink快捷键】<a href=\"https://blog.csdn.net/booksyhay/article/details/88129359\">Simulink建模与仿真学习笔记之常用快捷操作（快捷键）_simulink快捷键-CSDN博客</a></li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/07/25/K2CbOEa8XyjN9Io.png\" alt=\"image-20240131111616891.png\"></p>\n<h2 id=\"2-动力学方程求解\"><a href=\"#2-动力学方程求解\" class=\"headerlink\" title=\"2 动力学方程求解\"></a>2 动力学方程求解</h2><h3 id=\"2-1-什么是动力学方程\"><a href=\"#2-1-什么是动力学方程\" class=\"headerlink\" title=\"2.1 什么是动力学方程\"></a>2.1 什么是动力学方程</h3><ul>\n<li>动力学方程（Differential Equations of Motion），也称为运动方程，是描述物体运动的数学方程。这些方程通常是微分方程，用来描述物体的位置、速度、加速度等随时间的变化关系。<strong>动力学方程是经典力学的基础，它们揭示了物体受到的力和运动状态之间的关系。</strong></li>\n</ul>\n<h3 id=\"2-2-建立倒立摆动力学方程步骤\"><a href=\"#2-2-建立倒立摆动力学方程步骤\" class=\"headerlink\" title=\"2.2 建立倒立摆动力学方程步骤\"></a>2.2 建立倒立摆动力学方程步骤</h3><h4 id=\"①牛顿第二定律\"><a href=\"#①牛顿第二定律\" class=\"headerlink\" title=\"①牛顿第二定律\"></a><strong>①牛顿第二定律</strong></h4><ul>\n<li><strong>【确定世界坐标】</strong>世界坐标设立不同，求解结果不同</li>\n<li><strong>【确定反馈量、控制量和控制目标】</strong>获得需要设置的传感器和控制对象以及实现目标</li>\n<li><strong>【分析系统受力情况】</strong>分析系统位移和转动的情况以及所受外力情况</li>\n<li><strong>【罗列涉及物理量】</strong>罗列所有已知的量，并确定质心</li>\n<li><strong>【分析受力情况】</strong>根据位移和转动情况，列各个子系统的受力</li>\n<li><strong>【合并公式求出动力学方程】</strong>合并子系统受力，求出总系统的动力学方程</li>\n</ul>\n<h4 id=\"②拉格朗日定理\"><a href=\"#②拉格朗日定理\" class=\"headerlink\" title=\"②拉格朗日定理\"></a><strong>②拉格朗日定理</strong></h4><ul>\n<li><strong>【确定世界坐标】</strong>世界坐标设立不同，求解结果不同</li>\n<li><strong>【确定反馈量、控制量和控制目标】</strong>获得需要设置的传感器和控制对象以及实现目标</li>\n<li><strong>【分析系统受力情况】</strong>分析系统位移和转动的情况以及所受外力情况</li>\n<li><strong>【罗列涉及物理量】</strong>罗列所有已知的量，并确定质心</li>\n<li><strong>【列举拉格朗日方程】</strong>罗列拉格朗日表达式</li>\n<li><strong>【求解拉格朗日方程】</strong>多少个变量，求解多少个拉格朗日方程，分析所有系统的总动能（由于速度产生的动能，竖直方向也可能存在，除重力势能之外的所有力）、总势能（重力势能），并根据拉格朗日公式进行求解，求出动力学方程</li>\n<li><strong>【合并得出动力学方程】</strong>合并变量式，得到总系统的动力学方程</li>\n</ul>\n<h3 id=\"2-3-求解案例过程\"><a href=\"#2-3-求解案例过程\" class=\"headerlink\" title=\"2.3 求解案例过程\"></a>2.3 求解案例过程</h3><p><img src=\"https://s2.loli.net/2024/07/25/J3nAMrF8SgCkzZ5.png\" alt=\"image-20240202100715483.png\"></p>\n<h4 id=\"①牛顿第二定律求解\"><a href=\"#①牛顿第二定律求解\" class=\"headerlink\" title=\"①牛顿第二定律求解\"></a><strong>①牛顿第二定律求解</strong></h4><p><img src=\"https://s2.loli.net/2024/07/25/tJMUe8F5PoNnumL.png\" alt=\"image-20240203181633034.png\"></p>\n<h4 id=\"②拉格朗日定理-1\"><a href=\"#②拉格朗日定理-1\" class=\"headerlink\" title=\"②拉格朗日定理\"></a><strong>②拉格朗日定理</strong></h4><p><img src=\"https://s2.loli.net/2024/07/25/2Pg6zReWbKABMTu.png\" alt=\"image-20240203121952572.png\"></p>\n<h3 id=\"2-4-线性化处理\"><a href=\"#2-4-线性化处理\" class=\"headerlink\" title=\"2.4 线性化处理\"></a>2.4 线性化处理</h3><p>倒立摆的动力学方程通常是非线性的，但在某些应用中，为了进行控制设计或分析，可以对动力学方程进行线性化。线性化的目的是获得一个简化的线性系统，以便应用线性控制理论。</p>\n<p>小角度近似 sin(<em>θ</em>)≈<em>θ</em> 是一种在角度较小的情况下进行近似的数学技巧，它通常用于简化非线性系统的分析和求解。这个近似的合理性来源于正弦函数在零附近的泰勒级数展开。</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/VwCkGBTNlHUOQp1.png\" alt=\"image-20240203181307595.png\"></p>\n<p><img src=\"C:\\Users\\BMW\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240203181739601.png\" alt=\"image-20240203181739601\"></p>\n<h2 id=\"3-拉普拉斯变换求传递函数\"><a href=\"#3-拉普拉斯变换求传递函数\" class=\"headerlink\" title=\"3 拉普拉斯变换求传递函数\"></a>3 拉普拉斯变换求传递函数</h2><p>拉普拉斯变换是一种数学工具，用于将一个函数从时域（通常是时间域）转换到复频域。拉普拉斯变换的好处之一是它可以将微分方程转换成代数方程，从而简化了问题的求解。</p>\n<p>物理上可实现的信号总有相对应的拉氏变换（根据拉普拉斯的存在定义可得）</p>\n<p>拉普拉斯变换通常更适用于线性系统和线性微分方程。当面对非线性常微分方程时，使用拉普拉斯变换可能会变得更加困难，因为拉普拉斯变换的一些性质和简便性主要基于线性系统的性质，有时可以尝试将非线性问题线性化</p>\n<h3 id=\"3-1-拉氏变换定义\"><a href=\"#3-1-拉氏变换定义\" class=\"headerlink\" title=\"3.1 拉氏变换定义\"></a>3.1 拉氏变换定义</h3><p><img src=\"https://s2.loli.net/2024/07/25/FzdD1hvwgUOriQf.png\" alt=\"image-20240205132357835.png\"></p>\n<h3 id=\"3-2-拉氏逆变换定义\"><a href=\"#3-2-拉氏逆变换定义\" class=\"headerlink\" title=\"3.2 拉氏逆变换定义\"></a>3.2 拉氏逆变换定义</h3><p><img src=\"https://s2.loli.net/2024/07/25/Ikbf73zKeJ1VLSN.png\" alt=\"image-20240205132336647.png\"></p>\n<h3 id=\"3-3-拉普拉斯各类定理\"><a href=\"#3-3-拉普拉斯各类定理\" class=\"headerlink\" title=\"3.3 拉普拉斯各类定理\"></a>3.3 拉普拉斯各类定理</h3><p><img src=\"https://s2.loli.net/2024/07/25/LnF38Jj7eR1cE6o.png\" alt=\"image-20240205133019691.png\"></p>\n<h3 id=\"3-4-常用拉氏变换公式\"><a href=\"#3-4-常用拉氏变换公式\" class=\"headerlink\" title=\"3.4 常用拉氏变换公式\"></a>3.4 常用拉氏变换公式</h3><p><img src=\"https://s2.loli.net/2024/07/25/O9zh1y8KqlYjbDH.png\" alt=\"image-20240205171104326.png\"></p>\n<p><img src=\"https://s2.loli.net/2024/07/25/8LqcGhTnJNzOPIR.png\" alt=\"image-20240205171210118.png\"></p>\n<h3 id=\"3-5-复频域好处\"><a href=\"#3-5-复频域好处\" class=\"headerlink\" title=\"3.5 复频域好处\"></a>3.5 复频域好处</h3><ul>\n<li><p><strong>频率响应分析：</strong> 复频域提供了对系统对不同频率输入信号的响应更清晰的视角。通过分析系统在复频域中的行为，可以得到频率响应信息，即系统对不同频率成分的放大或衰减程度。这对于了解系统的频率特性和选择适当的滤波器或控制器非常有帮助。</p>\n</li>\n<li><p><strong>稳定性分析：</strong> 复频域分析对于评估系统的稳定性至关重要。通过观察系统在复频域中的极点（pole）和零点（zero），可以得知系统的稳定性信息。例如，在控制系统中，稳定性分析可以通过查看系统的极点位置来判断系统的稳定性和相应的性能。</p>\n</li>\n<li><p><strong>传递函数表示：</strong> 复频域中，系统的行为可以通过传递函数（Transfer Function）更简洁地表示。传递函数是输出与输入的拉普拉斯变换之比，对于线性时不变系统，它在复频域提供了对系统的完整描述。</p>\n</li>\n<li><p><strong>频域设计：</strong> 复频域分析对于在设计中选择合适的控制器或滤波器参数非常有用。通过在频域中分析性能要求和系统响应，可以更好地调整系统以满足指定的性能规范。</p>\n</li>\n<li><p><strong>去除时域中的复杂性：</strong> 在复频域中分析系统可能会使分析更简便。例如，复频域分析可以通过拉普拉斯变换将微分方程转换为代数方程，从而减少问题的复杂性。</p>\n</li>\n</ul>\n<h3 id=\"3-6-案例求解\"><a href=\"#3-6-案例求解\" class=\"headerlink\" title=\"3.6 案例求解\"></a>3.6 案例求解</h3><p><img src=\"https://s2.loli.net/2024/07/25/4LZuYacRPtHSbkW.png\" alt=\"image-20240205191534825.png\"></p>\n<h3 id=\"3-7-传递函数求解\"><a href=\"#3-7-传递函数求解\" class=\"headerlink\" title=\"3.7 传递函数求解\"></a>3.7 传递函数求解</h3><p><img src=\"https://s2.loli.net/2024/07/25/u8FnNmArfQo7HRS.png\" alt=\"image-20240210115216577.png\"></p>\n<h2 id=\"4-知识点总结\"><a href=\"#4-知识点总结\" class=\"headerlink\" title=\"4 知识点总结\"></a>4 知识点总结</h2><ul>\n<li><p><strong>【分析力】</strong>小车水平位移、竖直位移，摆杆转动、水平位移、竖直位移</p>\n</li>\n<li><p><strong>【拉格朗日建模】</strong>小车受到外力，摆杆没有受到外力，小车的变量是位移，摆杆的变量是角度，所以一共两个方程，摆杆右边等于零</p>\n</li>\n<li><p><strong>【线性化】</strong>消去三角函数，利用约等假设进行消除</p>\n</li>\n<li><p><strong>【转动惯量定义】</strong>转动惯量（也称为转动惯性、惯性矩）是描述物体对绕轴旋转的难度或惯性程度的物理量。它与物体的质量分布和形状有关，是旋转运动中的重要参量。</p>\n</li>\n<li><p><strong>【势能定义】</strong>势能是物体由于位置而具有的能量，它与物体的位置和相互作用力有关。势能通常用符号 <em>U</em> 表示</p>\n</li>\n<li><p><strong>【动能定义】</strong>动能是物体由于运动而具有的能量，它与物体的质量和速度有关。动能通常用符号 <em>T</em> 表示</p>\n</li>\n<li><p><strong>【系统总动能】</strong>摆杆动能需要考虑竖直方向具有速度的运动，除重力做功之外，支撑力也有做功</p>\n</li>\n<li><p><strong>【转动惯量正反】</strong>顺时针为正、逆时针为副</p>\n</li>\n<li><p>【<strong>线性化处理</strong>】如果两个变量的关系可以通过直线来表示，且满足以下两个条件：1.比例性，变量的变化是成比例的。2.叠加性，两个或多个影响因素的效应可以相加。</p>\n</li>\n<li><p><strong>【傅里叶变换】</strong>傅里叶变换的内涵，就是满足一定条件的函数可以表示成三角函数(正弦和&#x2F;或余弦函数)或者它们的积分的线性组合。</p>\n</li>\n</ul>\n"},{"title":"FOC无刷电机控制","date":"2024-04-14T16:00:00.000Z","_content":"\n# FOC无刷电机控制\n\n## 一、无刷电机基本理解\n\n基本的航模无刷电机结构图如下图所示，**分为前盖，中盖，后盖，磁铁，硅钢片，漆包线、轴承和转轴组成**。\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/1-1.png\" alt=\"无刷电机的组成\" style=\"zoom:50%;\" />\n\n### 1.可以直接把电机分为定子部分和转子部分：\n\n- **定子**就是有线圈绕组，固定不动的部分；\n- **转子**就是电机旋转的部分，用于输出电机的转动和扭矩。\n\n### 2.内外旋转类型区分：\n\n- **内转子无刷电机**就是转子在内部，轴进行旋转；\n- **外转子无刷电机**就是转子在外面，外壳进行旋转。\n\n- 而**直流无刷电机的驱动**，就是依靠**改变电机定子线圈的电流交变频率和波形，在定子周围形成磁场，驱动转子永磁体转动**，进而带动电机转起来。\n\n### 3.**无刷电机跟有刷电机的区别**\n\n- 顾名思义就是**无刷电机没有了有刷电机里的电刷**。因此它**不能够如同有刷电机那样采用机械结构就可以进行电流的换向**， 而是必须通过采用如MOS这样的器件实现**电子换向**。\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-2.png\" alt=\"2-2\" style=\"zoom: 33%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-4.png\" alt=\"2-4\" style=\"zoom: 33%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-5.png\" alt=\"2-5\" style=\"zoom: 50%;\" />\n\n- **对电机的控制实际上就是对MOS管开关规律的控制**。而MOS管的开关规律是需要用到单片机程序进行控制的，因此这就引出了我们的**FOC控制算法，FOC控制就是一种对电机运动模型进行抽象化和简化，进而有规律控制各个MOS管开关和通断的过程**。\n\n## 二、克拉克变换\n\n### 1.克拉克变换基本含义\n\n- 交替开关的MOS管可以实现电机的转动，而这些交替开关的MOS管是以极其快的速度在周期性进行的，把这些周期性的开启和关断过程联系起来，并且对其各个相进行单独观察，就可以得到三个相A、B、C的电流随时间变换的曲线，如下图所示，他们之间存在120°的相位差。换一个角度来思考此问题，实际上，我们只要能够**控制这个相位差为120°的sin状波形，就能够实现针对电机的控制**。\n\n![3.1-1](http://dengfoc.com/dengfoc/shouimage/3.1-1.png)\n\n- **克拉克变换，实际上就是降维解耦的过程，把难以辨明和控制的三相相位差120°电机波形降维为两维矢量**。\n\n- **第一就是把三相随时间变换的，相位差为120°的电流波形抽象化为三个间隔120°的矢量**。\n\n- **第二就是利用三角函数对矢量进行降维，降维到两个坐标轴**，从此复杂的三相变化问题就降解为了α-β坐标轴的坐标上的数值变化问题。\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/3.1-3.png\" alt=\"3.1-3\" style=\"zoom:50%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/3.1-4.png\" alt=\"3.1-4\" style=\"zoom:67%;\" />\n\n- 上图中，左边是我们把三相120度相位差的sin状波形抽象化为矢量之后的样子，而右边就是我们需要**把这三个矢量进行投影的坐标轴。只要我们把三个矢量都投影到坐标轴上，那么，一个三矢量问题就变成一个二维坐标平面问题**。\n\n### 2.克拉克变换推导公式\n\n- **克拉克变换的第一步，作投影**\n\n- 针对α-β坐标系中α轴，有：\n\n<img src=\"https://s2.loli.net/2024/07/25/YO6LurHIQkSfV21.png\" alt=\"image-20240318150726168.png\" style=\"zoom:50%;\" />\n\n- 针对α-β坐标系中β轴，有：\n\n<img src=\"https://s2.loli.net/2024/07/25/ZUyTqOcmRVtHSe7.png\" alt=\"image-20240318150741335.png\" style=\"zoom:50%;\" />\n\n- 把上面的投影结果列成矩阵形式，有：\n\n<img src=\"https://s2.loli.net/2024/07/25/xR4twW1ynvGp2ou.png\" alt=\"image-20240318150755362.png\" style=\"zoom:50%;\" />\n\n### 3.克拉克变换的等辐值形式\n\n- 何为等幅值变换？用α相电流输入1A电流的特例来举例，当电流输入时候，根据基尔霍夫电流定律（电路中任一个节点上，在任意时刻，流入节点的电流之和等于流出节点的电流之和，如下图），有：\n\n<img src=\"https://s2.loli.net/2024/07/25/fSHMDIEoRj4JsOl.png\" alt=\"image-20240318151006334.png\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/1bvRp6E8T3Q5dPk.png\" alt=\"image-20240318152249217.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/esquFgkWVyZpf4c.png\" alt=\"image-20240318152309335.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/58PAe2iML9I1uDW.png\" alt=\"image-20240319174421088.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/qxy9OB8GJH2frNj.png\" alt=\"image-20240319174945752.png\" style=\"zoom:50%;\" />\n\n- 在式子中，我们消去了变量Ic，这是因为由于基尔霍夫电流定律的存在，我们并不需要知道所有三相电流，我们只需要知道两相电流就能够求解得到另外一相的电流，反映在硬件上，**我们就可以省去一路的电流传感器！节省了成本！**\n\n### 4.克拉克逆变换\n\n<img src=\"https://s2.loli.net/2024/07/25/eYjA7Q6pOFBVcNo.png\" alt=\"image-20240319175252143.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/Rbtm5MOlFEc8k1d.png\" alt=\"image-20240319175403342.png\" style=\"zoom:50%;\" />\n\n### 5.克拉克变换总结\n\n- 克拉克变换首先将**三相电流转换成两维度的矢量电流**，因此我们就可以通过**控制两维度的矢量电流来表达三项电流的变换情况**，并且通过等幅值变换，我们就可以将**电流进行消项，之后又可以消去一路Ic，优化处理速度**；\n\n- 而克拉克逆变换的目的是我们通**过需求的两项矢量电流来反向求解三相电流，并且来控制无刷电机驱动。**\n\n## 三、帕克变换\n\n### 1.帕克变换基本定义\n\n- 通过克拉克变换之后，我们就将三相电路降阶至二维矢量电流，但是电流和电机旋转角度的关系是未知的，还需要将这个理论和旋转电机对应起来，也就是**建立电机旋转时的数学模型**，这就是帕克变换的目的。\n\n- 其实整个帕克变换的思路很简单，首先，我们把电机的定子t线圈上固定一个Iα−Iβ坐标系，这时候，我在坐标系的右边放上一个转子，如下图右边所示，如果此时转子被吸引且不动，那么在Iα−Iβ坐标系中就一定有一个Iα和Iβ值是能够对应转子现在的状态的\n\n![3.3-2](http://dengfoc.com/dengfoc/shouimage/3.3-2.png)\n\n![3.3-3](http://dengfoc.com/dengfoc/shouimage/3.3-3.png)\n\n### 2.帕克变换推导公式\n\n- 根据上图，可以推导Iα−Iβ坐标系于Iq−Id坐标系的关系，这也就是帕克变换：\n\n![image-20240320174459687.png](https://s2.loli.net/2024/07/25/fahwsKAl9RnDUr6.png)\n\n- 在实际的情况中，电角度是可以根据传感器求解得出，因此，我们只需要控制Iq和Id的电流，就可以控制无刷电机的旋转，而我们可以将Id设置成0，因此，我们只需要一个Iq的电流，就可以控制电机旋转。\n\n## 四、推导原理总结\n\n\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/3.4-1.png\" alt=\"3.4-1\" style=\"zoom:50%;\" />\n\n- **电机想要旋转，就需要三相电流相互作用，而三项电流可以通过克拉克变换转成二维的矢量，而这个二维的矢量通过和转子的电角度建立关系，即可得出控制的电流Iq（Id默认为0），因此我们仅仅只需要通过设定Iq就可以控制电机进行旋转。**\n\n## 五、电压形式转换\n\n- 因为单片机的控制都是**基于电压进行控制**，包括PWM的控制，也是通过控制电压进行设定，因此我们需要将电流转换成电压形式，**而电压和电流的转换可以直接等于，因为等号两边都需要除以电阻，可以直接消项。**\n\n<img src=\"https://s2.loli.net/2024/07/25/GQ3qP7uYbaWCotK.png\" alt=\"image-20240320180833702.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/ZwqigGLHyDB9tFb.png\" alt=\"image-20240320181038012.png\" style=\"zoom:50%;\" />\n\n## 六、电角度于机械角度\n\n<img src=\"https://s2.loli.net/2024/07/25/IqfPkovwQDlSTR9.png\" alt=\"image-20240320182308979.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/76QqI34TyP5rozm.png\" alt=\"image-20240320182250898.png\" style=\"zoom:50%;\" />\n\n- **极对数：是N极和S极的对数数量**\n\n- **电角度：电角度是定子电流矢量与转子磁极矢量之间的夹角**\n\n- **机械角度：电机旋转一圈的空间几何角度，旋转一圈为360度**\n- 如果只是刚刚的一级对电机，那么的机械角度转一圈，相位的一个周期是能够和机械角度一一对应的，此时电角度=机械角度；但是，如果是多级电机，那么机械角度转一圈，相位的周期可能是很多个。\n\n","source":"_posts/20240319ZYY-FOC无刷电机控制.md","raw":"---\ntitle: FOC无刷电机控制\ntag: 无刷电机控制\ndate: 2024-04-15\ncategories: 控制设计\n---\n\n# FOC无刷电机控制\n\n## 一、无刷电机基本理解\n\n基本的航模无刷电机结构图如下图所示，**分为前盖，中盖，后盖，磁铁，硅钢片，漆包线、轴承和转轴组成**。\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/1-1.png\" alt=\"无刷电机的组成\" style=\"zoom:50%;\" />\n\n### 1.可以直接把电机分为定子部分和转子部分：\n\n- **定子**就是有线圈绕组，固定不动的部分；\n- **转子**就是电机旋转的部分，用于输出电机的转动和扭矩。\n\n### 2.内外旋转类型区分：\n\n- **内转子无刷电机**就是转子在内部，轴进行旋转；\n- **外转子无刷电机**就是转子在外面，外壳进行旋转。\n\n- 而**直流无刷电机的驱动**，就是依靠**改变电机定子线圈的电流交变频率和波形，在定子周围形成磁场，驱动转子永磁体转动**，进而带动电机转起来。\n\n### 3.**无刷电机跟有刷电机的区别**\n\n- 顾名思义就是**无刷电机没有了有刷电机里的电刷**。因此它**不能够如同有刷电机那样采用机械结构就可以进行电流的换向**， 而是必须通过采用如MOS这样的器件实现**电子换向**。\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-2.png\" alt=\"2-2\" style=\"zoom: 33%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-4.png\" alt=\"2-4\" style=\"zoom: 33%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-5.png\" alt=\"2-5\" style=\"zoom: 50%;\" />\n\n- **对电机的控制实际上就是对MOS管开关规律的控制**。而MOS管的开关规律是需要用到单片机程序进行控制的，因此这就引出了我们的**FOC控制算法，FOC控制就是一种对电机运动模型进行抽象化和简化，进而有规律控制各个MOS管开关和通断的过程**。\n\n## 二、克拉克变换\n\n### 1.克拉克变换基本含义\n\n- 交替开关的MOS管可以实现电机的转动，而这些交替开关的MOS管是以极其快的速度在周期性进行的，把这些周期性的开启和关断过程联系起来，并且对其各个相进行单独观察，就可以得到三个相A、B、C的电流随时间变换的曲线，如下图所示，他们之间存在120°的相位差。换一个角度来思考此问题，实际上，我们只要能够**控制这个相位差为120°的sin状波形，就能够实现针对电机的控制**。\n\n![3.1-1](http://dengfoc.com/dengfoc/shouimage/3.1-1.png)\n\n- **克拉克变换，实际上就是降维解耦的过程，把难以辨明和控制的三相相位差120°电机波形降维为两维矢量**。\n\n- **第一就是把三相随时间变换的，相位差为120°的电流波形抽象化为三个间隔120°的矢量**。\n\n- **第二就是利用三角函数对矢量进行降维，降维到两个坐标轴**，从此复杂的三相变化问题就降解为了α-β坐标轴的坐标上的数值变化问题。\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/3.1-3.png\" alt=\"3.1-3\" style=\"zoom:50%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/3.1-4.png\" alt=\"3.1-4\" style=\"zoom:67%;\" />\n\n- 上图中，左边是我们把三相120度相位差的sin状波形抽象化为矢量之后的样子，而右边就是我们需要**把这三个矢量进行投影的坐标轴。只要我们把三个矢量都投影到坐标轴上，那么，一个三矢量问题就变成一个二维坐标平面问题**。\n\n### 2.克拉克变换推导公式\n\n- **克拉克变换的第一步，作投影**\n\n- 针对α-β坐标系中α轴，有：\n\n<img src=\"https://s2.loli.net/2024/07/25/YO6LurHIQkSfV21.png\" alt=\"image-20240318150726168.png\" style=\"zoom:50%;\" />\n\n- 针对α-β坐标系中β轴，有：\n\n<img src=\"https://s2.loli.net/2024/07/25/ZUyTqOcmRVtHSe7.png\" alt=\"image-20240318150741335.png\" style=\"zoom:50%;\" />\n\n- 把上面的投影结果列成矩阵形式，有：\n\n<img src=\"https://s2.loli.net/2024/07/25/xR4twW1ynvGp2ou.png\" alt=\"image-20240318150755362.png\" style=\"zoom:50%;\" />\n\n### 3.克拉克变换的等辐值形式\n\n- 何为等幅值变换？用α相电流输入1A电流的特例来举例，当电流输入时候，根据基尔霍夫电流定律（电路中任一个节点上，在任意时刻，流入节点的电流之和等于流出节点的电流之和，如下图），有：\n\n<img src=\"https://s2.loli.net/2024/07/25/fSHMDIEoRj4JsOl.png\" alt=\"image-20240318151006334.png\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/1bvRp6E8T3Q5dPk.png\" alt=\"image-20240318152249217.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/esquFgkWVyZpf4c.png\" alt=\"image-20240318152309335.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/58PAe2iML9I1uDW.png\" alt=\"image-20240319174421088.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/qxy9OB8GJH2frNj.png\" alt=\"image-20240319174945752.png\" style=\"zoom:50%;\" />\n\n- 在式子中，我们消去了变量Ic，这是因为由于基尔霍夫电流定律的存在，我们并不需要知道所有三相电流，我们只需要知道两相电流就能够求解得到另外一相的电流，反映在硬件上，**我们就可以省去一路的电流传感器！节省了成本！**\n\n### 4.克拉克逆变换\n\n<img src=\"https://s2.loli.net/2024/07/25/eYjA7Q6pOFBVcNo.png\" alt=\"image-20240319175252143.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/Rbtm5MOlFEc8k1d.png\" alt=\"image-20240319175403342.png\" style=\"zoom:50%;\" />\n\n### 5.克拉克变换总结\n\n- 克拉克变换首先将**三相电流转换成两维度的矢量电流**，因此我们就可以通过**控制两维度的矢量电流来表达三项电流的变换情况**，并且通过等幅值变换，我们就可以将**电流进行消项，之后又可以消去一路Ic，优化处理速度**；\n\n- 而克拉克逆变换的目的是我们通**过需求的两项矢量电流来反向求解三相电流，并且来控制无刷电机驱动。**\n\n## 三、帕克变换\n\n### 1.帕克变换基本定义\n\n- 通过克拉克变换之后，我们就将三相电路降阶至二维矢量电流，但是电流和电机旋转角度的关系是未知的，还需要将这个理论和旋转电机对应起来，也就是**建立电机旋转时的数学模型**，这就是帕克变换的目的。\n\n- 其实整个帕克变换的思路很简单，首先，我们把电机的定子t线圈上固定一个Iα−Iβ坐标系，这时候，我在坐标系的右边放上一个转子，如下图右边所示，如果此时转子被吸引且不动，那么在Iα−Iβ坐标系中就一定有一个Iα和Iβ值是能够对应转子现在的状态的\n\n![3.3-2](http://dengfoc.com/dengfoc/shouimage/3.3-2.png)\n\n![3.3-3](http://dengfoc.com/dengfoc/shouimage/3.3-3.png)\n\n### 2.帕克变换推导公式\n\n- 根据上图，可以推导Iα−Iβ坐标系于Iq−Id坐标系的关系，这也就是帕克变换：\n\n![image-20240320174459687.png](https://s2.loli.net/2024/07/25/fahwsKAl9RnDUr6.png)\n\n- 在实际的情况中，电角度是可以根据传感器求解得出，因此，我们只需要控制Iq和Id的电流，就可以控制无刷电机的旋转，而我们可以将Id设置成0，因此，我们只需要一个Iq的电流，就可以控制电机旋转。\n\n## 四、推导原理总结\n\n\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/3.4-1.png\" alt=\"3.4-1\" style=\"zoom:50%;\" />\n\n- **电机想要旋转，就需要三相电流相互作用，而三项电流可以通过克拉克变换转成二维的矢量，而这个二维的矢量通过和转子的电角度建立关系，即可得出控制的电流Iq（Id默认为0），因此我们仅仅只需要通过设定Iq就可以控制电机进行旋转。**\n\n## 五、电压形式转换\n\n- 因为单片机的控制都是**基于电压进行控制**，包括PWM的控制，也是通过控制电压进行设定，因此我们需要将电流转换成电压形式，**而电压和电流的转换可以直接等于，因为等号两边都需要除以电阻，可以直接消项。**\n\n<img src=\"https://s2.loli.net/2024/07/25/GQ3qP7uYbaWCotK.png\" alt=\"image-20240320180833702.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/ZwqigGLHyDB9tFb.png\" alt=\"image-20240320181038012.png\" style=\"zoom:50%;\" />\n\n## 六、电角度于机械角度\n\n<img src=\"https://s2.loli.net/2024/07/25/IqfPkovwQDlSTR9.png\" alt=\"image-20240320182308979.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/76QqI34TyP5rozm.png\" alt=\"image-20240320182250898.png\" style=\"zoom:50%;\" />\n\n- **极对数：是N极和S极的对数数量**\n\n- **电角度：电角度是定子电流矢量与转子磁极矢量之间的夹角**\n\n- **机械角度：电机旋转一圈的空间几何角度，旋转一圈为360度**\n- 如果只是刚刚的一级对电机，那么的机械角度转一圈，相位的一个周期是能够和机械角度一一对应的，此时电角度=机械角度；但是，如果是多级电机，那么机械角度转一圈，相位的周期可能是很多个。\n\n","slug":"20240319ZYY-FOC无刷电机控制","published":1,"updated":"2024-07-26T09:54:30.133Z","_id":"clz1edk9s000ax8uw4jdp64ns","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"FOC无刷电机控制\"><a href=\"#FOC无刷电机控制\" class=\"headerlink\" title=\"FOC无刷电机控制\"></a>FOC无刷电机控制</h1><h2 id=\"一、无刷电机基本理解\"><a href=\"#一、无刷电机基本理解\" class=\"headerlink\" title=\"一、无刷电机基本理解\"></a>一、无刷电机基本理解</h2><p>基本的航模无刷电机结构图如下图所示，<strong>分为前盖，中盖，后盖，磁铁，硅钢片，漆包线、轴承和转轴组成</strong>。</p>\n<img src=\"http://dengfoc.com/dengfoc/shouimage/1-1.png\" alt=\"无刷电机的组成\" style=\"zoom:50%;\" />\n\n<h3 id=\"1-可以直接把电机分为定子部分和转子部分：\"><a href=\"#1-可以直接把电机分为定子部分和转子部分：\" class=\"headerlink\" title=\"1.可以直接把电机分为定子部分和转子部分：\"></a>1.可以直接把电机分为定子部分和转子部分：</h3><ul>\n<li><strong>定子</strong>就是有线圈绕组，固定不动的部分；</li>\n<li><strong>转子</strong>就是电机旋转的部分，用于输出电机的转动和扭矩。</li>\n</ul>\n<h3 id=\"2-内外旋转类型区分：\"><a href=\"#2-内外旋转类型区分：\" class=\"headerlink\" title=\"2.内外旋转类型区分：\"></a>2.内外旋转类型区分：</h3><ul>\n<li><p><strong>内转子无刷电机</strong>就是转子在内部，轴进行旋转；</p>\n</li>\n<li><p><strong>外转子无刷电机</strong>就是转子在外面，外壳进行旋转。</p>\n</li>\n<li><p>而<strong>直流无刷电机的驱动</strong>，就是依靠<strong>改变电机定子线圈的电流交变频率和波形，在定子周围形成磁场，驱动转子永磁体转动</strong>，进而带动电机转起来。</p>\n</li>\n</ul>\n<h3 id=\"3-无刷电机跟有刷电机的区别\"><a href=\"#3-无刷电机跟有刷电机的区别\" class=\"headerlink\" title=\"3.无刷电机跟有刷电机的区别\"></a>3.<strong>无刷电机跟有刷电机的区别</strong></h3><ul>\n<li>顾名思义就是<strong>无刷电机没有了有刷电机里的电刷</strong>。因此它<strong>不能够如同有刷电机那样采用机械结构就可以进行电流的换向</strong>， 而是必须通过采用如MOS这样的器件实现<strong>电子换向</strong>。</li>\n</ul>\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-2.png\" alt=\"2-2\" style=\"zoom: 33%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-4.png\" alt=\"2-4\" style=\"zoom: 33%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-5.png\" alt=\"2-5\" style=\"zoom: 50%;\" />\n\n<ul>\n<li><strong>对电机的控制实际上就是对MOS管开关规律的控制</strong>。而MOS管的开关规律是需要用到单片机程序进行控制的，因此这就引出了我们的<strong>FOC控制算法，FOC控制就是一种对电机运动模型进行抽象化和简化，进而有规律控制各个MOS管开关和通断的过程</strong>。</li>\n</ul>\n<h2 id=\"二、克拉克变换\"><a href=\"#二、克拉克变换\" class=\"headerlink\" title=\"二、克拉克变换\"></a>二、克拉克变换</h2><h3 id=\"1-克拉克变换基本含义\"><a href=\"#1-克拉克变换基本含义\" class=\"headerlink\" title=\"1.克拉克变换基本含义\"></a>1.克拉克变换基本含义</h3><ul>\n<li>交替开关的MOS管可以实现电机的转动，而这些交替开关的MOS管是以极其快的速度在周期性进行的，把这些周期性的开启和关断过程联系起来，并且对其各个相进行单独观察，就可以得到三个相A、B、C的电流随时间变换的曲线，如下图所示，他们之间存在120°的相位差。换一个角度来思考此问题，实际上，我们只要能够<strong>控制这个相位差为120°的sin状波形，就能够实现针对电机的控制</strong>。</li>\n</ul>\n<p><img src=\"http://dengfoc.com/dengfoc/shouimage/3.1-1.png\" alt=\"3.1-1\"></p>\n<ul>\n<li><p><strong>克拉克变换，实际上就是降维解耦的过程，把难以辨明和控制的三相相位差120°电机波形降维为两维矢量</strong>。</p>\n</li>\n<li><p><strong>第一就是把三相随时间变换的，相位差为120°的电流波形抽象化为三个间隔120°的矢量</strong>。</p>\n</li>\n<li><p><strong>第二就是利用三角函数对矢量进行降维，降维到两个坐标轴</strong>，从此复杂的三相变化问题就降解为了α-β坐标轴的坐标上的数值变化问题。</p>\n</li>\n</ul>\n<img src=\"http://dengfoc.com/dengfoc/shouimage/3.1-3.png\" alt=\"3.1-3\" style=\"zoom:50%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/3.1-4.png\" alt=\"3.1-4\" style=\"zoom:67%;\" />\n\n<ul>\n<li>上图中，左边是我们把三相120度相位差的sin状波形抽象化为矢量之后的样子，而右边就是我们需要<strong>把这三个矢量进行投影的坐标轴。只要我们把三个矢量都投影到坐标轴上，那么，一个三矢量问题就变成一个二维坐标平面问题</strong>。</li>\n</ul>\n<h3 id=\"2-克拉克变换推导公式\"><a href=\"#2-克拉克变换推导公式\" class=\"headerlink\" title=\"2.克拉克变换推导公式\"></a>2.克拉克变换推导公式</h3><ul>\n<li><p><strong>克拉克变换的第一步，作投影</strong></p>\n</li>\n<li><p>针对α-β坐标系中α轴，有：</p>\n</li>\n</ul>\n<img src=\"https://s2.loli.net/2024/07/25/YO6LurHIQkSfV21.png\" alt=\"image-20240318150726168.png\" style=\"zoom:50%;\" />\n\n<ul>\n<li>针对α-β坐标系中β轴，有：</li>\n</ul>\n<img src=\"https://s2.loli.net/2024/07/25/ZUyTqOcmRVtHSe7.png\" alt=\"image-20240318150741335.png\" style=\"zoom:50%;\" />\n\n<ul>\n<li>把上面的投影结果列成矩阵形式，有：</li>\n</ul>\n<img src=\"https://s2.loli.net/2024/07/25/xR4twW1ynvGp2ou.png\" alt=\"image-20240318150755362.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"3-克拉克变换的等辐值形式\"><a href=\"#3-克拉克变换的等辐值形式\" class=\"headerlink\" title=\"3.克拉克变换的等辐值形式\"></a>3.克拉克变换的等辐值形式</h3><ul>\n<li>何为等幅值变换？用α相电流输入1A电流的特例来举例，当电流输入时候，根据基尔霍夫电流定律（电路中任一个节点上，在任意时刻，流入节点的电流之和等于流出节点的电流之和，如下图），有：</li>\n</ul>\n<img src=\"https://s2.loli.net/2024/07/25/fSHMDIEoRj4JsOl.png\" alt=\"image-20240318151006334.png\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/1bvRp6E8T3Q5dPk.png\" alt=\"image-20240318152249217.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/esquFgkWVyZpf4c.png\" alt=\"image-20240318152309335.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/58PAe2iML9I1uDW.png\" alt=\"image-20240319174421088.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/qxy9OB8GJH2frNj.png\" alt=\"image-20240319174945752.png\" style=\"zoom:50%;\" />\n\n<ul>\n<li>在式子中，我们消去了变量Ic，这是因为由于基尔霍夫电流定律的存在，我们并不需要知道所有三相电流，我们只需要知道两相电流就能够求解得到另外一相的电流，反映在硬件上，<strong>我们就可以省去一路的电流传感器！节省了成本！</strong></li>\n</ul>\n<h3 id=\"4-克拉克逆变换\"><a href=\"#4-克拉克逆变换\" class=\"headerlink\" title=\"4.克拉克逆变换\"></a>4.克拉克逆变换</h3><img src=\"https://s2.loli.net/2024/07/25/eYjA7Q6pOFBVcNo.png\" alt=\"image-20240319175252143.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/Rbtm5MOlFEc8k1d.png\" alt=\"image-20240319175403342.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"5-克拉克变换总结\"><a href=\"#5-克拉克变换总结\" class=\"headerlink\" title=\"5.克拉克变换总结\"></a>5.克拉克变换总结</h3><ul>\n<li><p>克拉克变换首先将<strong>三相电流转换成两维度的矢量电流</strong>，因此我们就可以通过<strong>控制两维度的矢量电流来表达三项电流的变换情况</strong>，并且通过等幅值变换，我们就可以将<strong>电流进行消项，之后又可以消去一路Ic，优化处理速度</strong>；</p>\n</li>\n<li><p>而克拉克逆变换的目的是我们通<strong>过需求的两项矢量电流来反向求解三相电流，并且来控制无刷电机驱动。</strong></p>\n</li>\n</ul>\n<h2 id=\"三、帕克变换\"><a href=\"#三、帕克变换\" class=\"headerlink\" title=\"三、帕克变换\"></a>三、帕克变换</h2><h3 id=\"1-帕克变换基本定义\"><a href=\"#1-帕克变换基本定义\" class=\"headerlink\" title=\"1.帕克变换基本定义\"></a>1.帕克变换基本定义</h3><ul>\n<li><p>通过克拉克变换之后，我们就将三相电路降阶至二维矢量电流，但是电流和电机旋转角度的关系是未知的，还需要将这个理论和旋转电机对应起来，也就是<strong>建立电机旋转时的数学模型</strong>，这就是帕克变换的目的。</p>\n</li>\n<li><p>其实整个帕克变换的思路很简单，首先，我们把电机的定子t线圈上固定一个Iα−Iβ坐标系，这时候，我在坐标系的右边放上一个转子，如下图右边所示，如果此时转子被吸引且不动，那么在Iα−Iβ坐标系中就一定有一个Iα和Iβ值是能够对应转子现在的状态的</p>\n</li>\n</ul>\n<p><img src=\"http://dengfoc.com/dengfoc/shouimage/3.3-2.png\" alt=\"3.3-2\"></p>\n<p><img src=\"http://dengfoc.com/dengfoc/shouimage/3.3-3.png\" alt=\"3.3-3\"></p>\n<h3 id=\"2-帕克变换推导公式\"><a href=\"#2-帕克变换推导公式\" class=\"headerlink\" title=\"2.帕克变换推导公式\"></a>2.帕克变换推导公式</h3><ul>\n<li>根据上图，可以推导Iα−Iβ坐标系于Iq−Id坐标系的关系，这也就是帕克变换：</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/07/25/fahwsKAl9RnDUr6.png\" alt=\"image-20240320174459687.png\"></p>\n<ul>\n<li>在实际的情况中，电角度是可以根据传感器求解得出，因此，我们只需要控制Iq和Id的电流，就可以控制无刷电机的旋转，而我们可以将Id设置成0，因此，我们只需要一个Iq的电流，就可以控制电机旋转。</li>\n</ul>\n<h2 id=\"四、推导原理总结\"><a href=\"#四、推导原理总结\" class=\"headerlink\" title=\"四、推导原理总结\"></a>四、推导原理总结</h2><img src=\"http://dengfoc.com/dengfoc/shouimage/3.4-1.png\" alt=\"3.4-1\" style=\"zoom:50%;\" />\n\n<ul>\n<li><strong>电机想要旋转，就需要三相电流相互作用，而三项电流可以通过克拉克变换转成二维的矢量，而这个二维的矢量通过和转子的电角度建立关系，即可得出控制的电流Iq（Id默认为0），因此我们仅仅只需要通过设定Iq就可以控制电机进行旋转。</strong></li>\n</ul>\n<h2 id=\"五、电压形式转换\"><a href=\"#五、电压形式转换\" class=\"headerlink\" title=\"五、电压形式转换\"></a>五、电压形式转换</h2><ul>\n<li>因为单片机的控制都是<strong>基于电压进行控制</strong>，包括PWM的控制，也是通过控制电压进行设定，因此我们需要将电流转换成电压形式，<strong>而电压和电流的转换可以直接等于，因为等号两边都需要除以电阻，可以直接消项。</strong></li>\n</ul>\n<img src=\"https://s2.loli.net/2024/07/25/GQ3qP7uYbaWCotK.png\" alt=\"image-20240320180833702.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/ZwqigGLHyDB9tFb.png\" alt=\"image-20240320181038012.png\" style=\"zoom:50%;\" />\n\n<h2 id=\"六、电角度于机械角度\"><a href=\"#六、电角度于机械角度\" class=\"headerlink\" title=\"六、电角度于机械角度\"></a>六、电角度于机械角度</h2><img src=\"https://s2.loli.net/2024/07/25/IqfPkovwQDlSTR9.png\" alt=\"image-20240320182308979.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/76QqI34TyP5rozm.png\" alt=\"image-20240320182250898.png\" style=\"zoom:50%;\" />\n\n<ul>\n<li><p><strong>极对数：是N极和S极的对数数量</strong></p>\n</li>\n<li><p><strong>电角度：电角度是定子电流矢量与转子磁极矢量之间的夹角</strong></p>\n</li>\n<li><p><strong>机械角度：电机旋转一圈的空间几何角度，旋转一圈为360度</strong></p>\n</li>\n<li><p>如果只是刚刚的一级对电机，那么的机械角度转一圈，相位的一个周期是能够和机械角度一一对应的，此时电角度&#x3D;机械角度；但是，如果是多级电机，那么机械角度转一圈，相位的周期可能是很多个。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"FOC无刷电机控制\"><a href=\"#FOC无刷电机控制\" class=\"headerlink\" title=\"FOC无刷电机控制\"></a>FOC无刷电机控制</h1><h2 id=\"一、无刷电机基本理解\"><a href=\"#一、无刷电机基本理解\" class=\"headerlink\" title=\"一、无刷电机基本理解\"></a>一、无刷电机基本理解</h2><p>基本的航模无刷电机结构图如下图所示，<strong>分为前盖，中盖，后盖，磁铁，硅钢片，漆包线、轴承和转轴组成</strong>。</p>\n<img src=\"http://dengfoc.com/dengfoc/shouimage/1-1.png\" alt=\"无刷电机的组成\" style=\"zoom:50%;\" />\n\n<h3 id=\"1-可以直接把电机分为定子部分和转子部分：\"><a href=\"#1-可以直接把电机分为定子部分和转子部分：\" class=\"headerlink\" title=\"1.可以直接把电机分为定子部分和转子部分：\"></a>1.可以直接把电机分为定子部分和转子部分：</h3><ul>\n<li><strong>定子</strong>就是有线圈绕组，固定不动的部分；</li>\n<li><strong>转子</strong>就是电机旋转的部分，用于输出电机的转动和扭矩。</li>\n</ul>\n<h3 id=\"2-内外旋转类型区分：\"><a href=\"#2-内外旋转类型区分：\" class=\"headerlink\" title=\"2.内外旋转类型区分：\"></a>2.内外旋转类型区分：</h3><ul>\n<li><p><strong>内转子无刷电机</strong>就是转子在内部，轴进行旋转；</p>\n</li>\n<li><p><strong>外转子无刷电机</strong>就是转子在外面，外壳进行旋转。</p>\n</li>\n<li><p>而<strong>直流无刷电机的驱动</strong>，就是依靠<strong>改变电机定子线圈的电流交变频率和波形，在定子周围形成磁场，驱动转子永磁体转动</strong>，进而带动电机转起来。</p>\n</li>\n</ul>\n<h3 id=\"3-无刷电机跟有刷电机的区别\"><a href=\"#3-无刷电机跟有刷电机的区别\" class=\"headerlink\" title=\"3.无刷电机跟有刷电机的区别\"></a>3.<strong>无刷电机跟有刷电机的区别</strong></h3><ul>\n<li>顾名思义就是<strong>无刷电机没有了有刷电机里的电刷</strong>。因此它<strong>不能够如同有刷电机那样采用机械结构就可以进行电流的换向</strong>， 而是必须通过采用如MOS这样的器件实现<strong>电子换向</strong>。</li>\n</ul>\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-2.png\" alt=\"2-2\" style=\"zoom: 33%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-4.png\" alt=\"2-4\" style=\"zoom: 33%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/2-5.png\" alt=\"2-5\" style=\"zoom: 50%;\" />\n\n<ul>\n<li><strong>对电机的控制实际上就是对MOS管开关规律的控制</strong>。而MOS管的开关规律是需要用到单片机程序进行控制的，因此这就引出了我们的<strong>FOC控制算法，FOC控制就是一种对电机运动模型进行抽象化和简化，进而有规律控制各个MOS管开关和通断的过程</strong>。</li>\n</ul>\n<h2 id=\"二、克拉克变换\"><a href=\"#二、克拉克变换\" class=\"headerlink\" title=\"二、克拉克变换\"></a>二、克拉克变换</h2><h3 id=\"1-克拉克变换基本含义\"><a href=\"#1-克拉克变换基本含义\" class=\"headerlink\" title=\"1.克拉克变换基本含义\"></a>1.克拉克变换基本含义</h3><ul>\n<li>交替开关的MOS管可以实现电机的转动，而这些交替开关的MOS管是以极其快的速度在周期性进行的，把这些周期性的开启和关断过程联系起来，并且对其各个相进行单独观察，就可以得到三个相A、B、C的电流随时间变换的曲线，如下图所示，他们之间存在120°的相位差。换一个角度来思考此问题，实际上，我们只要能够<strong>控制这个相位差为120°的sin状波形，就能够实现针对电机的控制</strong>。</li>\n</ul>\n<p><img src=\"http://dengfoc.com/dengfoc/shouimage/3.1-1.png\" alt=\"3.1-1\"></p>\n<ul>\n<li><p><strong>克拉克变换，实际上就是降维解耦的过程，把难以辨明和控制的三相相位差120°电机波形降维为两维矢量</strong>。</p>\n</li>\n<li><p><strong>第一就是把三相随时间变换的，相位差为120°的电流波形抽象化为三个间隔120°的矢量</strong>。</p>\n</li>\n<li><p><strong>第二就是利用三角函数对矢量进行降维，降维到两个坐标轴</strong>，从此复杂的三相变化问题就降解为了α-β坐标轴的坐标上的数值变化问题。</p>\n</li>\n</ul>\n<img src=\"http://dengfoc.com/dengfoc/shouimage/3.1-3.png\" alt=\"3.1-3\" style=\"zoom:50%;\" />\n\n<img src=\"http://dengfoc.com/dengfoc/shouimage/3.1-4.png\" alt=\"3.1-4\" style=\"zoom:67%;\" />\n\n<ul>\n<li>上图中，左边是我们把三相120度相位差的sin状波形抽象化为矢量之后的样子，而右边就是我们需要<strong>把这三个矢量进行投影的坐标轴。只要我们把三个矢量都投影到坐标轴上，那么，一个三矢量问题就变成一个二维坐标平面问题</strong>。</li>\n</ul>\n<h3 id=\"2-克拉克变换推导公式\"><a href=\"#2-克拉克变换推导公式\" class=\"headerlink\" title=\"2.克拉克变换推导公式\"></a>2.克拉克变换推导公式</h3><ul>\n<li><p><strong>克拉克变换的第一步，作投影</strong></p>\n</li>\n<li><p>针对α-β坐标系中α轴，有：</p>\n</li>\n</ul>\n<img src=\"https://s2.loli.net/2024/07/25/YO6LurHIQkSfV21.png\" alt=\"image-20240318150726168.png\" style=\"zoom:50%;\" />\n\n<ul>\n<li>针对α-β坐标系中β轴，有：</li>\n</ul>\n<img src=\"https://s2.loli.net/2024/07/25/ZUyTqOcmRVtHSe7.png\" alt=\"image-20240318150741335.png\" style=\"zoom:50%;\" />\n\n<ul>\n<li>把上面的投影结果列成矩阵形式，有：</li>\n</ul>\n<img src=\"https://s2.loli.net/2024/07/25/xR4twW1ynvGp2ou.png\" alt=\"image-20240318150755362.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"3-克拉克变换的等辐值形式\"><a href=\"#3-克拉克变换的等辐值形式\" class=\"headerlink\" title=\"3.克拉克变换的等辐值形式\"></a>3.克拉克变换的等辐值形式</h3><ul>\n<li>何为等幅值变换？用α相电流输入1A电流的特例来举例，当电流输入时候，根据基尔霍夫电流定律（电路中任一个节点上，在任意时刻，流入节点的电流之和等于流出节点的电流之和，如下图），有：</li>\n</ul>\n<img src=\"https://s2.loli.net/2024/07/25/fSHMDIEoRj4JsOl.png\" alt=\"image-20240318151006334.png\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/1bvRp6E8T3Q5dPk.png\" alt=\"image-20240318152249217.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/esquFgkWVyZpf4c.png\" alt=\"image-20240318152309335.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/58PAe2iML9I1uDW.png\" alt=\"image-20240319174421088.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/qxy9OB8GJH2frNj.png\" alt=\"image-20240319174945752.png\" style=\"zoom:50%;\" />\n\n<ul>\n<li>在式子中，我们消去了变量Ic，这是因为由于基尔霍夫电流定律的存在，我们并不需要知道所有三相电流，我们只需要知道两相电流就能够求解得到另外一相的电流，反映在硬件上，<strong>我们就可以省去一路的电流传感器！节省了成本！</strong></li>\n</ul>\n<h3 id=\"4-克拉克逆变换\"><a href=\"#4-克拉克逆变换\" class=\"headerlink\" title=\"4.克拉克逆变换\"></a>4.克拉克逆变换</h3><img src=\"https://s2.loli.net/2024/07/25/eYjA7Q6pOFBVcNo.png\" alt=\"image-20240319175252143.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/Rbtm5MOlFEc8k1d.png\" alt=\"image-20240319175403342.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"5-克拉克变换总结\"><a href=\"#5-克拉克变换总结\" class=\"headerlink\" title=\"5.克拉克变换总结\"></a>5.克拉克变换总结</h3><ul>\n<li><p>克拉克变换首先将<strong>三相电流转换成两维度的矢量电流</strong>，因此我们就可以通过<strong>控制两维度的矢量电流来表达三项电流的变换情况</strong>，并且通过等幅值变换，我们就可以将<strong>电流进行消项，之后又可以消去一路Ic，优化处理速度</strong>；</p>\n</li>\n<li><p>而克拉克逆变换的目的是我们通<strong>过需求的两项矢量电流来反向求解三相电流，并且来控制无刷电机驱动。</strong></p>\n</li>\n</ul>\n<h2 id=\"三、帕克变换\"><a href=\"#三、帕克变换\" class=\"headerlink\" title=\"三、帕克变换\"></a>三、帕克变换</h2><h3 id=\"1-帕克变换基本定义\"><a href=\"#1-帕克变换基本定义\" class=\"headerlink\" title=\"1.帕克变换基本定义\"></a>1.帕克变换基本定义</h3><ul>\n<li><p>通过克拉克变换之后，我们就将三相电路降阶至二维矢量电流，但是电流和电机旋转角度的关系是未知的，还需要将这个理论和旋转电机对应起来，也就是<strong>建立电机旋转时的数学模型</strong>，这就是帕克变换的目的。</p>\n</li>\n<li><p>其实整个帕克变换的思路很简单，首先，我们把电机的定子t线圈上固定一个Iα−Iβ坐标系，这时候，我在坐标系的右边放上一个转子，如下图右边所示，如果此时转子被吸引且不动，那么在Iα−Iβ坐标系中就一定有一个Iα和Iβ值是能够对应转子现在的状态的</p>\n</li>\n</ul>\n<p><img src=\"http://dengfoc.com/dengfoc/shouimage/3.3-2.png\" alt=\"3.3-2\"></p>\n<p><img src=\"http://dengfoc.com/dengfoc/shouimage/3.3-3.png\" alt=\"3.3-3\"></p>\n<h3 id=\"2-帕克变换推导公式\"><a href=\"#2-帕克变换推导公式\" class=\"headerlink\" title=\"2.帕克变换推导公式\"></a>2.帕克变换推导公式</h3><ul>\n<li>根据上图，可以推导Iα−Iβ坐标系于Iq−Id坐标系的关系，这也就是帕克变换：</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/07/25/fahwsKAl9RnDUr6.png\" alt=\"image-20240320174459687.png\"></p>\n<ul>\n<li>在实际的情况中，电角度是可以根据传感器求解得出，因此，我们只需要控制Iq和Id的电流，就可以控制无刷电机的旋转，而我们可以将Id设置成0，因此，我们只需要一个Iq的电流，就可以控制电机旋转。</li>\n</ul>\n<h2 id=\"四、推导原理总结\"><a href=\"#四、推导原理总结\" class=\"headerlink\" title=\"四、推导原理总结\"></a>四、推导原理总结</h2><img src=\"http://dengfoc.com/dengfoc/shouimage/3.4-1.png\" alt=\"3.4-1\" style=\"zoom:50%;\" />\n\n<ul>\n<li><strong>电机想要旋转，就需要三相电流相互作用，而三项电流可以通过克拉克变换转成二维的矢量，而这个二维的矢量通过和转子的电角度建立关系，即可得出控制的电流Iq（Id默认为0），因此我们仅仅只需要通过设定Iq就可以控制电机进行旋转。</strong></li>\n</ul>\n<h2 id=\"五、电压形式转换\"><a href=\"#五、电压形式转换\" class=\"headerlink\" title=\"五、电压形式转换\"></a>五、电压形式转换</h2><ul>\n<li>因为单片机的控制都是<strong>基于电压进行控制</strong>，包括PWM的控制，也是通过控制电压进行设定，因此我们需要将电流转换成电压形式，<strong>而电压和电流的转换可以直接等于，因为等号两边都需要除以电阻，可以直接消项。</strong></li>\n</ul>\n<img src=\"https://s2.loli.net/2024/07/25/GQ3qP7uYbaWCotK.png\" alt=\"image-20240320180833702.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/ZwqigGLHyDB9tFb.png\" alt=\"image-20240320181038012.png\" style=\"zoom:50%;\" />\n\n<h2 id=\"六、电角度于机械角度\"><a href=\"#六、电角度于机械角度\" class=\"headerlink\" title=\"六、电角度于机械角度\"></a>六、电角度于机械角度</h2><img src=\"https://s2.loli.net/2024/07/25/IqfPkovwQDlSTR9.png\" alt=\"image-20240320182308979.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://s2.loli.net/2024/07/25/76QqI34TyP5rozm.png\" alt=\"image-20240320182250898.png\" style=\"zoom:50%;\" />\n\n<ul>\n<li><p><strong>极对数：是N极和S极的对数数量</strong></p>\n</li>\n<li><p><strong>电角度：电角度是定子电流矢量与转子磁极矢量之间的夹角</strong></p>\n</li>\n<li><p><strong>机械角度：电机旋转一圈的空间几何角度，旋转一圈为360度</strong></p>\n</li>\n<li><p>如果只是刚刚的一级对电机，那么的机械角度转一圈，相位的一个周期是能够和机械角度一一对应的，此时电角度&#x3D;机械角度；但是，如果是多级电机，那么机械角度转一圈，相位的周期可能是很多个。</p>\n</li>\n</ul>\n"},{"title":"Hi3861开发","date":"2024-05-16T16:00:00.000Z","_content":"\n# Hi3861开发\n\n## 一、学习资料\n\n- 【UART串口使用】[HI3861学习笔记（18）——UART串口使用_hi3861 uart-CSDN博客](https://blog.csdn.net/qq_36347513/article/details/121603716)\n\n- 【开发环境搭建】[2.1 Pegasus开发环境搭建.md · HiSpark/HiSpark_NICU2023 - Gitee.com](https://gitee.com/HiSpark/HiSpark_NICU2023/blob/master/2.1 Pegasus开发环境搭建.md)\n\n- 【入门demo】[编写 Hello World”程序 (openharmony.cn)](https://docs.openharmony.cn/pages/v4.0/zh-cn/device-dev/quick-start/quickstart-ide-3861-helloworld.md)\n\n- 【UART串口读取】[HarmonyOS小熊派 | HarmonyOS基础外设开发--UART数据读写-云社区-华为云 (huaweicloud.com)](https://bbs.huaweicloud.com/blogs/detail/281809)\n\n- 【QT转EXE格式】[QT打包成exe详细步骤 - 西北小蚂蚁 - 博客园 (cnblogs.com)](https://www.cnblogs.com/JinShanCheShen/p/16194526.html)\n\n- 【QT转EXE格式编译报错】[Qt软件打包后报错“无法定位程序输入点_ZN10QArrayData10deallocateEPs_jj于动态链接库..... .exe上。”解决办法-CSDN博客](https://blog.csdn.net/weijifen000/article/details/102537640)\n\n## 二、QT开发\n\n- geometry里的宽度、高度是分辨率，比如geometry设置为宽*高为1920*1080\n\n- 【窗口自适应】[【QT】QT Designer控件随窗口大小自适应-腾讯云开发者社区-腾讯云 (tencent.com)](https://cloud.tencent.com/developer/article/2286080)\n\n- 【串口发送】[QT串口助手：识别串口号，发送，接收，十六进制_qt串口发送16进制数据-CSDN博客](https://blog.csdn.net/qq_26904271/article/details/132646641)\n\n- foreach是QT中的一个关键字，其作用是对第二个参数中的对象进行遍历，把遍历过程中的每个对象依次赋给第一个参数，并执行花括号中的内容。在这里，就是把可获取的串口列表availablePorts()中的串口，逐个将其串口号添加到combobox中。\n\n### 1.串口设定\n\n```\n  \t//mainwindow.h文件调用串口头文件\n  \t//串口头文件\n  \t#include <QSerialPort>\n\t#include <QSerialPortInfo>\n  \t\n  \t//mainwindow.cpp文件中的MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找\n  \t//使用foreach函数查找串口信息\n\tforeach (const QSerialPortInfo &portInfo,QSerialPortInfo::availablePorts()) \n  \t{\n      //将所有搜索的值写入serialport端口当中\n      ui->serialport->addItem(portInfo.portName());\n  \t}\n  \t//打开串口\n  \tserialPort->open();\n  \t//关闭串口\n  \tserialPort->close();\n  \t\n  \t//串口写入\n  \tserialPort->write(\"*****\");\n```\n\n### 2.读取下拉选项内容并赋予\n```\n\t//mainwindow.cpp文件中，自定义函数设定\n\t\n\t//定义参数格式为QString\n\tQString mBaudrate;//波特率\n\tQString mStopBits;//停止位字节\n    QString mDataBits;//数据字节\n    QString mParity;//奇偶校验\n    \n\t//读取baudrate槽中currentText()所选定的内容，后续类似\n\tmBaudrate = ui->baudrate->currentText();\n\tmStopBits = ui->stopbits->currentText();\n    mDataBits = ui->databits->currentText();\n    mParity = ui->parity->currentText();\n\t\n\t//判断起选定内容是否符合需求，并赋予相应操作\n\tif(mBaudrate == \"9600\") \n\t{\n\t\t//将串口波特率设定为9600\n        mSerialPort.setBaudRate(QSerialPort::Baud9600);//Baud9600、Baud115200\n        mSerialPort.setStopBits(QSerialPort::OneStop);//OneStop-1、OneAndHalfStop-1.5、TwoStop-2\n        mSerialPort.setDataBits(QSerialPort::Data5);//Data5、Data6、Data7、Data8\n        mSerialPort.setParity(QSerialPort::OddParity);//OddParity-奇校验、EvenParity-偶校验、NoParity无校验\n    } \n    else if(mBaudrate == \"115200\") \n    {\n    \t//将串口波特率设定为115200\n        mSerialPort.setBaudRate(QSerialPort::Baud19200);\n    }\n```\n\n### 3.摄像头设定\n\n```\n\t//***.pro格式文件加入multimediawidgets\n\tQT       += core gui multimediawidgets\n\t\n\t//mainwindow.h文件调用摄像头头文件\n\t#include <QCameraImageCapture>\n\t#include <QCamera>\n\t\n\t//mainwindow.cpp文件中的MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找\n\t//获取系统的所有可用的摄像头\n\tforeach(const QCameraInfo &cameraInfo , QCameraInfo::availableCameras())\n    {\n        //将所有搜索的值写入cameraBox端口当中\n        ui->cameraBox->addItem(cameraInfo.deviceName());\n    }\n    \n    //打开摄像头\n    cameraPort->start();\n    //关闭摄像头\n    cameraPort->stop();\n```\n\n### 4.QT中setCheckable()的作用\n\nsetCheckable()设置为True时才有可能使得status为True（即设置后按钮想点灯开关一样，能够按一下保持一直开，再按下保持一直关），否则开关点击一下后仍为关闭状态，status一直为False。\n\n### 5.TCP通讯\n\n```\n\t//***.pro格式文件加入network\n\tQT       += network\n\t\n\t//mainwindow.h头文件中引用\n\t#include <QTcpServer>\n\t#include <QTcpSocket>\n\t//定义*socket和*server用来存放服务器的套接字和监听，用于与客户端进行通信\n\tQTcpSocket *socket;\n    QTcpServer *server;\n\t\n\t//mainwindow.cpp文件中MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找\n\t//setCheckable()设置为True时才有可能使得status为True（即设置后按钮想点灯开关一样，能够按一下保持一直开，再按下保持一直关），否则开关点击一下后仍为关闭状态，status一直为False。\n\tui->Monitor_OPEN->setCheckable(true);//简而言之就是按键的常开和常闭切换\n\t//创建服务器的套接字，用于与客户端进行通信\n\tsocket = new QTcpSocket();\n\t//声明一个QTcpserver的对象，用于监听\n    server = new QTcpServer();\n    //信号：新的客户端连接建立 槽函数：获取客户端套接字，允许写入数据\n    connect(server,SIGNAL(newConnection()),this,SLOT(newConnection_SLOT()));\n    \n    //定义新函数MainWindow::newConnection_SLOT()，用于新的客户端连接建立槽函数：获取客户端套接字，允许写入数据\n    void MainWindow::newConnection_SLOT()\n    {\n        socket = server->nextPendingConnection(); //获取已经连接的客户端套接字\n        connect(socket,SIGNAL(readyRead()),this,SLOT(readyRead_SLOT()));//如果socket中有缓存消息，触发槽函数\n    }\n    \n    //定义新函数MainWindow::readyRead_SLOT()，用于接收消息并显示到接收框\n    void MainWindow::readyRead_SLOT()\n    {\n        qDebug() << \"Server Received!\";\n        QString buffer;//定义容器\n        //读取缓冲区数据\n        buffer = socket->readAll();\n        if(!buffer.isEmpty())\n        {\n            //刷新显示，写入Receive_text组件，组件类型为Plain Text Line\n            ui->Receive_text->appendPlainText(buffer);\n        }\n    }\n    \n    //连接组件函数，按下开始监听组件Monitor_OPEN，类型为clicked(bool checked)，执行监听程序\n    void MainWindow::on_Monitor_OPEN_clicked(bool checked)\n    {\n        if(checked)//如果按下了\n        {\n            int port = ui->PORT_TEXT->text().toUInt();\n            //如果未监听到\n            if(!server->listen(QHostAddress::Any, port))\n            {\n                qDebug() << server->errorString();\n                //连接失败，再次点击则重新连接，将checked恢复为true\n                ui->Monitor_OPEN->toggle();\n                return;\n            }\n            qDebug() << \"Listen Successfully! Message from port:\" << port;\n            //修改按钮文字\n            ui->Monitor_OPEN->setText(\"停止监听\");\n            //发送键使能\n            ui->Send_Button->setEnabled(true);\n        }\n        else\n        {\n             qDebug() << \"Stop Listening!\";\n            //如果已经连接则断开连接\n            if(socket->state() == QAbstractSocket::ConnectedState)\n            {\n                //断开连接\n                socket->disconnectFromHost();\n            }\n            //关闭倾听服务\n            server->close();\n            //修改按钮文字&发送键静默\n            ui->Monitor_OPEN->setText(\"开始监听\");\n            ui->Send_Button->setEnabled(false);\n        }\n    }\n```\n\n### 6.滑动槽设定\n\n- 首先使用setRange()方法设置了滑动条的范围为0到100，然后使用setValue()方法设置了滑动条的当前值为50。通过value()方法可以获取当前滑动条的值。最后，使用connect()方法监听了滑动条的值变化，当值发生变化时，会调用onSliderValueChanged()槽函数。\n\n```text\n    // 假设有一个QSlider对象名为slider\n    // 设置滑动条的范围\n    slider->setRange(-180, 180);\n\n    // 设置滑动条的当前值\n    slider->setValue(0);\n\n    // 获取滑动条的当前值\n    int currentValue = slider->value();\n\n    // 监听滑动条的值变化\n    connect(slider, SIGNAL(valueChanged(int)), this, SLOT(onSliderValueChanged(int)));\n```\n\n- slider 提供了两个自然的步长；较大的步长用 pageStep 表示，相当于按下键盘上的 PageDown 和 PageUp，也相当于鼠标点击时移动的步进值:；较小的步长用 singleStep 表示，相当于按下键盘上的上、下键；\n\n```\n    // 设置移动每页的步长，滑块提供的两个自然步长中较大的那一个，相当于键盘上的 PageUp 和 PageDown；\n    horizontalSlider->setPageStep(10);\n\n    // 获取 每页的步长\n    int step = horizontalSlider->pageStep();\n\n    // 设置移动单步的步长，滑块提供的两个自然步长中较小的那一个，相当于键盘上的上、下箭头；\n    horizontalSlider->setSingleStep(2);\n\n    // 获取 单步的步长\n    int step =horizontalSlider->singleStep();\n```\n\n- 设置是否启用滑块追踪：\n\n```\n    // 设置是否启动滑块追踪：true 表示启动追踪；false 表示禁用追踪；\n    // 如果启用了滑块追踪，则滑块在拖动过程中会一直触发 valueChanged 信号；\n    // 如果禁用了滑块追踪，则滑块在拖动过程中不会触发 valueChanged 信号，\n    // 只有在用户释放滑块时，才触发 valueChanged 信号。\n    horizontalSlider->setTracking(true);\n    // 可以通过 hasTracking 属性获取是否启用了追踪：\n    bool isTrack = horizontalSlider->hasTracking();\n```\n\n- 槽函数设定\n\n```\n    valueChanged()//值被改变\n    sliderPressed()//滑块被点击\n    sliderMoved()//滑块移动\n    sliderReleased();//滑块被释放\n```\n\n## 三、TCP通讯\n\n【TCP通信】[HI3861学习笔记（20）——TCP客户端_hi3861 at tcp 指令 erre-CSDN博客](https://blog.csdn.net/qq_36347513/article/details/123099617)\n\n【TCP通信】[教你动手写TCP上位机与小熊派通信_小熊派设备的tcp通信-CSDN博客](https://blog.csdn.net/baidu_29900103/article/details/117970891)\n\n## 四、下位机代码\n\n```\n#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n\n#include \"iot_gpio_ex.h\"\n#include \"ohos_init.h\"\n#include \"cmsis_os2.h\"\n#include \"iot_gpio.h\"\n#include \"iot_uart.h\"\n#include \"hi_uart.h\"\n#include \"iot_watchdog.h\"\n#include \"iot_errno.h\"\n\n#include \"hal_bsp_pcf8574.h\"\n#include \"hal_bsp_wifi.h\"\n#include \"wifi_device.h\"\n#include \"lwip/netifapi.h\"\n#include \"lwip/sockets.h\"\n#include \"lwip/api_shell.h\"\n\n#define    ABS(x)    ((x) > 0 ? (x) : -(x))\n\n#define UART_BUFF_SIZE 100\n#define U_SLEEP_TIME   500000\n#define UART_TIMEOUT_MS 20   // 设置超时时间为100毫秒\n\nosThreadId_t Task1_ID; // 任务1设置为低优先级任务\n#define TASK_STACK_SIZE (1024 * 10)\n#define TCP_SERVER_IP \"192.168.245.23\"\n#define TCP_SERVER_PORT 8888\n\n#define DIR_pos 1 // 正方向\n#define DIR_neg 0 // 反方向\n#define Speed_acc 1000 // 加速度\n#define Speed_dec 1000 // 减速度\n#define Speed_max 2000.0f // 最大速度\n#define motor_raf_0 0 // 相位位置标志\n#define motor_raf_1 1 //绝对位置标志\n#define motor_snf_0 0 // 多机同步运动标志\n#define motor_snf_1 0 // 单机运动标志\n\n//读取数据的枚举值\ntypedef enum {\n  S_VER   = 0,      /* 读取固件版本和对应的硬件版本 */\n  S_RL    = 1,      /* 读取读取相电阻和相电感 */\n  S_PID   = 2,      /* 读取PID参数 */\n  S_ORG   = 3,      /* 读取回零参数 */\n  S_VBUS  = 4,      /* 读取总线电压 */\n  S_CBUS  = 5,      /* 读取总线电流 */\n  S_CPHA  = 6,      /* 读取相电流 */\n  S_ENC   = 7,      /* 读取编码器原始值 */\n  S_CPUL  = 8,      /* 读取实时脉冲数（根据实时位置计算得到的脉冲数） */\n  S_ENCL  = 9,      /* 读取经过线性化校准后的编码器值 */\n  S_TPUL  = 10,     /* 读取输入脉冲数 */\n  S_TPOS  = 11,     /* 读取电机目标位置 */\n  S_OPOS  = 12,     /* 读取电机实时设定的目标位置（开环模式的实时位置） */\n  S_VEL   = 13,     /* 读取电机实时转速 */\n  S_CPOS  = 14,     /* 读取电机实时位置（基于角度编码器累加的电机实时位置） */\n  S_PERR  = 15,     /* 读取电机位置误差 */\n  S_TEMP  = 16,     /* 读取电机实时温度 */\n  S_SFLAG = 17,     /* 读取状态标志位 */\n  S_OFLAG = 18,     /* 读取回零状态标志位 */\n  S_Conf  = 19,     /* 读取驱动参数 */\n  S_State = 20,     /* 读取系统状态参数 */\n}SysParams_t;\n\nvoid Uart1GpioInit(void)//对UART和LED引脚进行初始化\n{\n    IoTGpioInit(IOT_IO_NAME_GPIO_6);\n    // 设置GPIO0的管脚复用关系为UART1_TX Set the pin reuse relationship of GPIO0 to UART1_ TX\n    IoSetFunc(IOT_IO_NAME_GPIO_6, IOT_IO_FUNC_GPIO_6_UART1_TXD);\n    \n    IoTGpioInit(IOT_IO_NAME_GPIO_5);\n    // 设置GPIO1的管脚复用关系为UART1_RX Set the pin reuse relationship of GPIO1 to UART1_ RX\n    IoSetFunc(IOT_IO_NAME_GPIO_5, IOT_IO_FUNC_GPIO_5_UART1_RXD);\n\n    // LED3的GPIO初始化 GPIO initialization of LED3\n    IoTGpioInit(IOT_IO_NAME_GPIO_2);\n    // 设置GPIO9的管脚复用关系为GPIO Set the pin reuse relationship of GPIO9 to GPIO\n    IoSetFunc(IOT_IO_NAME_GPIO_2, IOT_IO_FUNC_GPIO_2_GPIO);\n    // GPIO方向设置为输出 GPIO direction set to output\n    IoTGpioSetDir(IOT_IO_NAME_GPIO_2, IOT_GPIO_DIR_OUT);\n}\n\nvoid Uart1Config(void)//对UART配置初始化\n{\n    uint32_t ret;\n    /* 初始化UART配置，波特率 115200，数据bit为8,停止位1，奇偶校验为NONE */\n    /* Initialize UART configuration, baud rate is 9600, data bit is 8, stop bit is 1, parity is NONE */\n    IotUartAttribute uart_attr = {\n        .baudRate = 115200,\n        .dataBits = 8,\n        .stopBits = 1,\n        .parity = 0,\n    };\n\n    //uart初始化返回值\n    ret = IoTUartInit(HI_UART_IDX_1, &uart_attr);\n    //判断uart是否连接成功\n    if (ret != IOT_SUCCESS) {\n        printf(\"Init Uart1 Falied Error No : %d\\n\", ret);\n        return;\n    }\n}\n\nvoid ZDT_X42_V2_En_Control(uint8_t addr, int state, uint8_t snF)//电机使能控制函数\n{\n    //定义接收值以及数据长度\n    uint32_t count = 0;\n    uint32_t len = 0;\n    unsigned char uartReadBuff[UART_BUFF_SIZE] = {0};\n\n    //定义发送命令数组\n    uint8_t cmd[16] = {0};\n  \n    // 装载命令\n    cmd[0] =  addr;                       // 地址\n    cmd[1] =  0xF3;                       // 功能码\n    cmd[2] =  0xAB;                       // 辅助码\n    cmd[3] =  (uint8_t)state;             // 使能状态\n    cmd[4] =  snF;                        // 多机同步运动标志\n    cmd[5] =  0x6B;                       // 校验字节\n\n    //通过UART的Write函数发送cmd的参数\n    IoTUartWrite(HI_UART_IDX_1, (unsigned char*)cmd, 6);\n}\n\n//电机驱动函数\nvoid ZDT_X42_V2_Traj_Position_Control(uint8_t addr, uint8_t dir, uint16_t acc, uint16_t dec, float velocity, float position, uint8_t raf, uint8_t snF)\n{\n    //定义接收值以及数据长度\n    uint32_t count = 0;\n    uint32_t len = 0;\n    unsigned char uartReadBuff[UART_BUFF_SIZE] = {0};\n    \n    //定义发送命令数组\n    uint8_t cmd[32] = {0};\n    uint16_t vel = 0; uint32_t pos = 0;\n\n    // 将速度和位置放大10倍发送过去\n    vel = (uint16_t)ABS(velocity * 10.0f); \n    pos = (uint32_t)ABS(position * 10.0f);\n\n    // 装载命令\n    cmd[0]  =  addr;                      // 地址\n    cmd[1]  =  0xFD;                      // 功能码\n    cmd[2]  =  dir;                       // 符号（方向）\n    cmd[3]  =  (uint8_t)(acc >> 8);       // 加速加速度(RPM/s)高8位字节\n    cmd[4]  =  (uint8_t)(acc >> 0);       // 加速加速度(RPM/s)低8位字节  \n    cmd[5]  =  (uint8_t)(dec >> 8);       // 减速加速度(RPM/s)高8位字节\n    cmd[6]  =  (uint8_t)(dec >> 0);       // 减速加速度(RPM/s)低8位字节  \n    cmd[7]  =  (uint8_t)(vel >> 8);       // 最大速度(RPM)高8位字节\n    cmd[8]  =  (uint8_t)(vel >> 0);       // 最大速度(RPM)低8位字节 \n    cmd[9]  =  (uint8_t)(pos >> 24);      // 位置(bit24 - bit31)\n    cmd[10] =  (uint8_t)(pos >> 16);      // 位置(bit16 - bit23)\n    cmd[11] =  (uint8_t)(pos >> 8);       // 位置(bit8  - bit15)\n    cmd[12] =  (uint8_t)(pos >> 0);       // 位置(bit0  - bit7 )\n    cmd[13] =  raf;                       // 相位位置/绝对位置标志\n    cmd[14] =  snF;                       // 多机同步运动标志\n    cmd[15] =  0x6B;                      // 校验字节\n\n    //通过UART的Write函数发送cmd的参数\n    IoTUartWrite(HI_UART_IDX_1, (unsigned char*)cmd, 16);\n}\n\nvoid ZDT_X42_V2_Origin_Trigger_Return(uint8_t addr, uint8_t o_mode, bool snF)//电机归零函数，没啥用，需要外界碰撞或者限位，该文件未使用此函数\n{\n    //定义接收值以及数据长度\n    uint32_t count = 0;\n    uint32_t len = 0;\n    unsigned char uartReadBuff[UART_BUFF_SIZE] = {0};\n\n    uint8_t cmd[16] = {0};\n    \n    // 装载命令\n    cmd[0] =  addr;                       // 地址\n    cmd[1] =  0x9A;                       // 功能码\n    cmd[2] =  o_mode;                     // 回零模式，0为单圈就近回零，1为单圈方向回零，2为多圈无限位碰撞回零，3为多圈有限位开关回零\n    cmd[3] =  snF;                        // 多机同步运动标志，false为不启用，true为启用\n    cmd[4] =  0x6B;                       // 校验字节\n\n    //通过UART的Write函数发送cmd的参数\n    IoTUartWrite(HI_UART_IDX_1, (unsigned char*)cmd, 5);\n}\n\nvoid ZDT_X42_V2_Stop_Now(uint8_t addr, uint8_t snF)//立即停机\n{\n    //定义接收值以及数据长度\n    uint32_t count = 0;\n    uint32_t len = 0;\n    unsigned char uartReadBuff[UART_BUFF_SIZE] = {0};\n\n    uint8_t cmd[16] = {0};\n    \n    // 装载命令\n    cmd[0] =  addr;                       // 地址\n    cmd[1] =  0xFE;                       // 功能码\n    cmd[2] =  0x98;                       // 辅助码\n    cmd[3] =  snF;                        // 多机同步运动标志\n    cmd[4] =  0x6B;                       // 校验字节\n\n    //通过UART的Write函数发送cmd的参数\n    IoTUartWrite(HI_UART_IDX_1, (unsigned char*)cmd, 5);\n}\n\nunsigned int IoTUartFlush(unsigned int id) //串口清空函数，用于进行清空UART内部缓存，不然会出现读取错误\n{\n    //定义要存储数组\n    unsigned char buffer[128];\n\n    //定义读取值\n    int read;\n\n    do {\n        //将读取值全部存入数组当中，从而达到清空效果\n        read = IoTUartRead(id, buffer, sizeof(buffer));\n    } while (read > 0);\n\n    return IOT_SUCCESS;\n}\n\nvoid ZDT_X42_V2_Read_Sys_Params(uint8_t addr, SysParams_t s)//读取电机的实时位置\n{\n    //定义发送数组\n    uint8_t cmd[16] = {0};\n  \n    // 装载命令\n    cmd[0] =  addr;                       // 地址\n\n    //对功能码进行选择\n    switch(s)                             // 功能码\n    {\n        case S_VER   : cmd[1] = 0x1F; break;                  /* 读取固件版本和对应的硬件版本 */\n        case S_RL    : cmd[1] = 0x20; break;                  /* 读取读取相电阻和相电感 */\n        case S_PID   : cmd[1] = 0x21; break;                  /* 读取PID参数 */\n        case S_ORG   : cmd[1] = 0x22; break;                  /* 读取回零参数 */\n        case S_VBUS  : cmd[1] = 0x24; break;                  /* 读取总线电压 */\n        case S_CBUS  : cmd[1] = 0x26; break;                  /* 读取总线电流 */\n        case S_CPHA  : cmd[1] = 0x27; break;                  /* 读取相电流 */\n        case S_ENC   : cmd[1] = 0x29; break;                  /* 读取编码器原始值 */\n        case S_CPUL  : cmd[1] = 0x30; break;                  /* 读取实时脉冲数（根据实时位置计算得到的脉冲数） */\n        case S_ENCL  : cmd[1] = 0x31; break;                  /* 读取经过线性化校准后的编码器值 */\n        case S_TPUL  : cmd[1] = 0x32; break;                  /* 读取输入脉冲数 */\n        case S_TPOS  : cmd[1] = 0x33; break;                  /* 读取电机目标位置 */\n        case S_OPOS  : cmd[1] = 0x34; break;                  /* 读取电机实时设定的目标位置（开环模式的实时位置） */\n        case S_VEL   : cmd[1] = 0x35; break;                  /* 读取电机实时转速 */\n        case S_CPOS  : cmd[1] = 0x36; break;                  /* 读取电机实时位置（基于角度编码器累加的电机实时位置） */\n        case S_PERR  : cmd[1] = 0x37; break;                  /* 读取电机位置误差 */\n        case S_TEMP  : cmd[1] = 0x39; break;                  /* 读取电机实时温度 */\n        case S_SFLAG : cmd[1] = 0x3A; break;                  /* 读取状态标志位 */\n        case S_OFLAG : cmd[1] = 0x3B; break;                  /* 读取回零状态标志位 */\n        case S_Conf  : cmd[1] = 0x42; cmd[2] = 0x6C; break;   /* 读取驱动参数 */\n        case S_State : cmd[1] = 0x43; cmd[2] = 0x7A; break;   /* 读取系统状态参数 */\n        default: break;\n    }\n\n    // 如果需要四字节，将校验字节放在 cmd[3]\n    cmd[2] = 0x6B; \n\n    //通过UART的Write函数发送cmd的参数\n    IoTUartWrite(HI_UART_IDX_1, (unsigned char*)cmd, 3);\n}\n\nvoid ZDT_X42_V2_Receive_Data(uint8_t addr, uint8_t *rxCmd, uint32_t *rxCount) \n{\n    uint32_t startTime = osKernelGetTickCount();  // 获取当前系统时间\n    uint8_t buffer[UART_BUFF_SIZE];\n    int len;\n\n    while (1) {\n        len = IoTUartRead(HI_UART_IDX_1, buffer, sizeof(buffer));  // 从UART读取数据\n        if (len > 0) {\n            // 将读取的数据复制到rxCmd数组中，确保不会溢出\n            uint32_t copySize = (*rxCount + len > UART_BUFF_SIZE) ? (UART_BUFF_SIZE - *rxCount) : len;\n            memcpy(rxCmd + *rxCount, buffer, copySize);\n            *rxCount += copySize;\n\n            startTime = osKernelGetTickCount();  // 更新最后一次接收数据的时间\n        }\n\n        // 检查是否超时\n        if ((osKernelGetTickCount() - startTime) > UART_TIMEOUT_MS) {\n            break;  // 如果超过设定的超时时间，则停止接收数据\n        }\n    }\n}\n\nfloat absolute(float value) //找不到绝对值的函数值定义，自己创建一个函数用于进行绝对值计算\n{\n    return (value < 0) ? -value : value;//判断如何取正\n}\n\nfloat ReadMotorAngle(uint8_t sliderId) //定义读取角度，并计算和输出角度值\n{\n    //清空缓存区\n    IoTUartFlush(HI_UART_IDX_1);\n\n    //定义角度取值为小数点后一位\n    float pos = 0.0f, Motor_Cur_Pos = 0.0f;\n\n    // 定义接收数据数组、接收数据长度\n    uint8_t rxCmd[UART_BUFF_SIZE] = {0};\n    uint32_t rxCount = 0;\n\n    // 读取电机实时位置\n    ZDT_X42_V2_Read_Sys_Params(sliderId, S_CPOS);\n\n    // 等待返回命令，命令数据缓存在数组rxCmd上，长度为rxCount\n    ZDT_X42_V2_Receive_Data(sliderId, rxCmd, &rxCount);\n\n    //将读取的rxCmd[]十六进制编码打印，用于测试调试\n    // printf(\"Received bytes: \");\n    // for (int i = 0; i < 8; i++) {\n    //     printf(\"%02X \", rxCmd[i]);\n    // }\n    // printf(\"\\n\");\n\n    // 获取电机实时角度返回值（电机实时角度返回值放大了10倍返回的，因为要保留1位小数）\n    pos = ((uint32_t)rxCmd[3] << 24) | ((uint32_t)rxCmd[4] << 16) | ((uint32_t)rxCmd[5] << 8) | (uint32_t)rxCmd[6];\n\n    // 缩小10倍，并判断符号，得到真正的实时角度，存放在浮点数变量Motor_Cur_Pos中\n    Motor_Cur_Pos = pos * 0.1f;\n    if (rxCmd[2]) {\n        Motor_Cur_Pos = -Motor_Cur_Pos;\n    }\n\n    // 打印解析后的角度值\n    printf(\"Current position (as angle): %.1f degrees\\n\", Motor_Cur_Pos);\n\n    return Motor_Cur_Pos;\n}\n\nvoid ResetMotorToOrigin(uint8_t sliderId) //电机归零函数\n{\n    //读取电机目前角度\n    float Motor_Cur_Pos = ReadMotorAngle(sliderId);\n\n    float targetPosition = 0; // 目标位置，这里假设为0度\n\n    // 根据当前角度和目标位置计算需要移动的距离\n    float delta = targetPosition - Motor_Cur_Pos;\n\n    // 将 delta 四舍五入到小数点后一位\n    //delta = ((int)(delta * 10 + 0.5)) / 10.0f;\n\n    printf(\"delta: %.1f degrees\\n\", delta);\n\n    // 调用轨迹位置控制函数将电机移动到目标位置\n    ZDT_X42_V2_Traj_Position_Control(sliderId, (delta < 0) ? 1 : 0, Speed_acc, Speed_dec, Speed_max, absolute(delta), motor_raf_0, motor_snf_0);\n}\n\nvoid ParseJson(const char* json)//电机uart运行主函数\n{\n    // 定义JSON键的字符串，根据上位机所需进行定义，格式类型相同\n    const char* labelStr = \"\\\"label\\\":\";\n    const char* motor_EnStr = \"\\\"motor_En\\\":\";\n    const char* sliderIdStr = \"\\\"sliderId\\\":\";\n    const char* valueStr = \"\\\"value\\\":\";\n    \n\n    // 找到JSON字符串中键的位置，用于进行键的连接，等于找到对应的标签\n    char* labelPos = strstr(json, labelStr);\n    char* motor_EnPos = strstr(json, motor_EnStr);\n    char* sliderIdPos = strstr(json, sliderIdStr);\n    char* valuePos = strstr(json, valueStr);\n\n    // 如果找到键，解析其对应的值\n    if (labelPos != NULL && motor_EnPos != NULL && sliderIdPos != NULL && valuePos != NULL) {\n        int label = atoi(labelPos + strlen(labelStr)); // 将label转换为整数\n        int sliderId = atoi(sliderIdPos + strlen(sliderIdStr)); // 将sliderId转换为整数\n\n        //放大30倍，对应谐波减速器\n        int value = atof(valuePos + strlen(valueStr));\n        int motor_En = atoi(motor_EnPos + strlen(motor_EnStr));\n\n        // 打印解析出的值\n        printf(\"label: %d, motor_En: %d, Slider ID: %d, Value: %d\\n\", label, motor_En, sliderId, value);\n\n        // 根据Slider ID和Value执行相应的操作\n        if (label == 1) \n        {\n            if (sliderId == 1){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            } \n            else if (sliderId == 2){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            }\n            else if (sliderId == 3){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            }\n            else if (sliderId == 4){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            }\n            else if (sliderId == 5){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            }\n            else if (sliderId == 6){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            }\n        } \n        else if (label == 2) \n        {\n            if (sliderId == 1){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            } \n            else if (sliderId == 2){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            }\n            else if (sliderId == 3){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            }\n            else if (sliderId == 4){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            }\n            else if (sliderId == 5){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            }\n            else if (sliderId == 6){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            }\n            \n        }\n        else if (label == 3) //电机紧急停机\n        {\n            ZDT_X42_V2_Stop_Now(1, 0);  //调用停机函数\n            usleep(50);  //延时确保函数依次执行\n            ZDT_X42_V2_Stop_Now(2, 0);\n            usleep(50);\n            ZDT_X42_V2_Stop_Now(3, 0);\n            usleep(50);\n            ZDT_X42_V2_Stop_Now(4, 0);\n            usleep(50);\n            ZDT_X42_V2_Stop_Now(5, 0);\n            usleep(50);\n            ZDT_X42_V2_Stop_Now(6, 0);\n            usleep(50);\n        }\n        else if (label == 4) //电机复位函数\n        {\n            ResetMotorToOrigin(1);  //调用复位函数\n            usleep(50);  //延时确保函数依次执行\n            ResetMotorToOrigin(2);\n            usleep(50);\n            ResetMotorToOrigin(3);\n            usleep(50);\n            ResetMotorToOrigin(4);\n            usleep(50);\n            ResetMotorToOrigin(5);\n            usleep(50);\n            ResetMotorToOrigin(6);\n            usleep(50);\n        }\n    }\n}\n\nvoid Task1(void)//系统主函数\n{\n    int socket_fd = 0;\n    char buff[256];\n    int re = 0;\n\n    uint32_t count_0 = 0;\n    uint32_t len_0 = 0;\n    unsigned char uartReadBuff_0[UART_BUFF_SIZE] = {0};\n\n    // 对UART1的一些初始化 Some initialization of UART1\n    Uart1GpioInit();\n    // 对UART1参数的一些配置 Some configurations of UART1 parameters\n    Uart1Config();\n\n    // 连接Wifi\n    WiFi_connectHotspots(\"esp32\", \"12345678\");\n    socket_fd = socket(AF_INET, SOCK_STREAM, 0); // 创建套接字（TCP）\n    struct sockaddr_in addr;\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(TCP_SERVER_PORT);\n    addr.sin_addr.s_addr = inet_addr(TCP_SERVER_IP); // 填写服务器的IP地址\n\n    re = connect(socket_fd, (struct sockaddr *)&addr, sizeof(addr)); // 连接服务器\n    if (re == -1) {\n        printf(\"Failed to connect to the server\\r\\n\");\n        return;\n    }\n    printf(\"Connection to server successful\\r\\n\");\n\n    // 发送第一条数据\n    send(socket_fd, \"Connection to server successful.\", strlen(\"Connection to server successful.\"), 0);\n\n    while (1) {\n        memset_s(buff, sizeof(buff), 0, sizeof(buff));\n        re = recv(socket_fd, buff, sizeof(buff), 0); //\t接收客户端发送过来的消息\n        if (re <= 0) \n        {\n            break;\n        } else {\n            ParseJson(buff);//执行控制主函数\n        }\n    }\n    close(socket_fd);\n}\n\nvoid UartExampleEntry(void)//配置上报函数\n{\n    //osThreadAttr_t attr;\n    IoTWatchDogDisable();\n\n    osThreadAttr_t options;\n    options.name = \"thread_1\";\n    options.attr_bits = 0;\n    options.cb_mem = NULL;\n    options.cb_size = 0;\n    options.stack_mem = NULL;\n    options.stack_size = TASK_STACK_SIZE;\n    options.priority = osPriorityNormal;\n\n    Task1_ID = osThreadNew((osThreadFunc_t)Task1, NULL, &options);\n    if (Task1_ID != NULL) {\n        printf(\"ID = %d, Create Task1_ID is OK!\\r\\n\", Task1_ID);\n    }\n}\n\nAPP_FEATURE_INIT(UartExampleEntry);\n```\n\n","source":"_posts/20240429ZYY-Hi3861开发.md","raw":"---\ntitle: Hi3861开发\ntag: Hi3861\ndate: 2024-05-17\ncategories: 单片机\n---\n\n# Hi3861开发\n\n## 一、学习资料\n\n- 【UART串口使用】[HI3861学习笔记（18）——UART串口使用_hi3861 uart-CSDN博客](https://blog.csdn.net/qq_36347513/article/details/121603716)\n\n- 【开发环境搭建】[2.1 Pegasus开发环境搭建.md · HiSpark/HiSpark_NICU2023 - Gitee.com](https://gitee.com/HiSpark/HiSpark_NICU2023/blob/master/2.1 Pegasus开发环境搭建.md)\n\n- 【入门demo】[编写 Hello World”程序 (openharmony.cn)](https://docs.openharmony.cn/pages/v4.0/zh-cn/device-dev/quick-start/quickstart-ide-3861-helloworld.md)\n\n- 【UART串口读取】[HarmonyOS小熊派 | HarmonyOS基础外设开发--UART数据读写-云社区-华为云 (huaweicloud.com)](https://bbs.huaweicloud.com/blogs/detail/281809)\n\n- 【QT转EXE格式】[QT打包成exe详细步骤 - 西北小蚂蚁 - 博客园 (cnblogs.com)](https://www.cnblogs.com/JinShanCheShen/p/16194526.html)\n\n- 【QT转EXE格式编译报错】[Qt软件打包后报错“无法定位程序输入点_ZN10QArrayData10deallocateEPs_jj于动态链接库..... .exe上。”解决办法-CSDN博客](https://blog.csdn.net/weijifen000/article/details/102537640)\n\n## 二、QT开发\n\n- geometry里的宽度、高度是分辨率，比如geometry设置为宽*高为1920*1080\n\n- 【窗口自适应】[【QT】QT Designer控件随窗口大小自适应-腾讯云开发者社区-腾讯云 (tencent.com)](https://cloud.tencent.com/developer/article/2286080)\n\n- 【串口发送】[QT串口助手：识别串口号，发送，接收，十六进制_qt串口发送16进制数据-CSDN博客](https://blog.csdn.net/qq_26904271/article/details/132646641)\n\n- foreach是QT中的一个关键字，其作用是对第二个参数中的对象进行遍历，把遍历过程中的每个对象依次赋给第一个参数，并执行花括号中的内容。在这里，就是把可获取的串口列表availablePorts()中的串口，逐个将其串口号添加到combobox中。\n\n### 1.串口设定\n\n```\n  \t//mainwindow.h文件调用串口头文件\n  \t//串口头文件\n  \t#include <QSerialPort>\n\t#include <QSerialPortInfo>\n  \t\n  \t//mainwindow.cpp文件中的MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找\n  \t//使用foreach函数查找串口信息\n\tforeach (const QSerialPortInfo &portInfo,QSerialPortInfo::availablePorts()) \n  \t{\n      //将所有搜索的值写入serialport端口当中\n      ui->serialport->addItem(portInfo.portName());\n  \t}\n  \t//打开串口\n  \tserialPort->open();\n  \t//关闭串口\n  \tserialPort->close();\n  \t\n  \t//串口写入\n  \tserialPort->write(\"*****\");\n```\n\n### 2.读取下拉选项内容并赋予\n```\n\t//mainwindow.cpp文件中，自定义函数设定\n\t\n\t//定义参数格式为QString\n\tQString mBaudrate;//波特率\n\tQString mStopBits;//停止位字节\n    QString mDataBits;//数据字节\n    QString mParity;//奇偶校验\n    \n\t//读取baudrate槽中currentText()所选定的内容，后续类似\n\tmBaudrate = ui->baudrate->currentText();\n\tmStopBits = ui->stopbits->currentText();\n    mDataBits = ui->databits->currentText();\n    mParity = ui->parity->currentText();\n\t\n\t//判断起选定内容是否符合需求，并赋予相应操作\n\tif(mBaudrate == \"9600\") \n\t{\n\t\t//将串口波特率设定为9600\n        mSerialPort.setBaudRate(QSerialPort::Baud9600);//Baud9600、Baud115200\n        mSerialPort.setStopBits(QSerialPort::OneStop);//OneStop-1、OneAndHalfStop-1.5、TwoStop-2\n        mSerialPort.setDataBits(QSerialPort::Data5);//Data5、Data6、Data7、Data8\n        mSerialPort.setParity(QSerialPort::OddParity);//OddParity-奇校验、EvenParity-偶校验、NoParity无校验\n    } \n    else if(mBaudrate == \"115200\") \n    {\n    \t//将串口波特率设定为115200\n        mSerialPort.setBaudRate(QSerialPort::Baud19200);\n    }\n```\n\n### 3.摄像头设定\n\n```\n\t//***.pro格式文件加入multimediawidgets\n\tQT       += core gui multimediawidgets\n\t\n\t//mainwindow.h文件调用摄像头头文件\n\t#include <QCameraImageCapture>\n\t#include <QCamera>\n\t\n\t//mainwindow.cpp文件中的MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找\n\t//获取系统的所有可用的摄像头\n\tforeach(const QCameraInfo &cameraInfo , QCameraInfo::availableCameras())\n    {\n        //将所有搜索的值写入cameraBox端口当中\n        ui->cameraBox->addItem(cameraInfo.deviceName());\n    }\n    \n    //打开摄像头\n    cameraPort->start();\n    //关闭摄像头\n    cameraPort->stop();\n```\n\n### 4.QT中setCheckable()的作用\n\nsetCheckable()设置为True时才有可能使得status为True（即设置后按钮想点灯开关一样，能够按一下保持一直开，再按下保持一直关），否则开关点击一下后仍为关闭状态，status一直为False。\n\n### 5.TCP通讯\n\n```\n\t//***.pro格式文件加入network\n\tQT       += network\n\t\n\t//mainwindow.h头文件中引用\n\t#include <QTcpServer>\n\t#include <QTcpSocket>\n\t//定义*socket和*server用来存放服务器的套接字和监听，用于与客户端进行通信\n\tQTcpSocket *socket;\n    QTcpServer *server;\n\t\n\t//mainwindow.cpp文件中MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找\n\t//setCheckable()设置为True时才有可能使得status为True（即设置后按钮想点灯开关一样，能够按一下保持一直开，再按下保持一直关），否则开关点击一下后仍为关闭状态，status一直为False。\n\tui->Monitor_OPEN->setCheckable(true);//简而言之就是按键的常开和常闭切换\n\t//创建服务器的套接字，用于与客户端进行通信\n\tsocket = new QTcpSocket();\n\t//声明一个QTcpserver的对象，用于监听\n    server = new QTcpServer();\n    //信号：新的客户端连接建立 槽函数：获取客户端套接字，允许写入数据\n    connect(server,SIGNAL(newConnection()),this,SLOT(newConnection_SLOT()));\n    \n    //定义新函数MainWindow::newConnection_SLOT()，用于新的客户端连接建立槽函数：获取客户端套接字，允许写入数据\n    void MainWindow::newConnection_SLOT()\n    {\n        socket = server->nextPendingConnection(); //获取已经连接的客户端套接字\n        connect(socket,SIGNAL(readyRead()),this,SLOT(readyRead_SLOT()));//如果socket中有缓存消息，触发槽函数\n    }\n    \n    //定义新函数MainWindow::readyRead_SLOT()，用于接收消息并显示到接收框\n    void MainWindow::readyRead_SLOT()\n    {\n        qDebug() << \"Server Received!\";\n        QString buffer;//定义容器\n        //读取缓冲区数据\n        buffer = socket->readAll();\n        if(!buffer.isEmpty())\n        {\n            //刷新显示，写入Receive_text组件，组件类型为Plain Text Line\n            ui->Receive_text->appendPlainText(buffer);\n        }\n    }\n    \n    //连接组件函数，按下开始监听组件Monitor_OPEN，类型为clicked(bool checked)，执行监听程序\n    void MainWindow::on_Monitor_OPEN_clicked(bool checked)\n    {\n        if(checked)//如果按下了\n        {\n            int port = ui->PORT_TEXT->text().toUInt();\n            //如果未监听到\n            if(!server->listen(QHostAddress::Any, port))\n            {\n                qDebug() << server->errorString();\n                //连接失败，再次点击则重新连接，将checked恢复为true\n                ui->Monitor_OPEN->toggle();\n                return;\n            }\n            qDebug() << \"Listen Successfully! Message from port:\" << port;\n            //修改按钮文字\n            ui->Monitor_OPEN->setText(\"停止监听\");\n            //发送键使能\n            ui->Send_Button->setEnabled(true);\n        }\n        else\n        {\n             qDebug() << \"Stop Listening!\";\n            //如果已经连接则断开连接\n            if(socket->state() == QAbstractSocket::ConnectedState)\n            {\n                //断开连接\n                socket->disconnectFromHost();\n            }\n            //关闭倾听服务\n            server->close();\n            //修改按钮文字&发送键静默\n            ui->Monitor_OPEN->setText(\"开始监听\");\n            ui->Send_Button->setEnabled(false);\n        }\n    }\n```\n\n### 6.滑动槽设定\n\n- 首先使用setRange()方法设置了滑动条的范围为0到100，然后使用setValue()方法设置了滑动条的当前值为50。通过value()方法可以获取当前滑动条的值。最后，使用connect()方法监听了滑动条的值变化，当值发生变化时，会调用onSliderValueChanged()槽函数。\n\n```text\n    // 假设有一个QSlider对象名为slider\n    // 设置滑动条的范围\n    slider->setRange(-180, 180);\n\n    // 设置滑动条的当前值\n    slider->setValue(0);\n\n    // 获取滑动条的当前值\n    int currentValue = slider->value();\n\n    // 监听滑动条的值变化\n    connect(slider, SIGNAL(valueChanged(int)), this, SLOT(onSliderValueChanged(int)));\n```\n\n- slider 提供了两个自然的步长；较大的步长用 pageStep 表示，相当于按下键盘上的 PageDown 和 PageUp，也相当于鼠标点击时移动的步进值:；较小的步长用 singleStep 表示，相当于按下键盘上的上、下键；\n\n```\n    // 设置移动每页的步长，滑块提供的两个自然步长中较大的那一个，相当于键盘上的 PageUp 和 PageDown；\n    horizontalSlider->setPageStep(10);\n\n    // 获取 每页的步长\n    int step = horizontalSlider->pageStep();\n\n    // 设置移动单步的步长，滑块提供的两个自然步长中较小的那一个，相当于键盘上的上、下箭头；\n    horizontalSlider->setSingleStep(2);\n\n    // 获取 单步的步长\n    int step =horizontalSlider->singleStep();\n```\n\n- 设置是否启用滑块追踪：\n\n```\n    // 设置是否启动滑块追踪：true 表示启动追踪；false 表示禁用追踪；\n    // 如果启用了滑块追踪，则滑块在拖动过程中会一直触发 valueChanged 信号；\n    // 如果禁用了滑块追踪，则滑块在拖动过程中不会触发 valueChanged 信号，\n    // 只有在用户释放滑块时，才触发 valueChanged 信号。\n    horizontalSlider->setTracking(true);\n    // 可以通过 hasTracking 属性获取是否启用了追踪：\n    bool isTrack = horizontalSlider->hasTracking();\n```\n\n- 槽函数设定\n\n```\n    valueChanged()//值被改变\n    sliderPressed()//滑块被点击\n    sliderMoved()//滑块移动\n    sliderReleased();//滑块被释放\n```\n\n## 三、TCP通讯\n\n【TCP通信】[HI3861学习笔记（20）——TCP客户端_hi3861 at tcp 指令 erre-CSDN博客](https://blog.csdn.net/qq_36347513/article/details/123099617)\n\n【TCP通信】[教你动手写TCP上位机与小熊派通信_小熊派设备的tcp通信-CSDN博客](https://blog.csdn.net/baidu_29900103/article/details/117970891)\n\n## 四、下位机代码\n\n```\n#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n\n#include \"iot_gpio_ex.h\"\n#include \"ohos_init.h\"\n#include \"cmsis_os2.h\"\n#include \"iot_gpio.h\"\n#include \"iot_uart.h\"\n#include \"hi_uart.h\"\n#include \"iot_watchdog.h\"\n#include \"iot_errno.h\"\n\n#include \"hal_bsp_pcf8574.h\"\n#include \"hal_bsp_wifi.h\"\n#include \"wifi_device.h\"\n#include \"lwip/netifapi.h\"\n#include \"lwip/sockets.h\"\n#include \"lwip/api_shell.h\"\n\n#define    ABS(x)    ((x) > 0 ? (x) : -(x))\n\n#define UART_BUFF_SIZE 100\n#define U_SLEEP_TIME   500000\n#define UART_TIMEOUT_MS 20   // 设置超时时间为100毫秒\n\nosThreadId_t Task1_ID; // 任务1设置为低优先级任务\n#define TASK_STACK_SIZE (1024 * 10)\n#define TCP_SERVER_IP \"192.168.245.23\"\n#define TCP_SERVER_PORT 8888\n\n#define DIR_pos 1 // 正方向\n#define DIR_neg 0 // 反方向\n#define Speed_acc 1000 // 加速度\n#define Speed_dec 1000 // 减速度\n#define Speed_max 2000.0f // 最大速度\n#define motor_raf_0 0 // 相位位置标志\n#define motor_raf_1 1 //绝对位置标志\n#define motor_snf_0 0 // 多机同步运动标志\n#define motor_snf_1 0 // 单机运动标志\n\n//读取数据的枚举值\ntypedef enum {\n  S_VER   = 0,      /* 读取固件版本和对应的硬件版本 */\n  S_RL    = 1,      /* 读取读取相电阻和相电感 */\n  S_PID   = 2,      /* 读取PID参数 */\n  S_ORG   = 3,      /* 读取回零参数 */\n  S_VBUS  = 4,      /* 读取总线电压 */\n  S_CBUS  = 5,      /* 读取总线电流 */\n  S_CPHA  = 6,      /* 读取相电流 */\n  S_ENC   = 7,      /* 读取编码器原始值 */\n  S_CPUL  = 8,      /* 读取实时脉冲数（根据实时位置计算得到的脉冲数） */\n  S_ENCL  = 9,      /* 读取经过线性化校准后的编码器值 */\n  S_TPUL  = 10,     /* 读取输入脉冲数 */\n  S_TPOS  = 11,     /* 读取电机目标位置 */\n  S_OPOS  = 12,     /* 读取电机实时设定的目标位置（开环模式的实时位置） */\n  S_VEL   = 13,     /* 读取电机实时转速 */\n  S_CPOS  = 14,     /* 读取电机实时位置（基于角度编码器累加的电机实时位置） */\n  S_PERR  = 15,     /* 读取电机位置误差 */\n  S_TEMP  = 16,     /* 读取电机实时温度 */\n  S_SFLAG = 17,     /* 读取状态标志位 */\n  S_OFLAG = 18,     /* 读取回零状态标志位 */\n  S_Conf  = 19,     /* 读取驱动参数 */\n  S_State = 20,     /* 读取系统状态参数 */\n}SysParams_t;\n\nvoid Uart1GpioInit(void)//对UART和LED引脚进行初始化\n{\n    IoTGpioInit(IOT_IO_NAME_GPIO_6);\n    // 设置GPIO0的管脚复用关系为UART1_TX Set the pin reuse relationship of GPIO0 to UART1_ TX\n    IoSetFunc(IOT_IO_NAME_GPIO_6, IOT_IO_FUNC_GPIO_6_UART1_TXD);\n    \n    IoTGpioInit(IOT_IO_NAME_GPIO_5);\n    // 设置GPIO1的管脚复用关系为UART1_RX Set the pin reuse relationship of GPIO1 to UART1_ RX\n    IoSetFunc(IOT_IO_NAME_GPIO_5, IOT_IO_FUNC_GPIO_5_UART1_RXD);\n\n    // LED3的GPIO初始化 GPIO initialization of LED3\n    IoTGpioInit(IOT_IO_NAME_GPIO_2);\n    // 设置GPIO9的管脚复用关系为GPIO Set the pin reuse relationship of GPIO9 to GPIO\n    IoSetFunc(IOT_IO_NAME_GPIO_2, IOT_IO_FUNC_GPIO_2_GPIO);\n    // GPIO方向设置为输出 GPIO direction set to output\n    IoTGpioSetDir(IOT_IO_NAME_GPIO_2, IOT_GPIO_DIR_OUT);\n}\n\nvoid Uart1Config(void)//对UART配置初始化\n{\n    uint32_t ret;\n    /* 初始化UART配置，波特率 115200，数据bit为8,停止位1，奇偶校验为NONE */\n    /* Initialize UART configuration, baud rate is 9600, data bit is 8, stop bit is 1, parity is NONE */\n    IotUartAttribute uart_attr = {\n        .baudRate = 115200,\n        .dataBits = 8,\n        .stopBits = 1,\n        .parity = 0,\n    };\n\n    //uart初始化返回值\n    ret = IoTUartInit(HI_UART_IDX_1, &uart_attr);\n    //判断uart是否连接成功\n    if (ret != IOT_SUCCESS) {\n        printf(\"Init Uart1 Falied Error No : %d\\n\", ret);\n        return;\n    }\n}\n\nvoid ZDT_X42_V2_En_Control(uint8_t addr, int state, uint8_t snF)//电机使能控制函数\n{\n    //定义接收值以及数据长度\n    uint32_t count = 0;\n    uint32_t len = 0;\n    unsigned char uartReadBuff[UART_BUFF_SIZE] = {0};\n\n    //定义发送命令数组\n    uint8_t cmd[16] = {0};\n  \n    // 装载命令\n    cmd[0] =  addr;                       // 地址\n    cmd[1] =  0xF3;                       // 功能码\n    cmd[2] =  0xAB;                       // 辅助码\n    cmd[3] =  (uint8_t)state;             // 使能状态\n    cmd[4] =  snF;                        // 多机同步运动标志\n    cmd[5] =  0x6B;                       // 校验字节\n\n    //通过UART的Write函数发送cmd的参数\n    IoTUartWrite(HI_UART_IDX_1, (unsigned char*)cmd, 6);\n}\n\n//电机驱动函数\nvoid ZDT_X42_V2_Traj_Position_Control(uint8_t addr, uint8_t dir, uint16_t acc, uint16_t dec, float velocity, float position, uint8_t raf, uint8_t snF)\n{\n    //定义接收值以及数据长度\n    uint32_t count = 0;\n    uint32_t len = 0;\n    unsigned char uartReadBuff[UART_BUFF_SIZE] = {0};\n    \n    //定义发送命令数组\n    uint8_t cmd[32] = {0};\n    uint16_t vel = 0; uint32_t pos = 0;\n\n    // 将速度和位置放大10倍发送过去\n    vel = (uint16_t)ABS(velocity * 10.0f); \n    pos = (uint32_t)ABS(position * 10.0f);\n\n    // 装载命令\n    cmd[0]  =  addr;                      // 地址\n    cmd[1]  =  0xFD;                      // 功能码\n    cmd[2]  =  dir;                       // 符号（方向）\n    cmd[3]  =  (uint8_t)(acc >> 8);       // 加速加速度(RPM/s)高8位字节\n    cmd[4]  =  (uint8_t)(acc >> 0);       // 加速加速度(RPM/s)低8位字节  \n    cmd[5]  =  (uint8_t)(dec >> 8);       // 减速加速度(RPM/s)高8位字节\n    cmd[6]  =  (uint8_t)(dec >> 0);       // 减速加速度(RPM/s)低8位字节  \n    cmd[7]  =  (uint8_t)(vel >> 8);       // 最大速度(RPM)高8位字节\n    cmd[8]  =  (uint8_t)(vel >> 0);       // 最大速度(RPM)低8位字节 \n    cmd[9]  =  (uint8_t)(pos >> 24);      // 位置(bit24 - bit31)\n    cmd[10] =  (uint8_t)(pos >> 16);      // 位置(bit16 - bit23)\n    cmd[11] =  (uint8_t)(pos >> 8);       // 位置(bit8  - bit15)\n    cmd[12] =  (uint8_t)(pos >> 0);       // 位置(bit0  - bit7 )\n    cmd[13] =  raf;                       // 相位位置/绝对位置标志\n    cmd[14] =  snF;                       // 多机同步运动标志\n    cmd[15] =  0x6B;                      // 校验字节\n\n    //通过UART的Write函数发送cmd的参数\n    IoTUartWrite(HI_UART_IDX_1, (unsigned char*)cmd, 16);\n}\n\nvoid ZDT_X42_V2_Origin_Trigger_Return(uint8_t addr, uint8_t o_mode, bool snF)//电机归零函数，没啥用，需要外界碰撞或者限位，该文件未使用此函数\n{\n    //定义接收值以及数据长度\n    uint32_t count = 0;\n    uint32_t len = 0;\n    unsigned char uartReadBuff[UART_BUFF_SIZE] = {0};\n\n    uint8_t cmd[16] = {0};\n    \n    // 装载命令\n    cmd[0] =  addr;                       // 地址\n    cmd[1] =  0x9A;                       // 功能码\n    cmd[2] =  o_mode;                     // 回零模式，0为单圈就近回零，1为单圈方向回零，2为多圈无限位碰撞回零，3为多圈有限位开关回零\n    cmd[3] =  snF;                        // 多机同步运动标志，false为不启用，true为启用\n    cmd[4] =  0x6B;                       // 校验字节\n\n    //通过UART的Write函数发送cmd的参数\n    IoTUartWrite(HI_UART_IDX_1, (unsigned char*)cmd, 5);\n}\n\nvoid ZDT_X42_V2_Stop_Now(uint8_t addr, uint8_t snF)//立即停机\n{\n    //定义接收值以及数据长度\n    uint32_t count = 0;\n    uint32_t len = 0;\n    unsigned char uartReadBuff[UART_BUFF_SIZE] = {0};\n\n    uint8_t cmd[16] = {0};\n    \n    // 装载命令\n    cmd[0] =  addr;                       // 地址\n    cmd[1] =  0xFE;                       // 功能码\n    cmd[2] =  0x98;                       // 辅助码\n    cmd[3] =  snF;                        // 多机同步运动标志\n    cmd[4] =  0x6B;                       // 校验字节\n\n    //通过UART的Write函数发送cmd的参数\n    IoTUartWrite(HI_UART_IDX_1, (unsigned char*)cmd, 5);\n}\n\nunsigned int IoTUartFlush(unsigned int id) //串口清空函数，用于进行清空UART内部缓存，不然会出现读取错误\n{\n    //定义要存储数组\n    unsigned char buffer[128];\n\n    //定义读取值\n    int read;\n\n    do {\n        //将读取值全部存入数组当中，从而达到清空效果\n        read = IoTUartRead(id, buffer, sizeof(buffer));\n    } while (read > 0);\n\n    return IOT_SUCCESS;\n}\n\nvoid ZDT_X42_V2_Read_Sys_Params(uint8_t addr, SysParams_t s)//读取电机的实时位置\n{\n    //定义发送数组\n    uint8_t cmd[16] = {0};\n  \n    // 装载命令\n    cmd[0] =  addr;                       // 地址\n\n    //对功能码进行选择\n    switch(s)                             // 功能码\n    {\n        case S_VER   : cmd[1] = 0x1F; break;                  /* 读取固件版本和对应的硬件版本 */\n        case S_RL    : cmd[1] = 0x20; break;                  /* 读取读取相电阻和相电感 */\n        case S_PID   : cmd[1] = 0x21; break;                  /* 读取PID参数 */\n        case S_ORG   : cmd[1] = 0x22; break;                  /* 读取回零参数 */\n        case S_VBUS  : cmd[1] = 0x24; break;                  /* 读取总线电压 */\n        case S_CBUS  : cmd[1] = 0x26; break;                  /* 读取总线电流 */\n        case S_CPHA  : cmd[1] = 0x27; break;                  /* 读取相电流 */\n        case S_ENC   : cmd[1] = 0x29; break;                  /* 读取编码器原始值 */\n        case S_CPUL  : cmd[1] = 0x30; break;                  /* 读取实时脉冲数（根据实时位置计算得到的脉冲数） */\n        case S_ENCL  : cmd[1] = 0x31; break;                  /* 读取经过线性化校准后的编码器值 */\n        case S_TPUL  : cmd[1] = 0x32; break;                  /* 读取输入脉冲数 */\n        case S_TPOS  : cmd[1] = 0x33; break;                  /* 读取电机目标位置 */\n        case S_OPOS  : cmd[1] = 0x34; break;                  /* 读取电机实时设定的目标位置（开环模式的实时位置） */\n        case S_VEL   : cmd[1] = 0x35; break;                  /* 读取电机实时转速 */\n        case S_CPOS  : cmd[1] = 0x36; break;                  /* 读取电机实时位置（基于角度编码器累加的电机实时位置） */\n        case S_PERR  : cmd[1] = 0x37; break;                  /* 读取电机位置误差 */\n        case S_TEMP  : cmd[1] = 0x39; break;                  /* 读取电机实时温度 */\n        case S_SFLAG : cmd[1] = 0x3A; break;                  /* 读取状态标志位 */\n        case S_OFLAG : cmd[1] = 0x3B; break;                  /* 读取回零状态标志位 */\n        case S_Conf  : cmd[1] = 0x42; cmd[2] = 0x6C; break;   /* 读取驱动参数 */\n        case S_State : cmd[1] = 0x43; cmd[2] = 0x7A; break;   /* 读取系统状态参数 */\n        default: break;\n    }\n\n    // 如果需要四字节，将校验字节放在 cmd[3]\n    cmd[2] = 0x6B; \n\n    //通过UART的Write函数发送cmd的参数\n    IoTUartWrite(HI_UART_IDX_1, (unsigned char*)cmd, 3);\n}\n\nvoid ZDT_X42_V2_Receive_Data(uint8_t addr, uint8_t *rxCmd, uint32_t *rxCount) \n{\n    uint32_t startTime = osKernelGetTickCount();  // 获取当前系统时间\n    uint8_t buffer[UART_BUFF_SIZE];\n    int len;\n\n    while (1) {\n        len = IoTUartRead(HI_UART_IDX_1, buffer, sizeof(buffer));  // 从UART读取数据\n        if (len > 0) {\n            // 将读取的数据复制到rxCmd数组中，确保不会溢出\n            uint32_t copySize = (*rxCount + len > UART_BUFF_SIZE) ? (UART_BUFF_SIZE - *rxCount) : len;\n            memcpy(rxCmd + *rxCount, buffer, copySize);\n            *rxCount += copySize;\n\n            startTime = osKernelGetTickCount();  // 更新最后一次接收数据的时间\n        }\n\n        // 检查是否超时\n        if ((osKernelGetTickCount() - startTime) > UART_TIMEOUT_MS) {\n            break;  // 如果超过设定的超时时间，则停止接收数据\n        }\n    }\n}\n\nfloat absolute(float value) //找不到绝对值的函数值定义，自己创建一个函数用于进行绝对值计算\n{\n    return (value < 0) ? -value : value;//判断如何取正\n}\n\nfloat ReadMotorAngle(uint8_t sliderId) //定义读取角度，并计算和输出角度值\n{\n    //清空缓存区\n    IoTUartFlush(HI_UART_IDX_1);\n\n    //定义角度取值为小数点后一位\n    float pos = 0.0f, Motor_Cur_Pos = 0.0f;\n\n    // 定义接收数据数组、接收数据长度\n    uint8_t rxCmd[UART_BUFF_SIZE] = {0};\n    uint32_t rxCount = 0;\n\n    // 读取电机实时位置\n    ZDT_X42_V2_Read_Sys_Params(sliderId, S_CPOS);\n\n    // 等待返回命令，命令数据缓存在数组rxCmd上，长度为rxCount\n    ZDT_X42_V2_Receive_Data(sliderId, rxCmd, &rxCount);\n\n    //将读取的rxCmd[]十六进制编码打印，用于测试调试\n    // printf(\"Received bytes: \");\n    // for (int i = 0; i < 8; i++) {\n    //     printf(\"%02X \", rxCmd[i]);\n    // }\n    // printf(\"\\n\");\n\n    // 获取电机实时角度返回值（电机实时角度返回值放大了10倍返回的，因为要保留1位小数）\n    pos = ((uint32_t)rxCmd[3] << 24) | ((uint32_t)rxCmd[4] << 16) | ((uint32_t)rxCmd[5] << 8) | (uint32_t)rxCmd[6];\n\n    // 缩小10倍，并判断符号，得到真正的实时角度，存放在浮点数变量Motor_Cur_Pos中\n    Motor_Cur_Pos = pos * 0.1f;\n    if (rxCmd[2]) {\n        Motor_Cur_Pos = -Motor_Cur_Pos;\n    }\n\n    // 打印解析后的角度值\n    printf(\"Current position (as angle): %.1f degrees\\n\", Motor_Cur_Pos);\n\n    return Motor_Cur_Pos;\n}\n\nvoid ResetMotorToOrigin(uint8_t sliderId) //电机归零函数\n{\n    //读取电机目前角度\n    float Motor_Cur_Pos = ReadMotorAngle(sliderId);\n\n    float targetPosition = 0; // 目标位置，这里假设为0度\n\n    // 根据当前角度和目标位置计算需要移动的距离\n    float delta = targetPosition - Motor_Cur_Pos;\n\n    // 将 delta 四舍五入到小数点后一位\n    //delta = ((int)(delta * 10 + 0.5)) / 10.0f;\n\n    printf(\"delta: %.1f degrees\\n\", delta);\n\n    // 调用轨迹位置控制函数将电机移动到目标位置\n    ZDT_X42_V2_Traj_Position_Control(sliderId, (delta < 0) ? 1 : 0, Speed_acc, Speed_dec, Speed_max, absolute(delta), motor_raf_0, motor_snf_0);\n}\n\nvoid ParseJson(const char* json)//电机uart运行主函数\n{\n    // 定义JSON键的字符串，根据上位机所需进行定义，格式类型相同\n    const char* labelStr = \"\\\"label\\\":\";\n    const char* motor_EnStr = \"\\\"motor_En\\\":\";\n    const char* sliderIdStr = \"\\\"sliderId\\\":\";\n    const char* valueStr = \"\\\"value\\\":\";\n    \n\n    // 找到JSON字符串中键的位置，用于进行键的连接，等于找到对应的标签\n    char* labelPos = strstr(json, labelStr);\n    char* motor_EnPos = strstr(json, motor_EnStr);\n    char* sliderIdPos = strstr(json, sliderIdStr);\n    char* valuePos = strstr(json, valueStr);\n\n    // 如果找到键，解析其对应的值\n    if (labelPos != NULL && motor_EnPos != NULL && sliderIdPos != NULL && valuePos != NULL) {\n        int label = atoi(labelPos + strlen(labelStr)); // 将label转换为整数\n        int sliderId = atoi(sliderIdPos + strlen(sliderIdStr)); // 将sliderId转换为整数\n\n        //放大30倍，对应谐波减速器\n        int value = atof(valuePos + strlen(valueStr));\n        int motor_En = atoi(motor_EnPos + strlen(motor_EnStr));\n\n        // 打印解析出的值\n        printf(\"label: %d, motor_En: %d, Slider ID: %d, Value: %d\\n\", label, motor_En, sliderId, value);\n\n        // 根据Slider ID和Value执行相应的操作\n        if (label == 1) \n        {\n            if (sliderId == 1){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            } \n            else if (sliderId == 2){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            }\n            else if (sliderId == 3){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            }\n            else if (sliderId == 4){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            }\n            else if (sliderId == 5){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            }\n            else if (sliderId == 6){\n                if(motor_En == 1){\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 使能\n                }\n                else{\n                    ZDT_X42_V2_En_Control(sliderId, motor_En, motor_snf_0);  // 失能\n                }\n            }\n        } \n        else if (label == 2) \n        {\n            if (sliderId == 1){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            } \n            else if (sliderId == 2){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            }\n            else if (sliderId == 3){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            }\n            else if (sliderId == 4){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            }\n            else if (sliderId == 5){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            }\n            else if (sliderId == 6){\n                float value_before = ReadMotorAngle(sliderId);  //读取电机现在角度值\n                float delta_value = value - value_before;  // 计算想要的变化值\n                if (delta_value <= 0) {  //利用值的正负，判断电机正反转\n                    //正转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码\n                }\n                else{\n                    //反转\n                    ZDT_X42_V2_Traj_Position_Control(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, absolute(delta_value), motor_raf_0, motor_snf_0);\n                    //IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码\n                }\n            }\n            \n        }\n        else if (label == 3) //电机紧急停机\n        {\n            ZDT_X42_V2_Stop_Now(1, 0);  //调用停机函数\n            usleep(50);  //延时确保函数依次执行\n            ZDT_X42_V2_Stop_Now(2, 0);\n            usleep(50);\n            ZDT_X42_V2_Stop_Now(3, 0);\n            usleep(50);\n            ZDT_X42_V2_Stop_Now(4, 0);\n            usleep(50);\n            ZDT_X42_V2_Stop_Now(5, 0);\n            usleep(50);\n            ZDT_X42_V2_Stop_Now(6, 0);\n            usleep(50);\n        }\n        else if (label == 4) //电机复位函数\n        {\n            ResetMotorToOrigin(1);  //调用复位函数\n            usleep(50);  //延时确保函数依次执行\n            ResetMotorToOrigin(2);\n            usleep(50);\n            ResetMotorToOrigin(3);\n            usleep(50);\n            ResetMotorToOrigin(4);\n            usleep(50);\n            ResetMotorToOrigin(5);\n            usleep(50);\n            ResetMotorToOrigin(6);\n            usleep(50);\n        }\n    }\n}\n\nvoid Task1(void)//系统主函数\n{\n    int socket_fd = 0;\n    char buff[256];\n    int re = 0;\n\n    uint32_t count_0 = 0;\n    uint32_t len_0 = 0;\n    unsigned char uartReadBuff_0[UART_BUFF_SIZE] = {0};\n\n    // 对UART1的一些初始化 Some initialization of UART1\n    Uart1GpioInit();\n    // 对UART1参数的一些配置 Some configurations of UART1 parameters\n    Uart1Config();\n\n    // 连接Wifi\n    WiFi_connectHotspots(\"esp32\", \"12345678\");\n    socket_fd = socket(AF_INET, SOCK_STREAM, 0); // 创建套接字（TCP）\n    struct sockaddr_in addr;\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(TCP_SERVER_PORT);\n    addr.sin_addr.s_addr = inet_addr(TCP_SERVER_IP); // 填写服务器的IP地址\n\n    re = connect(socket_fd, (struct sockaddr *)&addr, sizeof(addr)); // 连接服务器\n    if (re == -1) {\n        printf(\"Failed to connect to the server\\r\\n\");\n        return;\n    }\n    printf(\"Connection to server successful\\r\\n\");\n\n    // 发送第一条数据\n    send(socket_fd, \"Connection to server successful.\", strlen(\"Connection to server successful.\"), 0);\n\n    while (1) {\n        memset_s(buff, sizeof(buff), 0, sizeof(buff));\n        re = recv(socket_fd, buff, sizeof(buff), 0); //\t接收客户端发送过来的消息\n        if (re <= 0) \n        {\n            break;\n        } else {\n            ParseJson(buff);//执行控制主函数\n        }\n    }\n    close(socket_fd);\n}\n\nvoid UartExampleEntry(void)//配置上报函数\n{\n    //osThreadAttr_t attr;\n    IoTWatchDogDisable();\n\n    osThreadAttr_t options;\n    options.name = \"thread_1\";\n    options.attr_bits = 0;\n    options.cb_mem = NULL;\n    options.cb_size = 0;\n    options.stack_mem = NULL;\n    options.stack_size = TASK_STACK_SIZE;\n    options.priority = osPriorityNormal;\n\n    Task1_ID = osThreadNew((osThreadFunc_t)Task1, NULL, &options);\n    if (Task1_ID != NULL) {\n        printf(\"ID = %d, Create Task1_ID is OK!\\r\\n\", Task1_ID);\n    }\n}\n\nAPP_FEATURE_INIT(UartExampleEntry);\n```\n\n","slug":"20240429ZYY-Hi3861开发","published":1,"updated":"2024-07-26T09:54:57.206Z","_id":"clz1edk9t000bx8uw5cy70cj4","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Hi3861开发\"><a href=\"#Hi3861开发\" class=\"headerlink\" title=\"Hi3861开发\"></a>Hi3861开发</h1><h2 id=\"一、学习资料\"><a href=\"#一、学习资料\" class=\"headerlink\" title=\"一、学习资料\"></a>一、学习资料</h2><ul>\n<li><p>【UART串口使用】<a href=\"https://blog.csdn.net/qq_36347513/article/details/121603716\">HI3861学习笔记（18）——UART串口使用_hi3861 uart-CSDN博客</a></p>\n</li>\n<li><p>【开发环境搭建】[2.1 Pegasus开发环境搭建.md · HiSpark&#x2F;HiSpark_NICU2023 - Gitee.com](<a href=\"https://gitee.com/HiSpark/HiSpark_NICU2023/blob/master/2.1\">https://gitee.com/HiSpark/HiSpark_NICU2023/blob/master/2.1</a> Pegasus开发环境搭建.md)</p>\n</li>\n<li><p>【入门demo】<a href=\"https://docs.openharmony.cn/pages/v4.0/zh-cn/device-dev/quick-start/quickstart-ide-3861-helloworld.md\">编写 Hello World”程序 (openharmony.cn)</a></p>\n</li>\n<li><p>【UART串口读取】<a href=\"https://bbs.huaweicloud.com/blogs/detail/281809\">HarmonyOS小熊派 | HarmonyOS基础外设开发–UART数据读写-云社区-华为云 (huaweicloud.com)</a></p>\n</li>\n<li><p>【QT转EXE格式】<a href=\"https://www.cnblogs.com/JinShanCheShen/p/16194526.html\">QT打包成exe详细步骤 - 西北小蚂蚁 - 博客园 (cnblogs.com)</a></p>\n</li>\n<li><p>【QT转EXE格式编译报错】<a href=\"https://blog.csdn.net/weijifen000/article/details/102537640\">Qt软件打包后报错“无法定位程序输入点_ZN10QArrayData10deallocateEPs_jj于动态链接库….. .exe上。”解决办法-CSDN博客</a></p>\n</li>\n</ul>\n<h2 id=\"二、QT开发\"><a href=\"#二、QT开发\" class=\"headerlink\" title=\"二、QT开发\"></a>二、QT开发</h2><ul>\n<li><p>geometry里的宽度、高度是分辨率，比如geometry设置为宽<em>高为1920</em>1080</p>\n</li>\n<li><p>【窗口自适应】<a href=\"https://cloud.tencent.com/developer/article/2286080\">【QT】QT Designer控件随窗口大小自适应-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>\n</li>\n<li><p>【串口发送】<a href=\"https://blog.csdn.net/qq_26904271/article/details/132646641\">QT串口助手：识别串口号，发送，接收，十六进制_qt串口发送16进制数据-CSDN博客</a></p>\n</li>\n<li><p>foreach是QT中的一个关键字，其作用是对第二个参数中的对象进行遍历，把遍历过程中的每个对象依次赋给第一个参数，并执行花括号中的内容。在这里，就是把可获取的串口列表availablePorts()中的串口，逐个将其串口号添加到combobox中。</p>\n</li>\n</ul>\n<h3 id=\"1-串口设定\"><a href=\"#1-串口设定\" class=\"headerlink\" title=\"1.串口设定\"></a>1.串口设定</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"> \t<span class=\"hljs-comment\">//mainwindow.h文件调用串口头文件</span><br> \t<span class=\"hljs-comment\">//串口头文件</span><br> \t#include &lt;QSerialPort&gt;<br>#include &lt;QSerialPortInfo&gt;<br> \t<br> \t<span class=\"hljs-comment\">//mainwindow.cpp文件中的MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找</span><br> \t<span class=\"hljs-comment\">//使用foreach函数查找串口信息</span><br>foreach (const QSerialPortInfo &amp;portInfo,QSerialPortInfo::availablePorts()) <br> \t&#123;<br>     <span class=\"hljs-comment\">//将所有搜索的值写入serialport端口当中</span><br>     <span class=\"hljs-function\"><span class=\"hljs-title\">ui</span>-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">serialport</span>-&gt;</span>addItem(portInfo.portName());<br> \t&#125;<br> \t<span class=\"hljs-comment\">//打开串口</span><br> \t<span class=\"hljs-function\"><span class=\"hljs-title\">serialPort</span>-&gt;</span>open();<br> \t<span class=\"hljs-comment\">//关闭串口</span><br> \t<span class=\"hljs-function\"><span class=\"hljs-title\">serialPort</span>-&gt;</span>close();<br> \t<br> \t<span class=\"hljs-comment\">//串口写入</span><br> \t<span class=\"hljs-function\"><span class=\"hljs-title\">serialPort</span>-&gt;</span>write(<span class=\"hljs-string\">&quot;*****&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-读取下拉选项内容并赋予\"><a href=\"#2-读取下拉选项内容并赋予\" class=\"headerlink\" title=\"2.读取下拉选项内容并赋予\"></a>2.读取下拉选项内容并赋予</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-comment\">//mainwindow.cpp文件中，自定义函数设定</span><br><br><span class=\"hljs-comment\">//定义参数格式为QString</span><br>QString mBaudrate;<span class=\"hljs-comment\">//波特率</span><br>QString mStopBits;<span class=\"hljs-comment\">//停止位字节</span><br>   QString mDataBits;<span class=\"hljs-comment\">//数据字节</span><br>   QString mParity;<span class=\"hljs-comment\">//奇偶校验</span><br>   <br><span class=\"hljs-comment\">//读取baudrate槽中currentText()所选定的内容，后续类似</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">mBaudrate</span> = ui-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">baudrate</span>-&gt;</span>currentText();<br><span class=\"hljs-function\"><span class=\"hljs-title\">mStopBits</span> = ui-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">stopbits</span>-&gt;</span>currentText();<br>   <span class=\"hljs-function\"><span class=\"hljs-title\">mDataBits</span> = ui-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">databits</span>-&gt;</span>currentText();<br>   <span class=\"hljs-function\"><span class=\"hljs-title\">mParity</span> = ui-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">parity</span>-&gt;</span>currentText();<br><br><span class=\"hljs-comment\">//判断起选定内容是否符合需求，并赋予相应操作</span><br><span class=\"hljs-keyword\">if</span>(mBaudrate == <span class=\"hljs-string\">&quot;9600&quot;</span>) <br>&#123;<br>\t<span class=\"hljs-comment\">//将串口波特率设定为9600</span><br>       mSerialPort.setBaudRate(QSerialPort::Baud9600);<span class=\"hljs-comment\">//Baud9600、Baud115200</span><br>       mSerialPort.setStopBits(QSerialPort::OneStop);<span class=\"hljs-comment\">//OneStop-1、OneAndHalfStop-1.5、TwoStop-2</span><br>       mSerialPort.setDataBits(QSerialPort::Data5);<span class=\"hljs-comment\">//Data5、Data6、Data7、Data8</span><br>       mSerialPort.setParity(QSerialPort::OddParity);<span class=\"hljs-comment\">//OddParity-奇校验、EvenParity-偶校验、NoParity无校验</span><br>   &#125; <br>   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(mBaudrate == <span class=\"hljs-string\">&quot;115200&quot;</span>) <br>   &#123;<br>   \t<span class=\"hljs-comment\">//将串口波特率设定为115200</span><br>       mSerialPort.setBaudRate(QSerialPort::Baud19200);<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-摄像头设定\"><a href=\"#3-摄像头设定\" class=\"headerlink\" title=\"3.摄像头设定\"></a>3.摄像头设定</h3><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-comment\">//***.pro格式文件加入multimediawidgets</span><br>QT       += core gui multimediawidgets<br><br><span class=\"hljs-comment\">//mainwindow.h文件调用摄像头头文件</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QCameraImageCapture&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QCamera&gt;</span></span><br><br><span class=\"hljs-comment\">//mainwindow.cpp文件中的MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找</span><br><span class=\"hljs-comment\">//获取系统的所有可用的摄像头</span><br>foreach(const QCameraInfo <span class=\"hljs-variable\">&amp;</span>cameraInfo , QCameraInfo::availableCameras())<br>   <span class=\"hljs-punctuation\">&#123;</span><br>       <span class=\"hljs-comment\">//将所有搜索的值写入cameraBox端口当中</span><br>       ui-&gt;cameraBox-&gt;addItem(cameraInfo.deviceName())<span class=\"hljs-punctuation\">;</span><br>   <span class=\"hljs-punctuation\">&#125;</span><br>   <br>   <span class=\"hljs-comment\">//打开摄像头</span><br>   cameraPort-&gt;start()<span class=\"hljs-punctuation\">;</span><br>   <span class=\"hljs-comment\">//关闭摄像头</span><br>   cameraPort-&gt;stop()<span class=\"hljs-punctuation\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-QT中setCheckable-的作用\"><a href=\"#4-QT中setCheckable-的作用\" class=\"headerlink\" title=\"4.QT中setCheckable()的作用\"></a>4.QT中setCheckable()的作用</h3><p>setCheckable()设置为True时才有可能使得status为True（即设置后按钮想点灯开关一样，能够按一下保持一直开，再按下保持一直关），否则开关点击一下后仍为关闭状态，status一直为False。</p>\n<h3 id=\"5-TCP通讯\"><a href=\"#5-TCP通讯\" class=\"headerlink\" title=\"5.TCP通讯\"></a>5.TCP通讯</h3><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-comment\">//***.pro格式文件加入network</span><br>QT       += network<br><br><span class=\"hljs-comment\">//mainwindow.h头文件中引用</span><br>#include &lt;QTcpServer&gt;<br>#include &lt;QTcpSocket&gt;<br><span class=\"hljs-comment\">//定义*socket和*server用来存放服务器的套接字和监听，用于与客户端进行通信</span><br>QTcpSocket *socket;<br>   QTcpServer *server;<br><br><span class=\"hljs-comment\">//mainwindow.cpp文件中MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找</span><br><span class=\"hljs-comment\">//setCheckable()设置为True时才有可能使得status为True（即设置后按钮想点灯开关一样，能够按一下保持一直开，再按下保持一直关），否则开关点击一下后仍为关闭状态，status一直为False。</span><br>ui-&gt;Monitor_OPEN-&gt;setCheckable(<span class=\"hljs-keyword\">true</span>);<span class=\"hljs-comment\">//简而言之就是按键的常开和常闭切换</span><br><span class=\"hljs-comment\">//创建服务器的套接字，用于与客户端进行通信</span><br>socket = <span class=\"hljs-keyword\">new</span> QTcpSocket();<br><span class=\"hljs-comment\">//声明一个QTcpserver的对象，用于监听</span><br>   server = <span class=\"hljs-keyword\">new</span> QTcpServer();<br>   <span class=\"hljs-comment\">//信号：新的客户端连接建立 槽函数：获取客户端套接字，允许写入数据</span><br>   connect(server,SIGNAL(newConnection()),this,SLOT(newConnection_SLOT()));<br>   <br>   <span class=\"hljs-comment\">//定义新函数MainWindow::newConnection_SLOT()，用于新的客户端连接建立槽函数：获取客户端套接字，允许写入数据</span><br>   void MainWindow::newConnection_SLOT()<br>   &#123;<br>       socket = server-&gt;nextPendingConnection(); <span class=\"hljs-comment\">//获取已经连接的客户端套接字</span><br>       connect(socket,SIGNAL(readyRead()),this,SLOT(readyRead_SLOT()));<span class=\"hljs-comment\">//如果socket中有缓存消息，触发槽函数</span><br>   &#125;<br>   <br>   <span class=\"hljs-comment\">//定义新函数MainWindow::readyRead_SLOT()，用于接收消息并显示到接收框</span><br>   void MainWindow::readyRead_SLOT()<br>   &#123;<br>       qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Server Received!&quot;</span>;<br>       QString buffer;<span class=\"hljs-comment\">//定义容器</span><br>       <span class=\"hljs-comment\">//读取缓冲区数据</span><br>       buffer = socket-&gt;readAll();<br>       <span class=\"hljs-keyword\">if</span>(!buffer.isEmpty())<br>       &#123;<br>           <span class=\"hljs-comment\">//刷新显示，写入Receive_text组件，组件类型为Plain Text Line</span><br>           ui-&gt;Receive_text-&gt;appendPlainText(buffer);<br>       &#125;<br>   &#125;<br>   <br>   <span class=\"hljs-comment\">//连接组件函数，按下开始监听组件Monitor_OPEN，类型为clicked(bool checked)，执行监听程序</span><br>   void MainWindow::on_Monitor_OPEN_clicked(<span class=\"hljs-keyword\">bool</span> checked)<br>   &#123;<br>       <span class=\"hljs-keyword\">if</span>(checked)<span class=\"hljs-comment\">//如果按下了</span><br>       &#123;<br>           <span class=\"hljs-keyword\">int</span> port = ui-&gt;PORT_TEXT-&gt;text().toUInt();<br>           <span class=\"hljs-comment\">//如果未监听到</span><br>           <span class=\"hljs-keyword\">if</span>(!server-&gt;listen(QHostAddress::Any, port))<br>           &#123;<br>               qDebug() &lt;&lt; server-&gt;errorString();<br>               <span class=\"hljs-comment\">//连接失败，再次点击则重新连接，将checked恢复为true</span><br>               ui-&gt;Monitor_OPEN-&gt;toggle();<br>               <span class=\"hljs-keyword\">return</span>;<br>           &#125;<br>           qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Listen Successfully! Message from port:&quot;</span> &lt;&lt; port;<br>           <span class=\"hljs-comment\">//修改按钮文字</span><br>           ui-&gt;Monitor_OPEN-&gt;setText(<span class=\"hljs-string\">&quot;停止监听&quot;</span>);<br>           <span class=\"hljs-comment\">//发送键使能</span><br>           ui-&gt;Send_Button-&gt;setEnabled(<span class=\"hljs-keyword\">true</span>);<br>       &#125;<br>       <span class=\"hljs-keyword\">else</span><br>       &#123;<br>            qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Stop Listening!&quot;</span>;<br>           <span class=\"hljs-comment\">//如果已经连接则断开连接</span><br>           <span class=\"hljs-keyword\">if</span>(socket-&gt;state() == QAbstractSocket::ConnectedState)<br>           &#123;<br>               <span class=\"hljs-comment\">//断开连接</span><br>               socket-&gt;disconnectFromHost();<br>           &#125;<br>           <span class=\"hljs-comment\">//关闭倾听服务</span><br>           server-&gt;close();<br>           <span class=\"hljs-comment\">//修改按钮文字&amp;发送键静默</span><br>           ui-&gt;Monitor_OPEN-&gt;setText(<span class=\"hljs-string\">&quot;开始监听&quot;</span>);<br>           ui-&gt;Send_Button-&gt;setEnabled(<span class=\"hljs-keyword\">false</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-滑动槽设定\"><a href=\"#6-滑动槽设定\" class=\"headerlink\" title=\"6.滑动槽设定\"></a>6.滑动槽设定</h3><ul>\n<li>首先使用setRange()方法设置了滑动条的范围为0到100，然后使用setValue()方法设置了滑动条的当前值为50。通过value()方法可以获取当前滑动条的值。最后，使用connect()方法监听了滑动条的值变化，当值发生变化时，会调用onSliderValueChanged()槽函数。</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">// 假设有一个QSlider对象名为slider<br>// 设置滑动条的范围<br>slider-&gt;setRange(-180, 180);<br><br>// 设置滑动条的当前值<br>slider-&gt;setValue(0);<br><br>// 获取滑动条的当前值<br>int currentValue = slider-&gt;value();<br><br>// 监听滑动条的值变化<br>connect(slider, SIGNAL(valueChanged(int)), this, SLOT(onSliderValueChanged(int)));<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>slider 提供了两个自然的步长；较大的步长用 pageStep 表示，相当于按下键盘上的 PageDown 和 PageUp，也相当于鼠标点击时移动的步进值:；较小的步长用 singleStep 表示，相当于按下键盘上的上、下键；</li>\n</ul>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-comment\">// 设置移动每页的步长，滑块提供的两个自然步长中较大的那一个，相当于键盘上的 PageUp 和 PageDown；</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">horizontalSlider</span>-&gt;</span>setPageStep(<span class=\"hljs-number\">10</span>);<br><br><span class=\"hljs-comment\">// 获取 每页的步长</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">int</span> step = horizontalSlider-&gt;</span>pageStep();<br><br><span class=\"hljs-comment\">// 设置移动单步的步长，滑块提供的两个自然步长中较小的那一个，相当于键盘上的上、下箭头；</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">horizontalSlider</span>-&gt;</span>setSingleStep(<span class=\"hljs-number\">2</span>);<br><br><span class=\"hljs-comment\">// 获取 单步的步长</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">int</span> step =horizontalSlider-&gt;</span>singleStep();<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>设置是否启用滑块追踪：</li>\n</ul>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-comment\">// 设置是否启动滑块追踪：true 表示启动追踪；false 表示禁用追踪；</span><br><span class=\"hljs-comment\">// 如果启用了滑块追踪，则滑块在拖动过程中会一直触发 valueChanged 信号；</span><br><span class=\"hljs-comment\">// 如果禁用了滑块追踪，则滑块在拖动过程中不会触发 valueChanged 信号，</span><br><span class=\"hljs-comment\">// 只有在用户释放滑块时，才触发 valueChanged 信号。</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">horizontalSlider</span>-&gt;</span>setTracking(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-comment\">// 可以通过 hasTracking 属性获取是否启用了追踪：</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">bool</span> isTrack = horizontalSlider-&gt;</span>hasTracking();<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>槽函数设定</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-built_in\">valueChanged</span>()<span class=\"hljs-comment\">//值被改变</span><br><span class=\"hljs-built_in\">sliderPressed</span>()<span class=\"hljs-comment\">//滑块被点击</span><br><span class=\"hljs-built_in\">sliderMoved</span>()<span class=\"hljs-comment\">//滑块移动</span><br><span class=\"hljs-built_in\">sliderReleased</span>();<span class=\"hljs-comment\">//滑块被释放</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三、TCP通讯\"><a href=\"#三、TCP通讯\" class=\"headerlink\" title=\"三、TCP通讯\"></a>三、TCP通讯</h2><p>【TCP通信】<a href=\"https://blog.csdn.net/qq_36347513/article/details/123099617\">HI3861学习笔记（20）——TCP客户端_hi3861 at tcp 指令 erre-CSDN博客</a></p>\n<p>【TCP通信】<a href=\"https://blog.csdn.net/baidu_29900103/article/details/117970891\">教你动手写TCP上位机与小熊派通信_小熊派设备的tcp通信-CSDN博客</a></p>\n<h2 id=\"四、下位机代码\"><a href=\"#四、下位机代码\" class=\"headerlink\" title=\"四、下位机代码\"></a>四、下位机代码</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;iot_gpio_ex.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;ohos_init.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;cmsis_os2.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;iot_gpio.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;iot_uart.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;hi_uart.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;iot_watchdog.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;iot_errno.h&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;hal_bsp_pcf8574.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;hal_bsp_wifi.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;wifi_device.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;lwip/netifapi.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;lwip/sockets.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;lwip/api_shell.h&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span>    ABS(x)    ((x) &gt; 0 ? (x) : -(x))</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> UART_BUFF_SIZE 100</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> U_SLEEP_TIME   500000</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> UART_TIMEOUT_MS 20   <span class=\"hljs-comment\">// 设置超时时间为100毫秒</span></span><br><br>osThreadId_t Task1_ID; <span class=\"hljs-comment\">// 任务1设置为低优先级任务</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TASK_STACK_SIZE (1024 * 10)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TCP_SERVER_IP <span class=\"hljs-string\">&quot;192.168.245.23&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TCP_SERVER_PORT 8888</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> DIR_pos 1 <span class=\"hljs-comment\">// 正方向</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> DIR_neg 0 <span class=\"hljs-comment\">// 反方向</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> Speed_acc 1000 <span class=\"hljs-comment\">// 加速度</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> Speed_dec 1000 <span class=\"hljs-comment\">// 减速度</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> Speed_max 2000.0f <span class=\"hljs-comment\">// 最大速度</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> motor_raf_0 0 <span class=\"hljs-comment\">// 相位位置标志</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> motor_raf_1 1 <span class=\"hljs-comment\">//绝对位置标志</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> motor_snf_0 0 <span class=\"hljs-comment\">// 多机同步运动标志</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> motor_snf_1 0 <span class=\"hljs-comment\">// 单机运动标志</span></span><br><br><span class=\"hljs-comment\">//读取数据的枚举值</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">enum</span> &#123;<br>  S_VER   = <span class=\"hljs-number\">0</span>,      <span class=\"hljs-comment\">/* 读取固件版本和对应的硬件版本 */</span><br>  S_RL    = <span class=\"hljs-number\">1</span>,      <span class=\"hljs-comment\">/* 读取读取相电阻和相电感 */</span><br>  S_PID   = <span class=\"hljs-number\">2</span>,      <span class=\"hljs-comment\">/* 读取PID参数 */</span><br>  S_ORG   = <span class=\"hljs-number\">3</span>,      <span class=\"hljs-comment\">/* 读取回零参数 */</span><br>  S_VBUS  = <span class=\"hljs-number\">4</span>,      <span class=\"hljs-comment\">/* 读取总线电压 */</span><br>  S_CBUS  = <span class=\"hljs-number\">5</span>,      <span class=\"hljs-comment\">/* 读取总线电流 */</span><br>  S_CPHA  = <span class=\"hljs-number\">6</span>,      <span class=\"hljs-comment\">/* 读取相电流 */</span><br>  S_ENC   = <span class=\"hljs-number\">7</span>,      <span class=\"hljs-comment\">/* 读取编码器原始值 */</span><br>  S_CPUL  = <span class=\"hljs-number\">8</span>,      <span class=\"hljs-comment\">/* 读取实时脉冲数（根据实时位置计算得到的脉冲数） */</span><br>  S_ENCL  = <span class=\"hljs-number\">9</span>,      <span class=\"hljs-comment\">/* 读取经过线性化校准后的编码器值 */</span><br>  S_TPUL  = <span class=\"hljs-number\">10</span>,     <span class=\"hljs-comment\">/* 读取输入脉冲数 */</span><br>  S_TPOS  = <span class=\"hljs-number\">11</span>,     <span class=\"hljs-comment\">/* 读取电机目标位置 */</span><br>  S_OPOS  = <span class=\"hljs-number\">12</span>,     <span class=\"hljs-comment\">/* 读取电机实时设定的目标位置（开环模式的实时位置） */</span><br>  S_VEL   = <span class=\"hljs-number\">13</span>,     <span class=\"hljs-comment\">/* 读取电机实时转速 */</span><br>  S_CPOS  = <span class=\"hljs-number\">14</span>,     <span class=\"hljs-comment\">/* 读取电机实时位置（基于角度编码器累加的电机实时位置） */</span><br>  S_PERR  = <span class=\"hljs-number\">15</span>,     <span class=\"hljs-comment\">/* 读取电机位置误差 */</span><br>  S_TEMP  = <span class=\"hljs-number\">16</span>,     <span class=\"hljs-comment\">/* 读取电机实时温度 */</span><br>  S_SFLAG = <span class=\"hljs-number\">17</span>,     <span class=\"hljs-comment\">/* 读取状态标志位 */</span><br>  S_OFLAG = <span class=\"hljs-number\">18</span>,     <span class=\"hljs-comment\">/* 读取回零状态标志位 */</span><br>  S_Conf  = <span class=\"hljs-number\">19</span>,     <span class=\"hljs-comment\">/* 读取驱动参数 */</span><br>  S_State = <span class=\"hljs-number\">20</span>,     <span class=\"hljs-comment\">/* 读取系统状态参数 */</span><br>&#125;SysParams_t;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Uart1GpioInit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><span class=\"hljs-comment\">//对UART和LED引脚进行初始化</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">IoTGpioInit</span>(IOT_IO_NAME_GPIO_6);<br>    <span class=\"hljs-comment\">// 设置GPIO0的管脚复用关系为UART1_TX Set the pin reuse relationship of GPIO0 to UART1_ TX</span><br>    <span class=\"hljs-built_in\">IoSetFunc</span>(IOT_IO_NAME_GPIO_6, IOT_IO_FUNC_GPIO_6_UART1_TXD);<br>    <br>    <span class=\"hljs-built_in\">IoTGpioInit</span>(IOT_IO_NAME_GPIO_5);<br>    <span class=\"hljs-comment\">// 设置GPIO1的管脚复用关系为UART1_RX Set the pin reuse relationship of GPIO1 to UART1_ RX</span><br>    <span class=\"hljs-built_in\">IoSetFunc</span>(IOT_IO_NAME_GPIO_5, IOT_IO_FUNC_GPIO_5_UART1_RXD);<br><br>    <span class=\"hljs-comment\">// LED3的GPIO初始化 GPIO initialization of LED3</span><br>    <span class=\"hljs-built_in\">IoTGpioInit</span>(IOT_IO_NAME_GPIO_2);<br>    <span class=\"hljs-comment\">// 设置GPIO9的管脚复用关系为GPIO Set the pin reuse relationship of GPIO9 to GPIO</span><br>    <span class=\"hljs-built_in\">IoSetFunc</span>(IOT_IO_NAME_GPIO_2, IOT_IO_FUNC_GPIO_2_GPIO);<br>    <span class=\"hljs-comment\">// GPIO方向设置为输出 GPIO direction set to output</span><br>    <span class=\"hljs-built_in\">IoTGpioSetDir</span>(IOT_IO_NAME_GPIO_2, IOT_GPIO_DIR_OUT);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Uart1Config</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><span class=\"hljs-comment\">//对UART配置初始化</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">uint32_t</span> ret;<br>    <span class=\"hljs-comment\">/* 初始化UART配置，波特率 115200，数据bit为8,停止位1，奇偶校验为NONE */</span><br>    <span class=\"hljs-comment\">/* Initialize UART configuration, baud rate is 9600, data bit is 8, stop bit is 1, parity is NONE */</span><br>    IotUartAttribute uart_attr = &#123;<br>        .baudRate = <span class=\"hljs-number\">115200</span>,<br>        .dataBits = <span class=\"hljs-number\">8</span>,<br>        .stopBits = <span class=\"hljs-number\">1</span>,<br>        .parity = <span class=\"hljs-number\">0</span>,<br>    &#125;;<br><br>    <span class=\"hljs-comment\">//uart初始化返回值</span><br>    ret = <span class=\"hljs-built_in\">IoTUartInit</span>(HI_UART_IDX_1, &amp;uart_attr);<br>    <span class=\"hljs-comment\">//判断uart是否连接成功</span><br>    <span class=\"hljs-keyword\">if</span> (ret != IOT_SUCCESS) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Init Uart1 Falied Error No : %d\\n&quot;</span>, ret);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_En_Control</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, <span class=\"hljs-type\">int</span> state, <span class=\"hljs-type\">uint8_t</span> snF)</span><span class=\"hljs-comment\">//电机使能控制函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义接收值以及数据长度</span><br>    <span class=\"hljs-type\">uint32_t</span> count = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">uint32_t</span> len = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> uartReadBuff[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>    <span class=\"hljs-comment\">//定义发送命令数组</span><br>    <span class=\"hljs-type\">uint8_t</span> cmd[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>  <br>    <span class=\"hljs-comment\">// 装载命令</span><br>    cmd[<span class=\"hljs-number\">0</span>] =  addr;                       <span class=\"hljs-comment\">// 地址</span><br>    cmd[<span class=\"hljs-number\">1</span>] =  <span class=\"hljs-number\">0xF3</span>;                       <span class=\"hljs-comment\">// 功能码</span><br>    cmd[<span class=\"hljs-number\">2</span>] =  <span class=\"hljs-number\">0xAB</span>;                       <span class=\"hljs-comment\">// 辅助码</span><br>    cmd[<span class=\"hljs-number\">3</span>] =  (<span class=\"hljs-type\">uint8_t</span>)state;             <span class=\"hljs-comment\">// 使能状态</span><br>    cmd[<span class=\"hljs-number\">4</span>] =  snF;                        <span class=\"hljs-comment\">// 多机同步运动标志</span><br>    cmd[<span class=\"hljs-number\">5</span>] =  <span class=\"hljs-number\">0x6B</span>;                       <span class=\"hljs-comment\">// 校验字节</span><br><br>    <span class=\"hljs-comment\">//通过UART的Write函数发送cmd的参数</span><br>    <span class=\"hljs-built_in\">IoTUartWrite</span>(HI_UART_IDX_1, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>*)cmd, <span class=\"hljs-number\">6</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//电机驱动函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_Traj_Position_Control</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, <span class=\"hljs-type\">uint8_t</span> dir, <span class=\"hljs-type\">uint16_t</span> acc, <span class=\"hljs-type\">uint16_t</span> dec, <span class=\"hljs-type\">float</span> velocity, <span class=\"hljs-type\">float</span> position, <span class=\"hljs-type\">uint8_t</span> raf, <span class=\"hljs-type\">uint8_t</span> snF)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义接收值以及数据长度</span><br>    <span class=\"hljs-type\">uint32_t</span> count = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">uint32_t</span> len = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> uartReadBuff[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <br>    <span class=\"hljs-comment\">//定义发送命令数组</span><br>    <span class=\"hljs-type\">uint8_t</span> cmd[<span class=\"hljs-number\">32</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-type\">uint16_t</span> vel = <span class=\"hljs-number\">0</span>; <span class=\"hljs-type\">uint32_t</span> pos = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-comment\">// 将速度和位置放大10倍发送过去</span><br>    vel = (<span class=\"hljs-type\">uint16_t</span>)<span class=\"hljs-built_in\">ABS</span>(velocity * <span class=\"hljs-number\">10.0f</span>); <br>    pos = (<span class=\"hljs-type\">uint32_t</span>)<span class=\"hljs-built_in\">ABS</span>(position * <span class=\"hljs-number\">10.0f</span>);<br><br>    <span class=\"hljs-comment\">// 装载命令</span><br>    cmd[<span class=\"hljs-number\">0</span>]  =  addr;                      <span class=\"hljs-comment\">// 地址</span><br>    cmd[<span class=\"hljs-number\">1</span>]  =  <span class=\"hljs-number\">0xFD</span>;                      <span class=\"hljs-comment\">// 功能码</span><br>    cmd[<span class=\"hljs-number\">2</span>]  =  dir;                       <span class=\"hljs-comment\">// 符号（方向）</span><br>    cmd[<span class=\"hljs-number\">3</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(acc &gt;&gt; <span class=\"hljs-number\">8</span>);       <span class=\"hljs-comment\">// 加速加速度(RPM/s)高8位字节</span><br>    cmd[<span class=\"hljs-number\">4</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(acc &gt;&gt; <span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// 加速加速度(RPM/s)低8位字节  </span><br>    cmd[<span class=\"hljs-number\">5</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(dec &gt;&gt; <span class=\"hljs-number\">8</span>);       <span class=\"hljs-comment\">// 减速加速度(RPM/s)高8位字节</span><br>    cmd[<span class=\"hljs-number\">6</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(dec &gt;&gt; <span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// 减速加速度(RPM/s)低8位字节  </span><br>    cmd[<span class=\"hljs-number\">7</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(vel &gt;&gt; <span class=\"hljs-number\">8</span>);       <span class=\"hljs-comment\">// 最大速度(RPM)高8位字节</span><br>    cmd[<span class=\"hljs-number\">8</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(vel &gt;&gt; <span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// 最大速度(RPM)低8位字节 </span><br>    cmd[<span class=\"hljs-number\">9</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(pos &gt;&gt; <span class=\"hljs-number\">24</span>);      <span class=\"hljs-comment\">// 位置(bit24 - bit31)</span><br>    cmd[<span class=\"hljs-number\">10</span>] =  (<span class=\"hljs-type\">uint8_t</span>)(pos &gt;&gt; <span class=\"hljs-number\">16</span>);      <span class=\"hljs-comment\">// 位置(bit16 - bit23)</span><br>    cmd[<span class=\"hljs-number\">11</span>] =  (<span class=\"hljs-type\">uint8_t</span>)(pos &gt;&gt; <span class=\"hljs-number\">8</span>);       <span class=\"hljs-comment\">// 位置(bit8  - bit15)</span><br>    cmd[<span class=\"hljs-number\">12</span>] =  (<span class=\"hljs-type\">uint8_t</span>)(pos &gt;&gt; <span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// 位置(bit0  - bit7 )</span><br>    cmd[<span class=\"hljs-number\">13</span>] =  raf;                       <span class=\"hljs-comment\">// 相位位置/绝对位置标志</span><br>    cmd[<span class=\"hljs-number\">14</span>] =  snF;                       <span class=\"hljs-comment\">// 多机同步运动标志</span><br>    cmd[<span class=\"hljs-number\">15</span>] =  <span class=\"hljs-number\">0x6B</span>;                      <span class=\"hljs-comment\">// 校验字节</span><br><br>    <span class=\"hljs-comment\">//通过UART的Write函数发送cmd的参数</span><br>    <span class=\"hljs-built_in\">IoTUartWrite</span>(HI_UART_IDX_1, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>*)cmd, <span class=\"hljs-number\">16</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_Origin_Trigger_Return</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, <span class=\"hljs-type\">uint8_t</span> o_mode, <span class=\"hljs-type\">bool</span> snF)</span><span class=\"hljs-comment\">//电机归零函数，没啥用，需要外界碰撞或者限位，该文件未使用此函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义接收值以及数据长度</span><br>    <span class=\"hljs-type\">uint32_t</span> count = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">uint32_t</span> len = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> uartReadBuff[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>    <span class=\"hljs-type\">uint8_t</span> cmd[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <br>    <span class=\"hljs-comment\">// 装载命令</span><br>    cmd[<span class=\"hljs-number\">0</span>] =  addr;                       <span class=\"hljs-comment\">// 地址</span><br>    cmd[<span class=\"hljs-number\">1</span>] =  <span class=\"hljs-number\">0x9A</span>;                       <span class=\"hljs-comment\">// 功能码</span><br>    cmd[<span class=\"hljs-number\">2</span>] =  o_mode;                     <span class=\"hljs-comment\">// 回零模式，0为单圈就近回零，1为单圈方向回零，2为多圈无限位碰撞回零，3为多圈有限位开关回零</span><br>    cmd[<span class=\"hljs-number\">3</span>] =  snF;                        <span class=\"hljs-comment\">// 多机同步运动标志，false为不启用，true为启用</span><br>    cmd[<span class=\"hljs-number\">4</span>] =  <span class=\"hljs-number\">0x6B</span>;                       <span class=\"hljs-comment\">// 校验字节</span><br><br>    <span class=\"hljs-comment\">//通过UART的Write函数发送cmd的参数</span><br>    <span class=\"hljs-built_in\">IoTUartWrite</span>(HI_UART_IDX_1, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>*)cmd, <span class=\"hljs-number\">5</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_Stop_Now</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, <span class=\"hljs-type\">uint8_t</span> snF)</span><span class=\"hljs-comment\">//立即停机</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义接收值以及数据长度</span><br>    <span class=\"hljs-type\">uint32_t</span> count = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">uint32_t</span> len = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> uartReadBuff[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>    <span class=\"hljs-type\">uint8_t</span> cmd[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <br>    <span class=\"hljs-comment\">// 装载命令</span><br>    cmd[<span class=\"hljs-number\">0</span>] =  addr;                       <span class=\"hljs-comment\">// 地址</span><br>    cmd[<span class=\"hljs-number\">1</span>] =  <span class=\"hljs-number\">0xFE</span>;                       <span class=\"hljs-comment\">// 功能码</span><br>    cmd[<span class=\"hljs-number\">2</span>] =  <span class=\"hljs-number\">0x98</span>;                       <span class=\"hljs-comment\">// 辅助码</span><br>    cmd[<span class=\"hljs-number\">3</span>] =  snF;                        <span class=\"hljs-comment\">// 多机同步运动标志</span><br>    cmd[<span class=\"hljs-number\">4</span>] =  <span class=\"hljs-number\">0x6B</span>;                       <span class=\"hljs-comment\">// 校验字节</span><br><br>    <span class=\"hljs-comment\">//通过UART的Write函数发送cmd的参数</span><br>    <span class=\"hljs-built_in\">IoTUartWrite</span>(HI_UART_IDX_1, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>*)cmd, <span class=\"hljs-number\">5</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">IoTUartFlush</span><span class=\"hljs-params\">(<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> id)</span> <span class=\"hljs-comment\">//串口清空函数，用于进行清空UART内部缓存，不然会出现读取错误</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义要存储数组</span><br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> buffer[<span class=\"hljs-number\">128</span>];<br><br>    <span class=\"hljs-comment\">//定义读取值</span><br>    <span class=\"hljs-type\">int</span> read;<br><br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        <span class=\"hljs-comment\">//将读取值全部存入数组当中，从而达到清空效果</span><br>        read = <span class=\"hljs-built_in\">IoTUartRead</span>(id, buffer, <span class=\"hljs-built_in\">sizeof</span>(buffer));<br>    &#125; <span class=\"hljs-keyword\">while</span> (read &gt; <span class=\"hljs-number\">0</span>);<br><br>    <span class=\"hljs-keyword\">return</span> IOT_SUCCESS;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_Read_Sys_Params</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, SysParams_t s)</span><span class=\"hljs-comment\">//读取电机的实时位置</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义发送数组</span><br>    <span class=\"hljs-type\">uint8_t</span> cmd[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>  <br>    <span class=\"hljs-comment\">// 装载命令</span><br>    cmd[<span class=\"hljs-number\">0</span>] =  addr;                       <span class=\"hljs-comment\">// 地址</span><br><br>    <span class=\"hljs-comment\">//对功能码进行选择</span><br>    <span class=\"hljs-keyword\">switch</span>(s)                             <span class=\"hljs-comment\">// 功能码</span><br>    &#123;<br>        <span class=\"hljs-keyword\">case</span> S_VER   : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x1F</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取固件版本和对应的硬件版本 */</span><br>        <span class=\"hljs-keyword\">case</span> S_RL    : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x20</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取读取相电阻和相电感 */</span><br>        <span class=\"hljs-keyword\">case</span> S_PID   : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x21</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取PID参数 */</span><br>        <span class=\"hljs-keyword\">case</span> S_ORG   : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x22</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取回零参数 */</span><br>        <span class=\"hljs-keyword\">case</span> S_VBUS  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x24</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取总线电压 */</span><br>        <span class=\"hljs-keyword\">case</span> S_CBUS  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x26</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取总线电流 */</span><br>        <span class=\"hljs-keyword\">case</span> S_CPHA  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x27</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取相电流 */</span><br>        <span class=\"hljs-keyword\">case</span> S_ENC   : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x29</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取编码器原始值 */</span><br>        <span class=\"hljs-keyword\">case</span> S_CPUL  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x30</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取实时脉冲数（根据实时位置计算得到的脉冲数） */</span><br>        <span class=\"hljs-keyword\">case</span> S_ENCL  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x31</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取经过线性化校准后的编码器值 */</span><br>        <span class=\"hljs-keyword\">case</span> S_TPUL  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x32</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取输入脉冲数 */</span><br>        <span class=\"hljs-keyword\">case</span> S_TPOS  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x33</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机目标位置 */</span><br>        <span class=\"hljs-keyword\">case</span> S_OPOS  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x34</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机实时设定的目标位置（开环模式的实时位置） */</span><br>        <span class=\"hljs-keyword\">case</span> S_VEL   : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x35</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机实时转速 */</span><br>        <span class=\"hljs-keyword\">case</span> S_CPOS  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x36</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机实时位置（基于角度编码器累加的电机实时位置） */</span><br>        <span class=\"hljs-keyword\">case</span> S_PERR  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x37</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机位置误差 */</span><br>        <span class=\"hljs-keyword\">case</span> S_TEMP  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x39</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机实时温度 */</span><br>        <span class=\"hljs-keyword\">case</span> S_SFLAG : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x3A</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取状态标志位 */</span><br>        <span class=\"hljs-keyword\">case</span> S_OFLAG : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x3B</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取回零状态标志位 */</span><br>        <span class=\"hljs-keyword\">case</span> S_Conf  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x42</span>; cmd[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">0x6C</span>; <span class=\"hljs-keyword\">break</span>;   <span class=\"hljs-comment\">/* 读取驱动参数 */</span><br>        <span class=\"hljs-keyword\">case</span> S_State : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x43</span>; cmd[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">0x7A</span>; <span class=\"hljs-keyword\">break</span>;   <span class=\"hljs-comment\">/* 读取系统状态参数 */</span><br>        <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 如果需要四字节，将校验字节放在 cmd[3]</span><br>    cmd[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">0x6B</span>; <br><br>    <span class=\"hljs-comment\">//通过UART的Write函数发送cmd的参数</span><br>    <span class=\"hljs-built_in\">IoTUartWrite</span>(HI_UART_IDX_1, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>*)cmd, <span class=\"hljs-number\">3</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_Receive_Data</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, <span class=\"hljs-type\">uint8_t</span> *rxCmd, <span class=\"hljs-type\">uint32_t</span> *rxCount)</span> </span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">uint32_t</span> startTime = <span class=\"hljs-built_in\">osKernelGetTickCount</span>();  <span class=\"hljs-comment\">// 获取当前系统时间</span><br>    <span class=\"hljs-type\">uint8_t</span> buffer[UART_BUFF_SIZE];<br>    <span class=\"hljs-type\">int</span> len;<br><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) &#123;<br>        len = <span class=\"hljs-built_in\">IoTUartRead</span>(HI_UART_IDX_1, buffer, <span class=\"hljs-built_in\">sizeof</span>(buffer));  <span class=\"hljs-comment\">// 从UART读取数据</span><br>        <span class=\"hljs-keyword\">if</span> (len &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// 将读取的数据复制到rxCmd数组中，确保不会溢出</span><br>            <span class=\"hljs-type\">uint32_t</span> copySize = (*rxCount + len &gt; UART_BUFF_SIZE) ? (UART_BUFF_SIZE - *rxCount) : len;<br>            <span class=\"hljs-built_in\">memcpy</span>(rxCmd + *rxCount, buffer, copySize);<br>            *rxCount += copySize;<br><br>            startTime = <span class=\"hljs-built_in\">osKernelGetTickCount</span>();  <span class=\"hljs-comment\">// 更新最后一次接收数据的时间</span><br>        &#125;<br><br>        <span class=\"hljs-comment\">// 检查是否超时</span><br>        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-built_in\">osKernelGetTickCount</span>() - startTime) &gt; UART_TIMEOUT_MS) &#123;<br>            <span class=\"hljs-keyword\">break</span>;  <span class=\"hljs-comment\">// 如果超过设定的超时时间，则停止接收数据</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">absolute</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> value)</span> <span class=\"hljs-comment\">//找不到绝对值的函数值定义，自己创建一个函数用于进行绝对值计算</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> (value &lt; <span class=\"hljs-number\">0</span>) ? -value : value;<span class=\"hljs-comment\">//判断如何取正</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">ReadMotorAngle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> sliderId)</span> <span class=\"hljs-comment\">//定义读取角度，并计算和输出角度值</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//清空缓存区</span><br>    <span class=\"hljs-built_in\">IoTUartFlush</span>(HI_UART_IDX_1);<br><br>    <span class=\"hljs-comment\">//定义角度取值为小数点后一位</span><br>    <span class=\"hljs-type\">float</span> pos = <span class=\"hljs-number\">0.0f</span>, Motor_Cur_Pos = <span class=\"hljs-number\">0.0f</span>;<br><br>    <span class=\"hljs-comment\">// 定义接收数据数组、接收数据长度</span><br>    <span class=\"hljs-type\">uint8_t</span> rxCmd[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-type\">uint32_t</span> rxCount = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-comment\">// 读取电机实时位置</span><br>    <span class=\"hljs-built_in\">ZDT_X42_V2_Read_Sys_Params</span>(sliderId, S_CPOS);<br><br>    <span class=\"hljs-comment\">// 等待返回命令，命令数据缓存在数组rxCmd上，长度为rxCount</span><br>    <span class=\"hljs-built_in\">ZDT_X42_V2_Receive_Data</span>(sliderId, rxCmd, &amp;rxCount);<br><br>    <span class=\"hljs-comment\">//将读取的rxCmd[]十六进制编码打印，用于测试调试</span><br>    <span class=\"hljs-comment\">// printf(&quot;Received bytes: &quot;);</span><br>    <span class=\"hljs-comment\">// for (int i = 0; i &lt; 8; i++) &#123;</span><br>    <span class=\"hljs-comment\">//     printf(&quot;%02X &quot;, rxCmd[i]);</span><br>    <span class=\"hljs-comment\">// &#125;</span><br>    <span class=\"hljs-comment\">// printf(&quot;\\n&quot;);</span><br><br>    <span class=\"hljs-comment\">// 获取电机实时角度返回值（电机实时角度返回值放大了10倍返回的，因为要保留1位小数）</span><br>    pos = ((<span class=\"hljs-type\">uint32_t</span>)rxCmd[<span class=\"hljs-number\">3</span>] &lt;&lt; <span class=\"hljs-number\">24</span>) | ((<span class=\"hljs-type\">uint32_t</span>)rxCmd[<span class=\"hljs-number\">4</span>] &lt;&lt; <span class=\"hljs-number\">16</span>) | ((<span class=\"hljs-type\">uint32_t</span>)rxCmd[<span class=\"hljs-number\">5</span>] &lt;&lt; <span class=\"hljs-number\">8</span>) | (<span class=\"hljs-type\">uint32_t</span>)rxCmd[<span class=\"hljs-number\">6</span>];<br><br>    <span class=\"hljs-comment\">// 缩小10倍，并判断符号，得到真正的实时角度，存放在浮点数变量Motor_Cur_Pos中</span><br>    Motor_Cur_Pos = pos * <span class=\"hljs-number\">0.1f</span>;<br>    <span class=\"hljs-keyword\">if</span> (rxCmd[<span class=\"hljs-number\">2</span>]) &#123;<br>        Motor_Cur_Pos = -Motor_Cur_Pos;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 打印解析后的角度值</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Current position (as angle): %.1f degrees\\n&quot;</span>, Motor_Cur_Pos);<br><br>    <span class=\"hljs-keyword\">return</span> Motor_Cur_Pos;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ResetMotorToOrigin</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> sliderId)</span> <span class=\"hljs-comment\">//电机归零函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//读取电机目前角度</span><br>    <span class=\"hljs-type\">float</span> Motor_Cur_Pos = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);<br><br>    <span class=\"hljs-type\">float</span> targetPosition = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 目标位置，这里假设为0度</span><br><br>    <span class=\"hljs-comment\">// 根据当前角度和目标位置计算需要移动的距离</span><br>    <span class=\"hljs-type\">float</span> delta = targetPosition - Motor_Cur_Pos;<br><br>    <span class=\"hljs-comment\">// 将 delta 四舍五入到小数点后一位</span><br>    <span class=\"hljs-comment\">//delta = ((int)(delta * 10 + 0.5)) / 10.0f;</span><br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;delta: %.1f degrees\\n&quot;</span>, delta);<br><br>    <span class=\"hljs-comment\">// 调用轨迹位置控制函数将电机移动到目标位置</span><br>    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, (delta &lt; <span class=\"hljs-number\">0</span>) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta), motor_raf_0, motor_snf_0);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ParseJson</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* json)</span><span class=\"hljs-comment\">//电机uart运行主函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">// 定义JSON键的字符串，根据上位机所需进行定义，格式类型相同</span><br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* labelStr = <span class=\"hljs-string\">&quot;\\&quot;label\\&quot;:&quot;</span>;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* motor_EnStr = <span class=\"hljs-string\">&quot;\\&quot;motor_En\\&quot;:&quot;</span>;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* sliderIdStr = <span class=\"hljs-string\">&quot;\\&quot;sliderId\\&quot;:&quot;</span>;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* valueStr = <span class=\"hljs-string\">&quot;\\&quot;value\\&quot;:&quot;</span>;<br>    <br><br>    <span class=\"hljs-comment\">// 找到JSON字符串中键的位置，用于进行键的连接，等于找到对应的标签</span><br>    <span class=\"hljs-type\">char</span>* labelPos = <span class=\"hljs-built_in\">strstr</span>(json, labelStr);<br>    <span class=\"hljs-type\">char</span>* motor_EnPos = <span class=\"hljs-built_in\">strstr</span>(json, motor_EnStr);<br>    <span class=\"hljs-type\">char</span>* sliderIdPos = <span class=\"hljs-built_in\">strstr</span>(json, sliderIdStr);<br>    <span class=\"hljs-type\">char</span>* valuePos = <span class=\"hljs-built_in\">strstr</span>(json, valueStr);<br><br>    <span class=\"hljs-comment\">// 如果找到键，解析其对应的值</span><br>    <span class=\"hljs-keyword\">if</span> (labelPos != <span class=\"hljs-literal\">NULL</span> &amp;&amp; motor_EnPos != <span class=\"hljs-literal\">NULL</span> &amp;&amp; sliderIdPos != <span class=\"hljs-literal\">NULL</span> &amp;&amp; valuePos != <span class=\"hljs-literal\">NULL</span>) &#123;<br>        <span class=\"hljs-type\">int</span> label = <span class=\"hljs-built_in\">atoi</span>(labelPos + <span class=\"hljs-built_in\">strlen</span>(labelStr)); <span class=\"hljs-comment\">// 将label转换为整数</span><br>        <span class=\"hljs-type\">int</span> sliderId = <span class=\"hljs-built_in\">atoi</span>(sliderIdPos + <span class=\"hljs-built_in\">strlen</span>(sliderIdStr)); <span class=\"hljs-comment\">// 将sliderId转换为整数</span><br><br>        <span class=\"hljs-comment\">//放大30倍，对应谐波减速器</span><br>        <span class=\"hljs-type\">int</span> value = <span class=\"hljs-built_in\">atof</span>(valuePos + <span class=\"hljs-built_in\">strlen</span>(valueStr));<br>        <span class=\"hljs-type\">int</span> motor_En = <span class=\"hljs-built_in\">atoi</span>(motor_EnPos + <span class=\"hljs-built_in\">strlen</span>(motor_EnStr));<br><br>        <span class=\"hljs-comment\">// 打印解析出的值</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;label: %d, motor_En: %d, Slider ID: %d, Value: %d\\n&quot;</span>, label, motor_En, sliderId, value);<br><br>        <span class=\"hljs-comment\">// 根据Slider ID和Value执行相应的操作</span><br>        <span class=\"hljs-keyword\">if</span> (label == <span class=\"hljs-number\">1</span>) <br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125; <br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">2</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">3</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">4</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">5</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">6</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125;<br>        &#125; <br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (label == <span class=\"hljs-number\">2</span>) <br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125; <br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">2</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">3</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">4</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">5</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">6</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125;<br>            <br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (label == <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//电机紧急停机</span><br>        &#123;<br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">//调用停机函数</span><br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);  <span class=\"hljs-comment\">//延时确保函数依次执行</span><br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (label == <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//电机复位函数</span><br>        &#123;<br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">//调用复位函数</span><br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);  <span class=\"hljs-comment\">//延时确保函数依次执行</span><br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">2</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">3</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">4</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">5</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">6</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Task1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><span class=\"hljs-comment\">//系统主函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> socket_fd = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">char</span> buff[<span class=\"hljs-number\">256</span>];<br>    <span class=\"hljs-type\">int</span> re = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-type\">uint32_t</span> count_0 = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">uint32_t</span> len_0 = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> uartReadBuff_0[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>    <span class=\"hljs-comment\">// 对UART1的一些初始化 Some initialization of UART1</span><br>    <span class=\"hljs-built_in\">Uart1GpioInit</span>();<br>    <span class=\"hljs-comment\">// 对UART1参数的一些配置 Some configurations of UART1 parameters</span><br>    <span class=\"hljs-built_in\">Uart1Config</span>();<br><br>    <span class=\"hljs-comment\">// 连接Wifi</span><br>    <span class=\"hljs-built_in\">WiFi_connectHotspots</span>(<span class=\"hljs-string\">&quot;esp32&quot;</span>, <span class=\"hljs-string\">&quot;12345678&quot;</span>);<br>    socket_fd = <span class=\"hljs-built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// 创建套接字（TCP）</span><br>    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">sockaddr_in</span> addr;<br>    addr.sin_family = AF_INET;<br>    addr.sin_port = <span class=\"hljs-built_in\">htons</span>(TCP_SERVER_PORT);<br>    addr.sin_addr.s_addr = <span class=\"hljs-built_in\">inet_addr</span>(TCP_SERVER_IP); <span class=\"hljs-comment\">// 填写服务器的IP地址</span><br><br>    re = <span class=\"hljs-built_in\">connect</span>(socket_fd, (<span class=\"hljs-keyword\">struct</span> sockaddr *)&amp;addr, <span class=\"hljs-built_in\">sizeof</span>(addr)); <span class=\"hljs-comment\">// 连接服务器</span><br>    <span class=\"hljs-keyword\">if</span> (re == <span class=\"hljs-number\">-1</span>) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Failed to connect to the server\\r\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Connection to server successful\\r\\n&quot;</span>);<br><br>    <span class=\"hljs-comment\">// 发送第一条数据</span><br>    <span class=\"hljs-built_in\">send</span>(socket_fd, <span class=\"hljs-string\">&quot;Connection to server successful.&quot;</span>, <span class=\"hljs-built_in\">strlen</span>(<span class=\"hljs-string\">&quot;Connection to server successful.&quot;</span>), <span class=\"hljs-number\">0</span>);<br><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-built_in\">memset_s</span>(buff, <span class=\"hljs-built_in\">sizeof</span>(buff), <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">sizeof</span>(buff));<br>        re = <span class=\"hljs-built_in\">recv</span>(socket_fd, buff, <span class=\"hljs-built_in\">sizeof</span>(buff), <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">//\t接收客户端发送过来的消息</span><br>        <span class=\"hljs-keyword\">if</span> (re &lt;= <span class=\"hljs-number\">0</span>) <br>        &#123;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-built_in\">ParseJson</span>(buff);<span class=\"hljs-comment\">//执行控制主函数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">close</span>(socket_fd);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">UartExampleEntry</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><span class=\"hljs-comment\">//配置上报函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//osThreadAttr_t attr;</span><br>    <span class=\"hljs-built_in\">IoTWatchDogDisable</span>();<br><br>    osThreadAttr_t options;<br>    options.name = <span class=\"hljs-string\">&quot;thread_1&quot;</span>;<br>    options.attr_bits = <span class=\"hljs-number\">0</span>;<br>    options.cb_mem = <span class=\"hljs-literal\">NULL</span>;<br>    options.cb_size = <span class=\"hljs-number\">0</span>;<br>    options.stack_mem = <span class=\"hljs-literal\">NULL</span>;<br>    options.stack_size = TASK_STACK_SIZE;<br>    options.priority = osPriorityNormal;<br><br>    Task1_ID = <span class=\"hljs-built_in\">osThreadNew</span>((osThreadFunc_t)Task1, <span class=\"hljs-literal\">NULL</span>, &amp;options);<br>    <span class=\"hljs-keyword\">if</span> (Task1_ID != <span class=\"hljs-literal\">NULL</span>) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;ID = %d, Create Task1_ID is OK!\\r\\n&quot;</span>, Task1_ID);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-built_in\">APP_FEATURE_INIT</span>(UartExampleEntry);<br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"Hi3861开发\"><a href=\"#Hi3861开发\" class=\"headerlink\" title=\"Hi3861开发\"></a>Hi3861开发</h1><h2 id=\"一、学习资料\"><a href=\"#一、学习资料\" class=\"headerlink\" title=\"一、学习资料\"></a>一、学习资料</h2><ul>\n<li><p>【UART串口使用】<a href=\"https://blog.csdn.net/qq_36347513/article/details/121603716\">HI3861学习笔记（18）——UART串口使用_hi3861 uart-CSDN博客</a></p>\n</li>\n<li><p>【开发环境搭建】[2.1 Pegasus开发环境搭建.md · HiSpark&#x2F;HiSpark_NICU2023 - Gitee.com](<a href=\"https://gitee.com/HiSpark/HiSpark_NICU2023/blob/master/2.1\">https://gitee.com/HiSpark/HiSpark_NICU2023/blob/master/2.1</a> Pegasus开发环境搭建.md)</p>\n</li>\n<li><p>【入门demo】<a href=\"https://docs.openharmony.cn/pages/v4.0/zh-cn/device-dev/quick-start/quickstart-ide-3861-helloworld.md\">编写 Hello World”程序 (openharmony.cn)</a></p>\n</li>\n<li><p>【UART串口读取】<a href=\"https://bbs.huaweicloud.com/blogs/detail/281809\">HarmonyOS小熊派 | HarmonyOS基础外设开发–UART数据读写-云社区-华为云 (huaweicloud.com)</a></p>\n</li>\n<li><p>【QT转EXE格式】<a href=\"https://www.cnblogs.com/JinShanCheShen/p/16194526.html\">QT打包成exe详细步骤 - 西北小蚂蚁 - 博客园 (cnblogs.com)</a></p>\n</li>\n<li><p>【QT转EXE格式编译报错】<a href=\"https://blog.csdn.net/weijifen000/article/details/102537640\">Qt软件打包后报错“无法定位程序输入点_ZN10QArrayData10deallocateEPs_jj于动态链接库….. .exe上。”解决办法-CSDN博客</a></p>\n</li>\n</ul>\n<h2 id=\"二、QT开发\"><a href=\"#二、QT开发\" class=\"headerlink\" title=\"二、QT开发\"></a>二、QT开发</h2><ul>\n<li><p>geometry里的宽度、高度是分辨率，比如geometry设置为宽<em>高为1920</em>1080</p>\n</li>\n<li><p>【窗口自适应】<a href=\"https://cloud.tencent.com/developer/article/2286080\">【QT】QT Designer控件随窗口大小自适应-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>\n</li>\n<li><p>【串口发送】<a href=\"https://blog.csdn.net/qq_26904271/article/details/132646641\">QT串口助手：识别串口号，发送，接收，十六进制_qt串口发送16进制数据-CSDN博客</a></p>\n</li>\n<li><p>foreach是QT中的一个关键字，其作用是对第二个参数中的对象进行遍历，把遍历过程中的每个对象依次赋给第一个参数，并执行花括号中的内容。在这里，就是把可获取的串口列表availablePorts()中的串口，逐个将其串口号添加到combobox中。</p>\n</li>\n</ul>\n<h3 id=\"1-串口设定\"><a href=\"#1-串口设定\" class=\"headerlink\" title=\"1.串口设定\"></a>1.串口设定</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"> \t<span class=\"hljs-comment\">//mainwindow.h文件调用串口头文件</span><br> \t<span class=\"hljs-comment\">//串口头文件</span><br> \t#include &lt;QSerialPort&gt;<br>#include &lt;QSerialPortInfo&gt;<br> \t<br> \t<span class=\"hljs-comment\">//mainwindow.cpp文件中的MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找</span><br> \t<span class=\"hljs-comment\">//使用foreach函数查找串口信息</span><br>foreach (const QSerialPortInfo &amp;portInfo,QSerialPortInfo::availablePorts()) <br> \t&#123;<br>     <span class=\"hljs-comment\">//将所有搜索的值写入serialport端口当中</span><br>     <span class=\"hljs-function\"><span class=\"hljs-title\">ui</span>-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">serialport</span>-&gt;</span>addItem(portInfo.portName());<br> \t&#125;<br> \t<span class=\"hljs-comment\">//打开串口</span><br> \t<span class=\"hljs-function\"><span class=\"hljs-title\">serialPort</span>-&gt;</span>open();<br> \t<span class=\"hljs-comment\">//关闭串口</span><br> \t<span class=\"hljs-function\"><span class=\"hljs-title\">serialPort</span>-&gt;</span>close();<br> \t<br> \t<span class=\"hljs-comment\">//串口写入</span><br> \t<span class=\"hljs-function\"><span class=\"hljs-title\">serialPort</span>-&gt;</span>write(<span class=\"hljs-string\">&quot;*****&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-读取下拉选项内容并赋予\"><a href=\"#2-读取下拉选项内容并赋予\" class=\"headerlink\" title=\"2.读取下拉选项内容并赋予\"></a>2.读取下拉选项内容并赋予</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-comment\">//mainwindow.cpp文件中，自定义函数设定</span><br><br><span class=\"hljs-comment\">//定义参数格式为QString</span><br>QString mBaudrate;<span class=\"hljs-comment\">//波特率</span><br>QString mStopBits;<span class=\"hljs-comment\">//停止位字节</span><br>   QString mDataBits;<span class=\"hljs-comment\">//数据字节</span><br>   QString mParity;<span class=\"hljs-comment\">//奇偶校验</span><br>   <br><span class=\"hljs-comment\">//读取baudrate槽中currentText()所选定的内容，后续类似</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">mBaudrate</span> = ui-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">baudrate</span>-&gt;</span>currentText();<br><span class=\"hljs-function\"><span class=\"hljs-title\">mStopBits</span> = ui-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">stopbits</span>-&gt;</span>currentText();<br>   <span class=\"hljs-function\"><span class=\"hljs-title\">mDataBits</span> = ui-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">databits</span>-&gt;</span>currentText();<br>   <span class=\"hljs-function\"><span class=\"hljs-title\">mParity</span> = ui-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">parity</span>-&gt;</span>currentText();<br><br><span class=\"hljs-comment\">//判断起选定内容是否符合需求，并赋予相应操作</span><br><span class=\"hljs-keyword\">if</span>(mBaudrate == <span class=\"hljs-string\">&quot;9600&quot;</span>) <br>&#123;<br>\t<span class=\"hljs-comment\">//将串口波特率设定为9600</span><br>       mSerialPort.setBaudRate(QSerialPort::Baud9600);<span class=\"hljs-comment\">//Baud9600、Baud115200</span><br>       mSerialPort.setStopBits(QSerialPort::OneStop);<span class=\"hljs-comment\">//OneStop-1、OneAndHalfStop-1.5、TwoStop-2</span><br>       mSerialPort.setDataBits(QSerialPort::Data5);<span class=\"hljs-comment\">//Data5、Data6、Data7、Data8</span><br>       mSerialPort.setParity(QSerialPort::OddParity);<span class=\"hljs-comment\">//OddParity-奇校验、EvenParity-偶校验、NoParity无校验</span><br>   &#125; <br>   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(mBaudrate == <span class=\"hljs-string\">&quot;115200&quot;</span>) <br>   &#123;<br>   \t<span class=\"hljs-comment\">//将串口波特率设定为115200</span><br>       mSerialPort.setBaudRate(QSerialPort::Baud19200);<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-摄像头设定\"><a href=\"#3-摄像头设定\" class=\"headerlink\" title=\"3.摄像头设定\"></a>3.摄像头设定</h3><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-comment\">//***.pro格式文件加入multimediawidgets</span><br>QT       += core gui multimediawidgets<br><br><span class=\"hljs-comment\">//mainwindow.h文件调用摄像头头文件</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QCameraImageCapture&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QCamera&gt;</span></span><br><br><span class=\"hljs-comment\">//mainwindow.cpp文件中的MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找</span><br><span class=\"hljs-comment\">//获取系统的所有可用的摄像头</span><br>foreach(const QCameraInfo <span class=\"hljs-variable\">&amp;</span>cameraInfo , QCameraInfo::availableCameras())<br>   <span class=\"hljs-punctuation\">&#123;</span><br>       <span class=\"hljs-comment\">//将所有搜索的值写入cameraBox端口当中</span><br>       ui-&gt;cameraBox-&gt;addItem(cameraInfo.deviceName())<span class=\"hljs-punctuation\">;</span><br>   <span class=\"hljs-punctuation\">&#125;</span><br>   <br>   <span class=\"hljs-comment\">//打开摄像头</span><br>   cameraPort-&gt;start()<span class=\"hljs-punctuation\">;</span><br>   <span class=\"hljs-comment\">//关闭摄像头</span><br>   cameraPort-&gt;stop()<span class=\"hljs-punctuation\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-QT中setCheckable-的作用\"><a href=\"#4-QT中setCheckable-的作用\" class=\"headerlink\" title=\"4.QT中setCheckable()的作用\"></a>4.QT中setCheckable()的作用</h3><p>setCheckable()设置为True时才有可能使得status为True（即设置后按钮想点灯开关一样，能够按一下保持一直开，再按下保持一直关），否则开关点击一下后仍为关闭状态，status一直为False。</p>\n<h3 id=\"5-TCP通讯\"><a href=\"#5-TCP通讯\" class=\"headerlink\" title=\"5.TCP通讯\"></a>5.TCP通讯</h3><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-comment\">//***.pro格式文件加入network</span><br>QT       += network<br><br><span class=\"hljs-comment\">//mainwindow.h头文件中引用</span><br>#include &lt;QTcpServer&gt;<br>#include &lt;QTcpSocket&gt;<br><span class=\"hljs-comment\">//定义*socket和*server用来存放服务器的套接字和监听，用于与客户端进行通信</span><br>QTcpSocket *socket;<br>   QTcpServer *server;<br><br><span class=\"hljs-comment\">//mainwindow.cpp文件中MainWindow::MainWindow(QWidget *parent)初始化函数内设定，打开即设定查找</span><br><span class=\"hljs-comment\">//setCheckable()设置为True时才有可能使得status为True（即设置后按钮想点灯开关一样，能够按一下保持一直开，再按下保持一直关），否则开关点击一下后仍为关闭状态，status一直为False。</span><br>ui-&gt;Monitor_OPEN-&gt;setCheckable(<span class=\"hljs-keyword\">true</span>);<span class=\"hljs-comment\">//简而言之就是按键的常开和常闭切换</span><br><span class=\"hljs-comment\">//创建服务器的套接字，用于与客户端进行通信</span><br>socket = <span class=\"hljs-keyword\">new</span> QTcpSocket();<br><span class=\"hljs-comment\">//声明一个QTcpserver的对象，用于监听</span><br>   server = <span class=\"hljs-keyword\">new</span> QTcpServer();<br>   <span class=\"hljs-comment\">//信号：新的客户端连接建立 槽函数：获取客户端套接字，允许写入数据</span><br>   connect(server,SIGNAL(newConnection()),this,SLOT(newConnection_SLOT()));<br>   <br>   <span class=\"hljs-comment\">//定义新函数MainWindow::newConnection_SLOT()，用于新的客户端连接建立槽函数：获取客户端套接字，允许写入数据</span><br>   void MainWindow::newConnection_SLOT()<br>   &#123;<br>       socket = server-&gt;nextPendingConnection(); <span class=\"hljs-comment\">//获取已经连接的客户端套接字</span><br>       connect(socket,SIGNAL(readyRead()),this,SLOT(readyRead_SLOT()));<span class=\"hljs-comment\">//如果socket中有缓存消息，触发槽函数</span><br>   &#125;<br>   <br>   <span class=\"hljs-comment\">//定义新函数MainWindow::readyRead_SLOT()，用于接收消息并显示到接收框</span><br>   void MainWindow::readyRead_SLOT()<br>   &#123;<br>       qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Server Received!&quot;</span>;<br>       QString buffer;<span class=\"hljs-comment\">//定义容器</span><br>       <span class=\"hljs-comment\">//读取缓冲区数据</span><br>       buffer = socket-&gt;readAll();<br>       <span class=\"hljs-keyword\">if</span>(!buffer.isEmpty())<br>       &#123;<br>           <span class=\"hljs-comment\">//刷新显示，写入Receive_text组件，组件类型为Plain Text Line</span><br>           ui-&gt;Receive_text-&gt;appendPlainText(buffer);<br>       &#125;<br>   &#125;<br>   <br>   <span class=\"hljs-comment\">//连接组件函数，按下开始监听组件Monitor_OPEN，类型为clicked(bool checked)，执行监听程序</span><br>   void MainWindow::on_Monitor_OPEN_clicked(<span class=\"hljs-keyword\">bool</span> checked)<br>   &#123;<br>       <span class=\"hljs-keyword\">if</span>(checked)<span class=\"hljs-comment\">//如果按下了</span><br>       &#123;<br>           <span class=\"hljs-keyword\">int</span> port = ui-&gt;PORT_TEXT-&gt;text().toUInt();<br>           <span class=\"hljs-comment\">//如果未监听到</span><br>           <span class=\"hljs-keyword\">if</span>(!server-&gt;listen(QHostAddress::Any, port))<br>           &#123;<br>               qDebug() &lt;&lt; server-&gt;errorString();<br>               <span class=\"hljs-comment\">//连接失败，再次点击则重新连接，将checked恢复为true</span><br>               ui-&gt;Monitor_OPEN-&gt;toggle();<br>               <span class=\"hljs-keyword\">return</span>;<br>           &#125;<br>           qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Listen Successfully! Message from port:&quot;</span> &lt;&lt; port;<br>           <span class=\"hljs-comment\">//修改按钮文字</span><br>           ui-&gt;Monitor_OPEN-&gt;setText(<span class=\"hljs-string\">&quot;停止监听&quot;</span>);<br>           <span class=\"hljs-comment\">//发送键使能</span><br>           ui-&gt;Send_Button-&gt;setEnabled(<span class=\"hljs-keyword\">true</span>);<br>       &#125;<br>       <span class=\"hljs-keyword\">else</span><br>       &#123;<br>            qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Stop Listening!&quot;</span>;<br>           <span class=\"hljs-comment\">//如果已经连接则断开连接</span><br>           <span class=\"hljs-keyword\">if</span>(socket-&gt;state() == QAbstractSocket::ConnectedState)<br>           &#123;<br>               <span class=\"hljs-comment\">//断开连接</span><br>               socket-&gt;disconnectFromHost();<br>           &#125;<br>           <span class=\"hljs-comment\">//关闭倾听服务</span><br>           server-&gt;close();<br>           <span class=\"hljs-comment\">//修改按钮文字&amp;发送键静默</span><br>           ui-&gt;Monitor_OPEN-&gt;setText(<span class=\"hljs-string\">&quot;开始监听&quot;</span>);<br>           ui-&gt;Send_Button-&gt;setEnabled(<span class=\"hljs-keyword\">false</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-滑动槽设定\"><a href=\"#6-滑动槽设定\" class=\"headerlink\" title=\"6.滑动槽设定\"></a>6.滑动槽设定</h3><ul>\n<li>首先使用setRange()方法设置了滑动条的范围为0到100，然后使用setValue()方法设置了滑动条的当前值为50。通过value()方法可以获取当前滑动条的值。最后，使用connect()方法监听了滑动条的值变化，当值发生变化时，会调用onSliderValueChanged()槽函数。</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">// 假设有一个QSlider对象名为slider<br>// 设置滑动条的范围<br>slider-&gt;setRange(-180, 180);<br><br>// 设置滑动条的当前值<br>slider-&gt;setValue(0);<br><br>// 获取滑动条的当前值<br>int currentValue = slider-&gt;value();<br><br>// 监听滑动条的值变化<br>connect(slider, SIGNAL(valueChanged(int)), this, SLOT(onSliderValueChanged(int)));<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>slider 提供了两个自然的步长；较大的步长用 pageStep 表示，相当于按下键盘上的 PageDown 和 PageUp，也相当于鼠标点击时移动的步进值:；较小的步长用 singleStep 表示，相当于按下键盘上的上、下键；</li>\n</ul>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-comment\">// 设置移动每页的步长，滑块提供的两个自然步长中较大的那一个，相当于键盘上的 PageUp 和 PageDown；</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">horizontalSlider</span>-&gt;</span>setPageStep(<span class=\"hljs-number\">10</span>);<br><br><span class=\"hljs-comment\">// 获取 每页的步长</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">int</span> step = horizontalSlider-&gt;</span>pageStep();<br><br><span class=\"hljs-comment\">// 设置移动单步的步长，滑块提供的两个自然步长中较小的那一个，相当于键盘上的上、下箭头；</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">horizontalSlider</span>-&gt;</span>setSingleStep(<span class=\"hljs-number\">2</span>);<br><br><span class=\"hljs-comment\">// 获取 单步的步长</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">int</span> step =horizontalSlider-&gt;</span>singleStep();<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>设置是否启用滑块追踪：</li>\n</ul>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-comment\">// 设置是否启动滑块追踪：true 表示启动追踪；false 表示禁用追踪；</span><br><span class=\"hljs-comment\">// 如果启用了滑块追踪，则滑块在拖动过程中会一直触发 valueChanged 信号；</span><br><span class=\"hljs-comment\">// 如果禁用了滑块追踪，则滑块在拖动过程中不会触发 valueChanged 信号，</span><br><span class=\"hljs-comment\">// 只有在用户释放滑块时，才触发 valueChanged 信号。</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">horizontalSlider</span>-&gt;</span>setTracking(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-comment\">// 可以通过 hasTracking 属性获取是否启用了追踪：</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">bool</span> isTrack = horizontalSlider-&gt;</span>hasTracking();<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>槽函数设定</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-built_in\">valueChanged</span>()<span class=\"hljs-comment\">//值被改变</span><br><span class=\"hljs-built_in\">sliderPressed</span>()<span class=\"hljs-comment\">//滑块被点击</span><br><span class=\"hljs-built_in\">sliderMoved</span>()<span class=\"hljs-comment\">//滑块移动</span><br><span class=\"hljs-built_in\">sliderReleased</span>();<span class=\"hljs-comment\">//滑块被释放</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三、TCP通讯\"><a href=\"#三、TCP通讯\" class=\"headerlink\" title=\"三、TCP通讯\"></a>三、TCP通讯</h2><p>【TCP通信】<a href=\"https://blog.csdn.net/qq_36347513/article/details/123099617\">HI3861学习笔记（20）——TCP客户端_hi3861 at tcp 指令 erre-CSDN博客</a></p>\n<p>【TCP通信】<a href=\"https://blog.csdn.net/baidu_29900103/article/details/117970891\">教你动手写TCP上位机与小熊派通信_小熊派设备的tcp通信-CSDN博客</a></p>\n<h2 id=\"四、下位机代码\"><a href=\"#四、下位机代码\" class=\"headerlink\" title=\"四、下位机代码\"></a>四、下位机代码</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;iot_gpio_ex.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;ohos_init.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;cmsis_os2.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;iot_gpio.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;iot_uart.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;hi_uart.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;iot_watchdog.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;iot_errno.h&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;hal_bsp_pcf8574.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;hal_bsp_wifi.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;wifi_device.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;lwip/netifapi.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;lwip/sockets.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;lwip/api_shell.h&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span>    ABS(x)    ((x) &gt; 0 ? (x) : -(x))</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> UART_BUFF_SIZE 100</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> U_SLEEP_TIME   500000</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> UART_TIMEOUT_MS 20   <span class=\"hljs-comment\">// 设置超时时间为100毫秒</span></span><br><br>osThreadId_t Task1_ID; <span class=\"hljs-comment\">// 任务1设置为低优先级任务</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TASK_STACK_SIZE (1024 * 10)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TCP_SERVER_IP <span class=\"hljs-string\">&quot;192.168.245.23&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TCP_SERVER_PORT 8888</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> DIR_pos 1 <span class=\"hljs-comment\">// 正方向</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> DIR_neg 0 <span class=\"hljs-comment\">// 反方向</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> Speed_acc 1000 <span class=\"hljs-comment\">// 加速度</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> Speed_dec 1000 <span class=\"hljs-comment\">// 减速度</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> Speed_max 2000.0f <span class=\"hljs-comment\">// 最大速度</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> motor_raf_0 0 <span class=\"hljs-comment\">// 相位位置标志</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> motor_raf_1 1 <span class=\"hljs-comment\">//绝对位置标志</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> motor_snf_0 0 <span class=\"hljs-comment\">// 多机同步运动标志</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> motor_snf_1 0 <span class=\"hljs-comment\">// 单机运动标志</span></span><br><br><span class=\"hljs-comment\">//读取数据的枚举值</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">enum</span> &#123;<br>  S_VER   = <span class=\"hljs-number\">0</span>,      <span class=\"hljs-comment\">/* 读取固件版本和对应的硬件版本 */</span><br>  S_RL    = <span class=\"hljs-number\">1</span>,      <span class=\"hljs-comment\">/* 读取读取相电阻和相电感 */</span><br>  S_PID   = <span class=\"hljs-number\">2</span>,      <span class=\"hljs-comment\">/* 读取PID参数 */</span><br>  S_ORG   = <span class=\"hljs-number\">3</span>,      <span class=\"hljs-comment\">/* 读取回零参数 */</span><br>  S_VBUS  = <span class=\"hljs-number\">4</span>,      <span class=\"hljs-comment\">/* 读取总线电压 */</span><br>  S_CBUS  = <span class=\"hljs-number\">5</span>,      <span class=\"hljs-comment\">/* 读取总线电流 */</span><br>  S_CPHA  = <span class=\"hljs-number\">6</span>,      <span class=\"hljs-comment\">/* 读取相电流 */</span><br>  S_ENC   = <span class=\"hljs-number\">7</span>,      <span class=\"hljs-comment\">/* 读取编码器原始值 */</span><br>  S_CPUL  = <span class=\"hljs-number\">8</span>,      <span class=\"hljs-comment\">/* 读取实时脉冲数（根据实时位置计算得到的脉冲数） */</span><br>  S_ENCL  = <span class=\"hljs-number\">9</span>,      <span class=\"hljs-comment\">/* 读取经过线性化校准后的编码器值 */</span><br>  S_TPUL  = <span class=\"hljs-number\">10</span>,     <span class=\"hljs-comment\">/* 读取输入脉冲数 */</span><br>  S_TPOS  = <span class=\"hljs-number\">11</span>,     <span class=\"hljs-comment\">/* 读取电机目标位置 */</span><br>  S_OPOS  = <span class=\"hljs-number\">12</span>,     <span class=\"hljs-comment\">/* 读取电机实时设定的目标位置（开环模式的实时位置） */</span><br>  S_VEL   = <span class=\"hljs-number\">13</span>,     <span class=\"hljs-comment\">/* 读取电机实时转速 */</span><br>  S_CPOS  = <span class=\"hljs-number\">14</span>,     <span class=\"hljs-comment\">/* 读取电机实时位置（基于角度编码器累加的电机实时位置） */</span><br>  S_PERR  = <span class=\"hljs-number\">15</span>,     <span class=\"hljs-comment\">/* 读取电机位置误差 */</span><br>  S_TEMP  = <span class=\"hljs-number\">16</span>,     <span class=\"hljs-comment\">/* 读取电机实时温度 */</span><br>  S_SFLAG = <span class=\"hljs-number\">17</span>,     <span class=\"hljs-comment\">/* 读取状态标志位 */</span><br>  S_OFLAG = <span class=\"hljs-number\">18</span>,     <span class=\"hljs-comment\">/* 读取回零状态标志位 */</span><br>  S_Conf  = <span class=\"hljs-number\">19</span>,     <span class=\"hljs-comment\">/* 读取驱动参数 */</span><br>  S_State = <span class=\"hljs-number\">20</span>,     <span class=\"hljs-comment\">/* 读取系统状态参数 */</span><br>&#125;SysParams_t;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Uart1GpioInit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><span class=\"hljs-comment\">//对UART和LED引脚进行初始化</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">IoTGpioInit</span>(IOT_IO_NAME_GPIO_6);<br>    <span class=\"hljs-comment\">// 设置GPIO0的管脚复用关系为UART1_TX Set the pin reuse relationship of GPIO0 to UART1_ TX</span><br>    <span class=\"hljs-built_in\">IoSetFunc</span>(IOT_IO_NAME_GPIO_6, IOT_IO_FUNC_GPIO_6_UART1_TXD);<br>    <br>    <span class=\"hljs-built_in\">IoTGpioInit</span>(IOT_IO_NAME_GPIO_5);<br>    <span class=\"hljs-comment\">// 设置GPIO1的管脚复用关系为UART1_RX Set the pin reuse relationship of GPIO1 to UART1_ RX</span><br>    <span class=\"hljs-built_in\">IoSetFunc</span>(IOT_IO_NAME_GPIO_5, IOT_IO_FUNC_GPIO_5_UART1_RXD);<br><br>    <span class=\"hljs-comment\">// LED3的GPIO初始化 GPIO initialization of LED3</span><br>    <span class=\"hljs-built_in\">IoTGpioInit</span>(IOT_IO_NAME_GPIO_2);<br>    <span class=\"hljs-comment\">// 设置GPIO9的管脚复用关系为GPIO Set the pin reuse relationship of GPIO9 to GPIO</span><br>    <span class=\"hljs-built_in\">IoSetFunc</span>(IOT_IO_NAME_GPIO_2, IOT_IO_FUNC_GPIO_2_GPIO);<br>    <span class=\"hljs-comment\">// GPIO方向设置为输出 GPIO direction set to output</span><br>    <span class=\"hljs-built_in\">IoTGpioSetDir</span>(IOT_IO_NAME_GPIO_2, IOT_GPIO_DIR_OUT);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Uart1Config</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><span class=\"hljs-comment\">//对UART配置初始化</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">uint32_t</span> ret;<br>    <span class=\"hljs-comment\">/* 初始化UART配置，波特率 115200，数据bit为8,停止位1，奇偶校验为NONE */</span><br>    <span class=\"hljs-comment\">/* Initialize UART configuration, baud rate is 9600, data bit is 8, stop bit is 1, parity is NONE */</span><br>    IotUartAttribute uart_attr = &#123;<br>        .baudRate = <span class=\"hljs-number\">115200</span>,<br>        .dataBits = <span class=\"hljs-number\">8</span>,<br>        .stopBits = <span class=\"hljs-number\">1</span>,<br>        .parity = <span class=\"hljs-number\">0</span>,<br>    &#125;;<br><br>    <span class=\"hljs-comment\">//uart初始化返回值</span><br>    ret = <span class=\"hljs-built_in\">IoTUartInit</span>(HI_UART_IDX_1, &amp;uart_attr);<br>    <span class=\"hljs-comment\">//判断uart是否连接成功</span><br>    <span class=\"hljs-keyword\">if</span> (ret != IOT_SUCCESS) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Init Uart1 Falied Error No : %d\\n&quot;</span>, ret);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_En_Control</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, <span class=\"hljs-type\">int</span> state, <span class=\"hljs-type\">uint8_t</span> snF)</span><span class=\"hljs-comment\">//电机使能控制函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义接收值以及数据长度</span><br>    <span class=\"hljs-type\">uint32_t</span> count = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">uint32_t</span> len = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> uartReadBuff[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>    <span class=\"hljs-comment\">//定义发送命令数组</span><br>    <span class=\"hljs-type\">uint8_t</span> cmd[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>  <br>    <span class=\"hljs-comment\">// 装载命令</span><br>    cmd[<span class=\"hljs-number\">0</span>] =  addr;                       <span class=\"hljs-comment\">// 地址</span><br>    cmd[<span class=\"hljs-number\">1</span>] =  <span class=\"hljs-number\">0xF3</span>;                       <span class=\"hljs-comment\">// 功能码</span><br>    cmd[<span class=\"hljs-number\">2</span>] =  <span class=\"hljs-number\">0xAB</span>;                       <span class=\"hljs-comment\">// 辅助码</span><br>    cmd[<span class=\"hljs-number\">3</span>] =  (<span class=\"hljs-type\">uint8_t</span>)state;             <span class=\"hljs-comment\">// 使能状态</span><br>    cmd[<span class=\"hljs-number\">4</span>] =  snF;                        <span class=\"hljs-comment\">// 多机同步运动标志</span><br>    cmd[<span class=\"hljs-number\">5</span>] =  <span class=\"hljs-number\">0x6B</span>;                       <span class=\"hljs-comment\">// 校验字节</span><br><br>    <span class=\"hljs-comment\">//通过UART的Write函数发送cmd的参数</span><br>    <span class=\"hljs-built_in\">IoTUartWrite</span>(HI_UART_IDX_1, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>*)cmd, <span class=\"hljs-number\">6</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//电机驱动函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_Traj_Position_Control</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, <span class=\"hljs-type\">uint8_t</span> dir, <span class=\"hljs-type\">uint16_t</span> acc, <span class=\"hljs-type\">uint16_t</span> dec, <span class=\"hljs-type\">float</span> velocity, <span class=\"hljs-type\">float</span> position, <span class=\"hljs-type\">uint8_t</span> raf, <span class=\"hljs-type\">uint8_t</span> snF)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义接收值以及数据长度</span><br>    <span class=\"hljs-type\">uint32_t</span> count = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">uint32_t</span> len = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> uartReadBuff[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <br>    <span class=\"hljs-comment\">//定义发送命令数组</span><br>    <span class=\"hljs-type\">uint8_t</span> cmd[<span class=\"hljs-number\">32</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-type\">uint16_t</span> vel = <span class=\"hljs-number\">0</span>; <span class=\"hljs-type\">uint32_t</span> pos = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-comment\">// 将速度和位置放大10倍发送过去</span><br>    vel = (<span class=\"hljs-type\">uint16_t</span>)<span class=\"hljs-built_in\">ABS</span>(velocity * <span class=\"hljs-number\">10.0f</span>); <br>    pos = (<span class=\"hljs-type\">uint32_t</span>)<span class=\"hljs-built_in\">ABS</span>(position * <span class=\"hljs-number\">10.0f</span>);<br><br>    <span class=\"hljs-comment\">// 装载命令</span><br>    cmd[<span class=\"hljs-number\">0</span>]  =  addr;                      <span class=\"hljs-comment\">// 地址</span><br>    cmd[<span class=\"hljs-number\">1</span>]  =  <span class=\"hljs-number\">0xFD</span>;                      <span class=\"hljs-comment\">// 功能码</span><br>    cmd[<span class=\"hljs-number\">2</span>]  =  dir;                       <span class=\"hljs-comment\">// 符号（方向）</span><br>    cmd[<span class=\"hljs-number\">3</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(acc &gt;&gt; <span class=\"hljs-number\">8</span>);       <span class=\"hljs-comment\">// 加速加速度(RPM/s)高8位字节</span><br>    cmd[<span class=\"hljs-number\">4</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(acc &gt;&gt; <span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// 加速加速度(RPM/s)低8位字节  </span><br>    cmd[<span class=\"hljs-number\">5</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(dec &gt;&gt; <span class=\"hljs-number\">8</span>);       <span class=\"hljs-comment\">// 减速加速度(RPM/s)高8位字节</span><br>    cmd[<span class=\"hljs-number\">6</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(dec &gt;&gt; <span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// 减速加速度(RPM/s)低8位字节  </span><br>    cmd[<span class=\"hljs-number\">7</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(vel &gt;&gt; <span class=\"hljs-number\">8</span>);       <span class=\"hljs-comment\">// 最大速度(RPM)高8位字节</span><br>    cmd[<span class=\"hljs-number\">8</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(vel &gt;&gt; <span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// 最大速度(RPM)低8位字节 </span><br>    cmd[<span class=\"hljs-number\">9</span>]  =  (<span class=\"hljs-type\">uint8_t</span>)(pos &gt;&gt; <span class=\"hljs-number\">24</span>);      <span class=\"hljs-comment\">// 位置(bit24 - bit31)</span><br>    cmd[<span class=\"hljs-number\">10</span>] =  (<span class=\"hljs-type\">uint8_t</span>)(pos &gt;&gt; <span class=\"hljs-number\">16</span>);      <span class=\"hljs-comment\">// 位置(bit16 - bit23)</span><br>    cmd[<span class=\"hljs-number\">11</span>] =  (<span class=\"hljs-type\">uint8_t</span>)(pos &gt;&gt; <span class=\"hljs-number\">8</span>);       <span class=\"hljs-comment\">// 位置(bit8  - bit15)</span><br>    cmd[<span class=\"hljs-number\">12</span>] =  (<span class=\"hljs-type\">uint8_t</span>)(pos &gt;&gt; <span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// 位置(bit0  - bit7 )</span><br>    cmd[<span class=\"hljs-number\">13</span>] =  raf;                       <span class=\"hljs-comment\">// 相位位置/绝对位置标志</span><br>    cmd[<span class=\"hljs-number\">14</span>] =  snF;                       <span class=\"hljs-comment\">// 多机同步运动标志</span><br>    cmd[<span class=\"hljs-number\">15</span>] =  <span class=\"hljs-number\">0x6B</span>;                      <span class=\"hljs-comment\">// 校验字节</span><br><br>    <span class=\"hljs-comment\">//通过UART的Write函数发送cmd的参数</span><br>    <span class=\"hljs-built_in\">IoTUartWrite</span>(HI_UART_IDX_1, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>*)cmd, <span class=\"hljs-number\">16</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_Origin_Trigger_Return</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, <span class=\"hljs-type\">uint8_t</span> o_mode, <span class=\"hljs-type\">bool</span> snF)</span><span class=\"hljs-comment\">//电机归零函数，没啥用，需要外界碰撞或者限位，该文件未使用此函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义接收值以及数据长度</span><br>    <span class=\"hljs-type\">uint32_t</span> count = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">uint32_t</span> len = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> uartReadBuff[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>    <span class=\"hljs-type\">uint8_t</span> cmd[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <br>    <span class=\"hljs-comment\">// 装载命令</span><br>    cmd[<span class=\"hljs-number\">0</span>] =  addr;                       <span class=\"hljs-comment\">// 地址</span><br>    cmd[<span class=\"hljs-number\">1</span>] =  <span class=\"hljs-number\">0x9A</span>;                       <span class=\"hljs-comment\">// 功能码</span><br>    cmd[<span class=\"hljs-number\">2</span>] =  o_mode;                     <span class=\"hljs-comment\">// 回零模式，0为单圈就近回零，1为单圈方向回零，2为多圈无限位碰撞回零，3为多圈有限位开关回零</span><br>    cmd[<span class=\"hljs-number\">3</span>] =  snF;                        <span class=\"hljs-comment\">// 多机同步运动标志，false为不启用，true为启用</span><br>    cmd[<span class=\"hljs-number\">4</span>] =  <span class=\"hljs-number\">0x6B</span>;                       <span class=\"hljs-comment\">// 校验字节</span><br><br>    <span class=\"hljs-comment\">//通过UART的Write函数发送cmd的参数</span><br>    <span class=\"hljs-built_in\">IoTUartWrite</span>(HI_UART_IDX_1, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>*)cmd, <span class=\"hljs-number\">5</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_Stop_Now</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, <span class=\"hljs-type\">uint8_t</span> snF)</span><span class=\"hljs-comment\">//立即停机</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义接收值以及数据长度</span><br>    <span class=\"hljs-type\">uint32_t</span> count = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">uint32_t</span> len = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> uartReadBuff[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>    <span class=\"hljs-type\">uint8_t</span> cmd[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <br>    <span class=\"hljs-comment\">// 装载命令</span><br>    cmd[<span class=\"hljs-number\">0</span>] =  addr;                       <span class=\"hljs-comment\">// 地址</span><br>    cmd[<span class=\"hljs-number\">1</span>] =  <span class=\"hljs-number\">0xFE</span>;                       <span class=\"hljs-comment\">// 功能码</span><br>    cmd[<span class=\"hljs-number\">2</span>] =  <span class=\"hljs-number\">0x98</span>;                       <span class=\"hljs-comment\">// 辅助码</span><br>    cmd[<span class=\"hljs-number\">3</span>] =  snF;                        <span class=\"hljs-comment\">// 多机同步运动标志</span><br>    cmd[<span class=\"hljs-number\">4</span>] =  <span class=\"hljs-number\">0x6B</span>;                       <span class=\"hljs-comment\">// 校验字节</span><br><br>    <span class=\"hljs-comment\">//通过UART的Write函数发送cmd的参数</span><br>    <span class=\"hljs-built_in\">IoTUartWrite</span>(HI_UART_IDX_1, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>*)cmd, <span class=\"hljs-number\">5</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">IoTUartFlush</span><span class=\"hljs-params\">(<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> id)</span> <span class=\"hljs-comment\">//串口清空函数，用于进行清空UART内部缓存，不然会出现读取错误</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义要存储数组</span><br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> buffer[<span class=\"hljs-number\">128</span>];<br><br>    <span class=\"hljs-comment\">//定义读取值</span><br>    <span class=\"hljs-type\">int</span> read;<br><br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        <span class=\"hljs-comment\">//将读取值全部存入数组当中，从而达到清空效果</span><br>        read = <span class=\"hljs-built_in\">IoTUartRead</span>(id, buffer, <span class=\"hljs-built_in\">sizeof</span>(buffer));<br>    &#125; <span class=\"hljs-keyword\">while</span> (read &gt; <span class=\"hljs-number\">0</span>);<br><br>    <span class=\"hljs-keyword\">return</span> IOT_SUCCESS;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_Read_Sys_Params</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, SysParams_t s)</span><span class=\"hljs-comment\">//读取电机的实时位置</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义发送数组</span><br>    <span class=\"hljs-type\">uint8_t</span> cmd[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>  <br>    <span class=\"hljs-comment\">// 装载命令</span><br>    cmd[<span class=\"hljs-number\">0</span>] =  addr;                       <span class=\"hljs-comment\">// 地址</span><br><br>    <span class=\"hljs-comment\">//对功能码进行选择</span><br>    <span class=\"hljs-keyword\">switch</span>(s)                             <span class=\"hljs-comment\">// 功能码</span><br>    &#123;<br>        <span class=\"hljs-keyword\">case</span> S_VER   : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x1F</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取固件版本和对应的硬件版本 */</span><br>        <span class=\"hljs-keyword\">case</span> S_RL    : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x20</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取读取相电阻和相电感 */</span><br>        <span class=\"hljs-keyword\">case</span> S_PID   : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x21</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取PID参数 */</span><br>        <span class=\"hljs-keyword\">case</span> S_ORG   : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x22</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取回零参数 */</span><br>        <span class=\"hljs-keyword\">case</span> S_VBUS  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x24</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取总线电压 */</span><br>        <span class=\"hljs-keyword\">case</span> S_CBUS  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x26</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取总线电流 */</span><br>        <span class=\"hljs-keyword\">case</span> S_CPHA  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x27</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取相电流 */</span><br>        <span class=\"hljs-keyword\">case</span> S_ENC   : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x29</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取编码器原始值 */</span><br>        <span class=\"hljs-keyword\">case</span> S_CPUL  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x30</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取实时脉冲数（根据实时位置计算得到的脉冲数） */</span><br>        <span class=\"hljs-keyword\">case</span> S_ENCL  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x31</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取经过线性化校准后的编码器值 */</span><br>        <span class=\"hljs-keyword\">case</span> S_TPUL  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x32</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取输入脉冲数 */</span><br>        <span class=\"hljs-keyword\">case</span> S_TPOS  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x33</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机目标位置 */</span><br>        <span class=\"hljs-keyword\">case</span> S_OPOS  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x34</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机实时设定的目标位置（开环模式的实时位置） */</span><br>        <span class=\"hljs-keyword\">case</span> S_VEL   : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x35</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机实时转速 */</span><br>        <span class=\"hljs-keyword\">case</span> S_CPOS  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x36</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机实时位置（基于角度编码器累加的电机实时位置） */</span><br>        <span class=\"hljs-keyword\">case</span> S_PERR  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x37</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机位置误差 */</span><br>        <span class=\"hljs-keyword\">case</span> S_TEMP  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x39</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取电机实时温度 */</span><br>        <span class=\"hljs-keyword\">case</span> S_SFLAG : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x3A</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取状态标志位 */</span><br>        <span class=\"hljs-keyword\">case</span> S_OFLAG : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x3B</span>; <span class=\"hljs-keyword\">break</span>;                  <span class=\"hljs-comment\">/* 读取回零状态标志位 */</span><br>        <span class=\"hljs-keyword\">case</span> S_Conf  : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x42</span>; cmd[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">0x6C</span>; <span class=\"hljs-keyword\">break</span>;   <span class=\"hljs-comment\">/* 读取驱动参数 */</span><br>        <span class=\"hljs-keyword\">case</span> S_State : cmd[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x43</span>; cmd[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">0x7A</span>; <span class=\"hljs-keyword\">break</span>;   <span class=\"hljs-comment\">/* 读取系统状态参数 */</span><br>        <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 如果需要四字节，将校验字节放在 cmd[3]</span><br>    cmd[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">0x6B</span>; <br><br>    <span class=\"hljs-comment\">//通过UART的Write函数发送cmd的参数</span><br>    <span class=\"hljs-built_in\">IoTUartWrite</span>(HI_UART_IDX_1, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>*)cmd, <span class=\"hljs-number\">3</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ZDT_X42_V2_Receive_Data</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> addr, <span class=\"hljs-type\">uint8_t</span> *rxCmd, <span class=\"hljs-type\">uint32_t</span> *rxCount)</span> </span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">uint32_t</span> startTime = <span class=\"hljs-built_in\">osKernelGetTickCount</span>();  <span class=\"hljs-comment\">// 获取当前系统时间</span><br>    <span class=\"hljs-type\">uint8_t</span> buffer[UART_BUFF_SIZE];<br>    <span class=\"hljs-type\">int</span> len;<br><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) &#123;<br>        len = <span class=\"hljs-built_in\">IoTUartRead</span>(HI_UART_IDX_1, buffer, <span class=\"hljs-built_in\">sizeof</span>(buffer));  <span class=\"hljs-comment\">// 从UART读取数据</span><br>        <span class=\"hljs-keyword\">if</span> (len &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// 将读取的数据复制到rxCmd数组中，确保不会溢出</span><br>            <span class=\"hljs-type\">uint32_t</span> copySize = (*rxCount + len &gt; UART_BUFF_SIZE) ? (UART_BUFF_SIZE - *rxCount) : len;<br>            <span class=\"hljs-built_in\">memcpy</span>(rxCmd + *rxCount, buffer, copySize);<br>            *rxCount += copySize;<br><br>            startTime = <span class=\"hljs-built_in\">osKernelGetTickCount</span>();  <span class=\"hljs-comment\">// 更新最后一次接收数据的时间</span><br>        &#125;<br><br>        <span class=\"hljs-comment\">// 检查是否超时</span><br>        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-built_in\">osKernelGetTickCount</span>() - startTime) &gt; UART_TIMEOUT_MS) &#123;<br>            <span class=\"hljs-keyword\">break</span>;  <span class=\"hljs-comment\">// 如果超过设定的超时时间，则停止接收数据</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">absolute</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> value)</span> <span class=\"hljs-comment\">//找不到绝对值的函数值定义，自己创建一个函数用于进行绝对值计算</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> (value &lt; <span class=\"hljs-number\">0</span>) ? -value : value;<span class=\"hljs-comment\">//判断如何取正</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">ReadMotorAngle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> sliderId)</span> <span class=\"hljs-comment\">//定义读取角度，并计算和输出角度值</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//清空缓存区</span><br>    <span class=\"hljs-built_in\">IoTUartFlush</span>(HI_UART_IDX_1);<br><br>    <span class=\"hljs-comment\">//定义角度取值为小数点后一位</span><br>    <span class=\"hljs-type\">float</span> pos = <span class=\"hljs-number\">0.0f</span>, Motor_Cur_Pos = <span class=\"hljs-number\">0.0f</span>;<br><br>    <span class=\"hljs-comment\">// 定义接收数据数组、接收数据长度</span><br>    <span class=\"hljs-type\">uint8_t</span> rxCmd[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-type\">uint32_t</span> rxCount = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-comment\">// 读取电机实时位置</span><br>    <span class=\"hljs-built_in\">ZDT_X42_V2_Read_Sys_Params</span>(sliderId, S_CPOS);<br><br>    <span class=\"hljs-comment\">// 等待返回命令，命令数据缓存在数组rxCmd上，长度为rxCount</span><br>    <span class=\"hljs-built_in\">ZDT_X42_V2_Receive_Data</span>(sliderId, rxCmd, &amp;rxCount);<br><br>    <span class=\"hljs-comment\">//将读取的rxCmd[]十六进制编码打印，用于测试调试</span><br>    <span class=\"hljs-comment\">// printf(&quot;Received bytes: &quot;);</span><br>    <span class=\"hljs-comment\">// for (int i = 0; i &lt; 8; i++) &#123;</span><br>    <span class=\"hljs-comment\">//     printf(&quot;%02X &quot;, rxCmd[i]);</span><br>    <span class=\"hljs-comment\">// &#125;</span><br>    <span class=\"hljs-comment\">// printf(&quot;\\n&quot;);</span><br><br>    <span class=\"hljs-comment\">// 获取电机实时角度返回值（电机实时角度返回值放大了10倍返回的，因为要保留1位小数）</span><br>    pos = ((<span class=\"hljs-type\">uint32_t</span>)rxCmd[<span class=\"hljs-number\">3</span>] &lt;&lt; <span class=\"hljs-number\">24</span>) | ((<span class=\"hljs-type\">uint32_t</span>)rxCmd[<span class=\"hljs-number\">4</span>] &lt;&lt; <span class=\"hljs-number\">16</span>) | ((<span class=\"hljs-type\">uint32_t</span>)rxCmd[<span class=\"hljs-number\">5</span>] &lt;&lt; <span class=\"hljs-number\">8</span>) | (<span class=\"hljs-type\">uint32_t</span>)rxCmd[<span class=\"hljs-number\">6</span>];<br><br>    <span class=\"hljs-comment\">// 缩小10倍，并判断符号，得到真正的实时角度，存放在浮点数变量Motor_Cur_Pos中</span><br>    Motor_Cur_Pos = pos * <span class=\"hljs-number\">0.1f</span>;<br>    <span class=\"hljs-keyword\">if</span> (rxCmd[<span class=\"hljs-number\">2</span>]) &#123;<br>        Motor_Cur_Pos = -Motor_Cur_Pos;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 打印解析后的角度值</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Current position (as angle): %.1f degrees\\n&quot;</span>, Motor_Cur_Pos);<br><br>    <span class=\"hljs-keyword\">return</span> Motor_Cur_Pos;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ResetMotorToOrigin</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint8_t</span> sliderId)</span> <span class=\"hljs-comment\">//电机归零函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//读取电机目前角度</span><br>    <span class=\"hljs-type\">float</span> Motor_Cur_Pos = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);<br><br>    <span class=\"hljs-type\">float</span> targetPosition = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 目标位置，这里假设为0度</span><br><br>    <span class=\"hljs-comment\">// 根据当前角度和目标位置计算需要移动的距离</span><br>    <span class=\"hljs-type\">float</span> delta = targetPosition - Motor_Cur_Pos;<br><br>    <span class=\"hljs-comment\">// 将 delta 四舍五入到小数点后一位</span><br>    <span class=\"hljs-comment\">//delta = ((int)(delta * 10 + 0.5)) / 10.0f;</span><br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;delta: %.1f degrees\\n&quot;</span>, delta);<br><br>    <span class=\"hljs-comment\">// 调用轨迹位置控制函数将电机移动到目标位置</span><br>    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, (delta &lt; <span class=\"hljs-number\">0</span>) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta), motor_raf_0, motor_snf_0);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ParseJson</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* json)</span><span class=\"hljs-comment\">//电机uart运行主函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">// 定义JSON键的字符串，根据上位机所需进行定义，格式类型相同</span><br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* labelStr = <span class=\"hljs-string\">&quot;\\&quot;label\\&quot;:&quot;</span>;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* motor_EnStr = <span class=\"hljs-string\">&quot;\\&quot;motor_En\\&quot;:&quot;</span>;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* sliderIdStr = <span class=\"hljs-string\">&quot;\\&quot;sliderId\\&quot;:&quot;</span>;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* valueStr = <span class=\"hljs-string\">&quot;\\&quot;value\\&quot;:&quot;</span>;<br>    <br><br>    <span class=\"hljs-comment\">// 找到JSON字符串中键的位置，用于进行键的连接，等于找到对应的标签</span><br>    <span class=\"hljs-type\">char</span>* labelPos = <span class=\"hljs-built_in\">strstr</span>(json, labelStr);<br>    <span class=\"hljs-type\">char</span>* motor_EnPos = <span class=\"hljs-built_in\">strstr</span>(json, motor_EnStr);<br>    <span class=\"hljs-type\">char</span>* sliderIdPos = <span class=\"hljs-built_in\">strstr</span>(json, sliderIdStr);<br>    <span class=\"hljs-type\">char</span>* valuePos = <span class=\"hljs-built_in\">strstr</span>(json, valueStr);<br><br>    <span class=\"hljs-comment\">// 如果找到键，解析其对应的值</span><br>    <span class=\"hljs-keyword\">if</span> (labelPos != <span class=\"hljs-literal\">NULL</span> &amp;&amp; motor_EnPos != <span class=\"hljs-literal\">NULL</span> &amp;&amp; sliderIdPos != <span class=\"hljs-literal\">NULL</span> &amp;&amp; valuePos != <span class=\"hljs-literal\">NULL</span>) &#123;<br>        <span class=\"hljs-type\">int</span> label = <span class=\"hljs-built_in\">atoi</span>(labelPos + <span class=\"hljs-built_in\">strlen</span>(labelStr)); <span class=\"hljs-comment\">// 将label转换为整数</span><br>        <span class=\"hljs-type\">int</span> sliderId = <span class=\"hljs-built_in\">atoi</span>(sliderIdPos + <span class=\"hljs-built_in\">strlen</span>(sliderIdStr)); <span class=\"hljs-comment\">// 将sliderId转换为整数</span><br><br>        <span class=\"hljs-comment\">//放大30倍，对应谐波减速器</span><br>        <span class=\"hljs-type\">int</span> value = <span class=\"hljs-built_in\">atof</span>(valuePos + <span class=\"hljs-built_in\">strlen</span>(valueStr));<br>        <span class=\"hljs-type\">int</span> motor_En = <span class=\"hljs-built_in\">atoi</span>(motor_EnPos + <span class=\"hljs-built_in\">strlen</span>(motor_EnStr));<br><br>        <span class=\"hljs-comment\">// 打印解析出的值</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;label: %d, motor_En: %d, Slider ID: %d, Value: %d\\n&quot;</span>, label, motor_En, sliderId, value);<br><br>        <span class=\"hljs-comment\">// 根据Slider ID和Value执行相应的操作</span><br>        <span class=\"hljs-keyword\">if</span> (label == <span class=\"hljs-number\">1</span>) <br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125; <br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">2</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">3</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">4</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">5</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">6</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(motor_En == <span class=\"hljs-number\">1</span>)&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 使能</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_En_Control</span>(sliderId, motor_En, motor_snf_0);  <span class=\"hljs-comment\">// 失能</span><br>                &#125;<br>            &#125;<br>        &#125; <br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (label == <span class=\"hljs-number\">2</span>) <br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125; <br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">2</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">3</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">4</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">5</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sliderId == <span class=\"hljs-number\">6</span>)&#123;<br>                <span class=\"hljs-type\">float</span> value_before = <span class=\"hljs-built_in\">ReadMotorAngle</span>(sliderId);  <span class=\"hljs-comment\">//读取电机现在角度值</span><br>                <span class=\"hljs-type\">float</span> delta_value = value - value_before;  <span class=\"hljs-comment\">// 计算想要的变化值</span><br>                <span class=\"hljs-keyword\">if</span> (delta_value &lt;= <span class=\"hljs-number\">0</span>) &#123;  <span class=\"hljs-comment\">//利用值的正负，判断电机正反转</span><br>                    <span class=\"hljs-comment\">//正转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_pos, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 0);  //LED灯调试代码</span><br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-comment\">//反转</span><br>                    <span class=\"hljs-built_in\">ZDT_X42_V2_Traj_Position_Control</span>(sliderId, DIR_neg, Speed_acc, Speed_dec, Speed_max, <span class=\"hljs-built_in\">absolute</span>(delta_value), motor_raf_0, motor_snf_0);<br>                    <span class=\"hljs-comment\">//IoTGpioSetOutputVal(IOT_IO_NAME_GPIO_2, 1);  //LED灯调试代码</span><br>                &#125;<br>            &#125;<br>            <br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (label == <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//电机紧急停机</span><br>        &#123;<br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">//调用停机函数</span><br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);  <span class=\"hljs-comment\">//延时确保函数依次执行</span><br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ZDT_X42_V2_Stop_Now</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (label == <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//电机复位函数</span><br>        &#123;<br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">//调用复位函数</span><br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);  <span class=\"hljs-comment\">//延时确保函数依次执行</span><br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">2</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">3</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">4</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">5</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>            <span class=\"hljs-built_in\">ResetMotorToOrigin</span>(<span class=\"hljs-number\">6</span>);<br>            <span class=\"hljs-built_in\">usleep</span>(<span class=\"hljs-number\">50</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Task1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><span class=\"hljs-comment\">//系统主函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> socket_fd = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">char</span> buff[<span class=\"hljs-number\">256</span>];<br>    <span class=\"hljs-type\">int</span> re = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-type\">uint32_t</span> count_0 = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">uint32_t</span> len_0 = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> uartReadBuff_0[UART_BUFF_SIZE] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>    <span class=\"hljs-comment\">// 对UART1的一些初始化 Some initialization of UART1</span><br>    <span class=\"hljs-built_in\">Uart1GpioInit</span>();<br>    <span class=\"hljs-comment\">// 对UART1参数的一些配置 Some configurations of UART1 parameters</span><br>    <span class=\"hljs-built_in\">Uart1Config</span>();<br><br>    <span class=\"hljs-comment\">// 连接Wifi</span><br>    <span class=\"hljs-built_in\">WiFi_connectHotspots</span>(<span class=\"hljs-string\">&quot;esp32&quot;</span>, <span class=\"hljs-string\">&quot;12345678&quot;</span>);<br>    socket_fd = <span class=\"hljs-built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// 创建套接字（TCP）</span><br>    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">sockaddr_in</span> addr;<br>    addr.sin_family = AF_INET;<br>    addr.sin_port = <span class=\"hljs-built_in\">htons</span>(TCP_SERVER_PORT);<br>    addr.sin_addr.s_addr = <span class=\"hljs-built_in\">inet_addr</span>(TCP_SERVER_IP); <span class=\"hljs-comment\">// 填写服务器的IP地址</span><br><br>    re = <span class=\"hljs-built_in\">connect</span>(socket_fd, (<span class=\"hljs-keyword\">struct</span> sockaddr *)&amp;addr, <span class=\"hljs-built_in\">sizeof</span>(addr)); <span class=\"hljs-comment\">// 连接服务器</span><br>    <span class=\"hljs-keyword\">if</span> (re == <span class=\"hljs-number\">-1</span>) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Failed to connect to the server\\r\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Connection to server successful\\r\\n&quot;</span>);<br><br>    <span class=\"hljs-comment\">// 发送第一条数据</span><br>    <span class=\"hljs-built_in\">send</span>(socket_fd, <span class=\"hljs-string\">&quot;Connection to server successful.&quot;</span>, <span class=\"hljs-built_in\">strlen</span>(<span class=\"hljs-string\">&quot;Connection to server successful.&quot;</span>), <span class=\"hljs-number\">0</span>);<br><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-built_in\">memset_s</span>(buff, <span class=\"hljs-built_in\">sizeof</span>(buff), <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">sizeof</span>(buff));<br>        re = <span class=\"hljs-built_in\">recv</span>(socket_fd, buff, <span class=\"hljs-built_in\">sizeof</span>(buff), <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">//\t接收客户端发送过来的消息</span><br>        <span class=\"hljs-keyword\">if</span> (re &lt;= <span class=\"hljs-number\">0</span>) <br>        &#123;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-built_in\">ParseJson</span>(buff);<span class=\"hljs-comment\">//执行控制主函数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">close</span>(socket_fd);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">UartExampleEntry</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><span class=\"hljs-comment\">//配置上报函数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//osThreadAttr_t attr;</span><br>    <span class=\"hljs-built_in\">IoTWatchDogDisable</span>();<br><br>    osThreadAttr_t options;<br>    options.name = <span class=\"hljs-string\">&quot;thread_1&quot;</span>;<br>    options.attr_bits = <span class=\"hljs-number\">0</span>;<br>    options.cb_mem = <span class=\"hljs-literal\">NULL</span>;<br>    options.cb_size = <span class=\"hljs-number\">0</span>;<br>    options.stack_mem = <span class=\"hljs-literal\">NULL</span>;<br>    options.stack_size = TASK_STACK_SIZE;<br>    options.priority = osPriorityNormal;<br><br>    Task1_ID = <span class=\"hljs-built_in\">osThreadNew</span>((osThreadFunc_t)Task1, <span class=\"hljs-literal\">NULL</span>, &amp;options);<br>    <span class=\"hljs-keyword\">if</span> (Task1_ID != <span class=\"hljs-literal\">NULL</span>) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;ID = %d, Create Task1_ID is OK!\\r\\n&quot;</span>, Task1_ID);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-built_in\">APP_FEATURE_INIT</span>(UartExampleEntry);<br></code></pre></td></tr></table></figure>\n\n"},{"title":"TCP通信","date":"2023-05-26T16:00:00.000Z","_content":"\n# TCP通信\n\n## 一、QT服务端构建\n\n- 该模块将采用上位机作为服务端，下位机作为客户端进行连接，前提需要保证服务端、客户端处于同一局域网内，处于同一个端口号，IPv4地址一样，服务端的IPv4需要查阅该电脑本身IP，无法进行修改，选用默认方式。\n\n### ①TCP的概念\n\n- 传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793 定义。消息是没有边界的，所以无论消息大小都可以进行传输。消息是有序的，当前一个消息没有收到，即使先收到了后面的字节，那么也不能扔给应用层去处理，同时对重复的报文会自动丢弃。\n\n- TCP传输里面，需要Socket，上位机需要设置Socket，就好像找了一把锁，下位机需要上报Socket，就好像插上钥匙开锁，如果一样，那就可以进行连接，Socket：由IP地址和端口号组成\n\n### ②代码实现\n\n- 首先在mainwindow.h头文件函数里面添加所需头文件，如果报错，检查配置环境是否缺失，问网上教程，不赘述。之后还需要定义TCP通信对象，用于数据的读取和调用。\n\n```\n//TCP服务端\n#include <QTcpServer>\n#include <QTcpSocket>\n\n//创建TCP通讯对象\nQTcpSocket *socket;\nQTcpServer *server;\n```\n\n- 之后在mainwindow.cpp主函数里面进行TCP的初始化定义，将头文件定义的对象指向接下来要读取的函数，并采用connect函数，将新的客户端于newConnection_SLOT()槽函数连接\n\n```\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui->setupUi(this);\n    \n\t//TCP通讯定义\n    socket = new QTcpSocket();\n    server = new QTcpServer();\n\n    //信号：新的客户端连接建立 槽函数：获取客户端套接字，允许写入数据\n    connect(server,SIGNAL(newConnection()),this,SLOT(newConnection_SLOT()));\n    \n}\n```\n\n- newConnection_SLOT()槽函数用于初始化设置，并监听客户端信息，如果接收到缓存信息，触发readyRead_SLOT()槽函数进行数据的读取和打印\n\n```\nvoid MainWindow::newConnection_SLOT()//定义TCP\n{\n    socket = server->nextPendingConnection(); //获取已经连接的客户端套接字\n    connect(socket,SIGNAL(readyRead()),this,SLOT(readyRead_SLOT()));//如果socket中有缓存消息，触发槽函数\n}\n```\n\n- readyRead_SLOT()函数主要进行读取客户端发来的缓存消息，并写入Receive_text当中\n\n```\nvoid MainWindow::readyRead_SLOT()//接收消息并显示到接收框\n{\n    qDebug() << \"Server Received!\";\n    QString buffer;\n    //读取缓冲区数据\n    buffer = socket->readAll();\n    if(!buffer.isEmpty())\n    {\n        //刷新显示\n        ui->Receive_text->appendPlainText(buffer);\n    }\n}\n```\n\n- 该类型函数配置完，基本上可以实现监听、读写功能，但是缺少用户对它的触发，所以再编写一个触发函数，按下on_Monitor_OPEN_clicked(bool checked)函数，既可以将PORT_TEXT文本中用户定义的端口号写入socket中，并进行发送，如果未连接成功，将按键复位。如果连接成功，再次点击该按钮，则停止监听，断开TCP连接。\n\n```\nvoid MainWindow::on_Monitor_OPEN_clicked(bool checked)//打开TCP监听\n{\n    if(checked)\n    {\n        int port = ui->PORT_TEXT->text().toUInt();\n        //如果未监听到\n        if(!server->listen(QHostAddress::Any, port))\n        {\n            qDebug() << server->errorString();\n            //连接失败，再次点击则重新连接，将checked恢复为true\n            ui->Monitor_OPEN->toggle();\n            return;\n        }\n        qDebug() << \"Listen Successfully! Message from port:\" << port;\n        //修改按钮文字\n        ui->Monitor_OPEN->setText(\"停止监听\");\n        //发送键使能\n        ui->Send_Button->setEnabled(true);\n    }\n    else\n    {\n         qDebug() << \"Stop Listening!\";\n        //如果已经连接则断开连接\n        if(socket->state() == QAbstractSocket::ConnectedState)\n        {\n            //断开连接\n            socket->disconnectFromHost();\n        }\n        //关闭倾听服务\n        server->close();\n        //修改按钮文字&发送键静默\n        ui->Monitor_OPEN->setText(\"开始监听\");\n        ui->Send_Button->setEnabled(false);\n    }\n}\n```\n\n## 二、TCP服务端-客户端通信\n\n- 基于上述设置后，用户就可以根据自己的想法去定义端口号，并随时打开和关闭监听端口，我们还需要设置一些Debug窗口来进行发送和接收内容的打印及调试。首先在mainwindow.h头文件函数里面添加所需头文件。\n\n```\n//文本编辑\n#include <QLineEdit>\n```\n\n- 之后撰写发送槽函数，该槽函数主要是读取输入框的内容，写入socket中，并利用socket->write()函数，将内容通过TCP通信传输到下位机当中，并利用 socket->flush()函数刷新重置缓冲区\n\n```\nvoid MainWindow::on_Send_Button_clicked()//发送数据\n{\n\t//主要用于调试\n    qDebug() << \"Server Send: \" << ui->Send_text->toPlainText().toLatin1();\n    //将输入框的内容写入socket缓冲区\n    socket->write(ui->Send_text->toPlainText().toLatin1());\n    //刷新socket缓冲区\n    socket->flush();\n}\n```\n\n- 而后定义两个简单的槽函数，利用clear()函数对发送区和接收区进行清空\n\n```\nvoid MainWindow::on_Receive_CLEAR_clicked()//回收框清屏\n{\n    ui->Receive_text->clear();\n}\n\nvoid MainWindow::on_Send_CLEAR_clicked()//发送框清屏\n{\n    ui->Send_text->clear();\n}\n```","source":"_posts/20240529ZYY-1_TCP通信.md","raw":"---\ntitle: TCP通信\ntag: TCP\ndate: 2023-05-27\ncategories: Linux\n---\n\n# TCP通信\n\n## 一、QT服务端构建\n\n- 该模块将采用上位机作为服务端，下位机作为客户端进行连接，前提需要保证服务端、客户端处于同一局域网内，处于同一个端口号，IPv4地址一样，服务端的IPv4需要查阅该电脑本身IP，无法进行修改，选用默认方式。\n\n### ①TCP的概念\n\n- 传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793 定义。消息是没有边界的，所以无论消息大小都可以进行传输。消息是有序的，当前一个消息没有收到，即使先收到了后面的字节，那么也不能扔给应用层去处理，同时对重复的报文会自动丢弃。\n\n- TCP传输里面，需要Socket，上位机需要设置Socket，就好像找了一把锁，下位机需要上报Socket，就好像插上钥匙开锁，如果一样，那就可以进行连接，Socket：由IP地址和端口号组成\n\n### ②代码实现\n\n- 首先在mainwindow.h头文件函数里面添加所需头文件，如果报错，检查配置环境是否缺失，问网上教程，不赘述。之后还需要定义TCP通信对象，用于数据的读取和调用。\n\n```\n//TCP服务端\n#include <QTcpServer>\n#include <QTcpSocket>\n\n//创建TCP通讯对象\nQTcpSocket *socket;\nQTcpServer *server;\n```\n\n- 之后在mainwindow.cpp主函数里面进行TCP的初始化定义，将头文件定义的对象指向接下来要读取的函数，并采用connect函数，将新的客户端于newConnection_SLOT()槽函数连接\n\n```\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui->setupUi(this);\n    \n\t//TCP通讯定义\n    socket = new QTcpSocket();\n    server = new QTcpServer();\n\n    //信号：新的客户端连接建立 槽函数：获取客户端套接字，允许写入数据\n    connect(server,SIGNAL(newConnection()),this,SLOT(newConnection_SLOT()));\n    \n}\n```\n\n- newConnection_SLOT()槽函数用于初始化设置，并监听客户端信息，如果接收到缓存信息，触发readyRead_SLOT()槽函数进行数据的读取和打印\n\n```\nvoid MainWindow::newConnection_SLOT()//定义TCP\n{\n    socket = server->nextPendingConnection(); //获取已经连接的客户端套接字\n    connect(socket,SIGNAL(readyRead()),this,SLOT(readyRead_SLOT()));//如果socket中有缓存消息，触发槽函数\n}\n```\n\n- readyRead_SLOT()函数主要进行读取客户端发来的缓存消息，并写入Receive_text当中\n\n```\nvoid MainWindow::readyRead_SLOT()//接收消息并显示到接收框\n{\n    qDebug() << \"Server Received!\";\n    QString buffer;\n    //读取缓冲区数据\n    buffer = socket->readAll();\n    if(!buffer.isEmpty())\n    {\n        //刷新显示\n        ui->Receive_text->appendPlainText(buffer);\n    }\n}\n```\n\n- 该类型函数配置完，基本上可以实现监听、读写功能，但是缺少用户对它的触发，所以再编写一个触发函数，按下on_Monitor_OPEN_clicked(bool checked)函数，既可以将PORT_TEXT文本中用户定义的端口号写入socket中，并进行发送，如果未连接成功，将按键复位。如果连接成功，再次点击该按钮，则停止监听，断开TCP连接。\n\n```\nvoid MainWindow::on_Monitor_OPEN_clicked(bool checked)//打开TCP监听\n{\n    if(checked)\n    {\n        int port = ui->PORT_TEXT->text().toUInt();\n        //如果未监听到\n        if(!server->listen(QHostAddress::Any, port))\n        {\n            qDebug() << server->errorString();\n            //连接失败，再次点击则重新连接，将checked恢复为true\n            ui->Monitor_OPEN->toggle();\n            return;\n        }\n        qDebug() << \"Listen Successfully! Message from port:\" << port;\n        //修改按钮文字\n        ui->Monitor_OPEN->setText(\"停止监听\");\n        //发送键使能\n        ui->Send_Button->setEnabled(true);\n    }\n    else\n    {\n         qDebug() << \"Stop Listening!\";\n        //如果已经连接则断开连接\n        if(socket->state() == QAbstractSocket::ConnectedState)\n        {\n            //断开连接\n            socket->disconnectFromHost();\n        }\n        //关闭倾听服务\n        server->close();\n        //修改按钮文字&发送键静默\n        ui->Monitor_OPEN->setText(\"开始监听\");\n        ui->Send_Button->setEnabled(false);\n    }\n}\n```\n\n## 二、TCP服务端-客户端通信\n\n- 基于上述设置后，用户就可以根据自己的想法去定义端口号，并随时打开和关闭监听端口，我们还需要设置一些Debug窗口来进行发送和接收内容的打印及调试。首先在mainwindow.h头文件函数里面添加所需头文件。\n\n```\n//文本编辑\n#include <QLineEdit>\n```\n\n- 之后撰写发送槽函数，该槽函数主要是读取输入框的内容，写入socket中，并利用socket->write()函数，将内容通过TCP通信传输到下位机当中，并利用 socket->flush()函数刷新重置缓冲区\n\n```\nvoid MainWindow::on_Send_Button_clicked()//发送数据\n{\n\t//主要用于调试\n    qDebug() << \"Server Send: \" << ui->Send_text->toPlainText().toLatin1();\n    //将输入框的内容写入socket缓冲区\n    socket->write(ui->Send_text->toPlainText().toLatin1());\n    //刷新socket缓冲区\n    socket->flush();\n}\n```\n\n- 而后定义两个简单的槽函数，利用clear()函数对发送区和接收区进行清空\n\n```\nvoid MainWindow::on_Receive_CLEAR_clicked()//回收框清屏\n{\n    ui->Receive_text->clear();\n}\n\nvoid MainWindow::on_Send_CLEAR_clicked()//发送框清屏\n{\n    ui->Send_text->clear();\n}\n```","slug":"20240529ZYY-1_TCP通信","published":1,"updated":"2024-07-26T09:54:53.669Z","_id":"clz1edk9w000gx8uwe5fegtff","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"TCP通信\"><a href=\"#TCP通信\" class=\"headerlink\" title=\"TCP通信\"></a>TCP通信</h1><h2 id=\"一、QT服务端构建\"><a href=\"#一、QT服务端构建\" class=\"headerlink\" title=\"一、QT服务端构建\"></a>一、QT服务端构建</h2><ul>\n<li>该模块将采用上位机作为服务端，下位机作为客户端进行连接，前提需要保证服务端、客户端处于同一局域网内，处于同一个端口号，IPv4地址一样，服务端的IPv4需要查阅该电脑本身IP，无法进行修改，选用默认方式。</li>\n</ul>\n<h3 id=\"①TCP的概念\"><a href=\"#①TCP的概念\" class=\"headerlink\" title=\"①TCP的概念\"></a>①TCP的概念</h3><ul>\n<li><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793 定义。消息是没有边界的，所以无论消息大小都可以进行传输。消息是有序的，当前一个消息没有收到，即使先收到了后面的字节，那么也不能扔给应用层去处理，同时对重复的报文会自动丢弃。</p>\n</li>\n<li><p>TCP传输里面，需要Socket，上位机需要设置Socket，就好像找了一把锁，下位机需要上报Socket，就好像插上钥匙开锁，如果一样，那就可以进行连接，Socket：由IP地址和端口号组成</p>\n</li>\n</ul>\n<h3 id=\"②代码实现\"><a href=\"#②代码实现\" class=\"headerlink\" title=\"②代码实现\"></a>②代码实现</h3><ul>\n<li>首先在mainwindow.h头文件函数里面添加所需头文件，如果报错，检查配置环境是否缺失，问网上教程，不赘述。之后还需要定义TCP通信对象，用于数据的读取和调用。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//TCP服务端</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QTcpServer&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QTcpSocket&gt;</span></span><br><br><span class=\"hljs-comment\">//创建TCP通讯对象</span><br>QTcpSocket *socket;<br>QTcpServer *server;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>之后在mainwindow.cpp主函数里面进行TCP的初始化定义，将头文件定义的对象指向接下来要读取的函数，并采用connect函数，将新的客户端于newConnection_SLOT()槽函数连接</li>\n</ul>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">MainWindow::MainWindow(QWidget *parent)<br>    : QMainWindow(parent)<br>    , ui(<span class=\"hljs-keyword\">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;setupUi(<span class=\"hljs-keyword\">this</span>);<br>    <br>\t<span class=\"hljs-comment\">//TCP通讯定义</span><br>    socket = <span class=\"hljs-keyword\">new</span> QTcpSocket();<br>    <span class=\"hljs-keyword\">server</span> = <span class=\"hljs-keyword\">new</span> QTcpServer();<br><br>    <span class=\"hljs-comment\">//信号：新的客户端连接建立 槽函数：获取客户端套接字，允许写入数据</span><br>    connect(<span class=\"hljs-keyword\">server</span>,SIGNAL(newConnection()),<span class=\"hljs-keyword\">this</span>,SLOT(newConnection_SLOT()));<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>newConnection_SLOT()槽函数用于初始化设置，并监听客户端信息，如果接收到缓存信息，触发readyRead_SLOT()槽函数进行数据的读取和打印</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">MainWindow::newConnection_SLOT</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//定义TCP</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    socket = server-&gt;<span class=\"hljs-built_in\">nextPendingConnection</span>(); <span class=\"hljs-comment\">//获取已经连接的客户端套接字</span><br>    <span class=\"hljs-built_in\">connect</span>(socket,<span class=\"hljs-built_in\">SIGNAL</span>(<span class=\"hljs-built_in\">readyRead</span>()),<span class=\"hljs-keyword\">this</span>,<span class=\"hljs-built_in\">SLOT</span>(<span class=\"hljs-built_in\">readyRead_SLOT</span>()));<span class=\"hljs-comment\">//如果socket中有缓存消息，触发槽函数</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>readyRead_SLOT()函数主要进行读取客户端发来的缓存消息，并写入Receive_text当中</li>\n</ul>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">void</span> MainWindow::readyRead_SLOT()<span class=\"hljs-comment\">//接收消息并显示到接收框</span><br>&#123;<br>    qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Server Received!&quot;</span>;<br>    QString <span class=\"hljs-built_in\">buffer</span>;<br>    <span class=\"hljs-comment\">//读取缓冲区数据</span><br>    <span class=\"hljs-built_in\">buffer</span> = socket-&gt;readAll();<br>    <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">buffer</span>.<span class=\"hljs-built_in\">isEmpty</span>())<br>    &#123;<br>        <span class=\"hljs-comment\">//刷新显示</span><br>        ui-&gt;Receive_text-&gt;appendPlainText(<span class=\"hljs-built_in\">buffer</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>该类型函数配置完，基本上可以实现监听、读写功能，但是缺少用户对它的触发，所以再编写一个触发函数，按下on_Monitor_OPEN_clicked(bool checked)函数，既可以将PORT_TEXT文本中用户定义的端口号写入socket中，并进行发送，如果未连接成功，将按键复位。如果连接成功，再次点击该按钮，则停止监听，断开TCP连接。</li>\n</ul>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\">void MainWindow::on_Monitor_OPEN_clicked(<span class=\"hljs-keyword\">bool</span> checked)<span class=\"hljs-comment\">//打开TCP监听</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(checked)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> port = ui-&gt;PORT_TEXT-&gt;text().toUInt();<br>        <span class=\"hljs-comment\">//如果未监听到</span><br>        <span class=\"hljs-keyword\">if</span>(!server-&gt;listen(QHostAddress::Any, port))<br>        &#123;<br>            qDebug() &lt;&lt; server-&gt;errorString();<br>            <span class=\"hljs-comment\">//连接失败，再次点击则重新连接，将checked恢复为true</span><br>            ui-&gt;Monitor_OPEN-&gt;toggle();<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Listen Successfully! Message from port:&quot;</span> &lt;&lt; port;<br>        <span class=\"hljs-comment\">//修改按钮文字</span><br>        ui-&gt;Monitor_OPEN-&gt;setText(<span class=\"hljs-string\">&quot;停止监听&quot;</span>);<br>        <span class=\"hljs-comment\">//发送键使能</span><br>        ui-&gt;Send_Button-&gt;setEnabled(<span class=\"hljs-keyword\">true</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>         qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Stop Listening!&quot;</span>;<br>        <span class=\"hljs-comment\">//如果已经连接则断开连接</span><br>        <span class=\"hljs-keyword\">if</span>(socket-&gt;state() == QAbstractSocket::ConnectedState)<br>        &#123;<br>            <span class=\"hljs-comment\">//断开连接</span><br>            socket-&gt;disconnectFromHost();<br>        &#125;<br>        <span class=\"hljs-comment\">//关闭倾听服务</span><br>        server-&gt;close();<br>        <span class=\"hljs-comment\">//修改按钮文字&amp;发送键静默</span><br>        ui-&gt;Monitor_OPEN-&gt;setText(<span class=\"hljs-string\">&quot;开始监听&quot;</span>);<br>        ui-&gt;Send_Button-&gt;setEnabled(<span class=\"hljs-keyword\">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、TCP服务端-客户端通信\"><a href=\"#二、TCP服务端-客户端通信\" class=\"headerlink\" title=\"二、TCP服务端-客户端通信\"></a>二、TCP服务端-客户端通信</h2><ul>\n<li>基于上述设置后，用户就可以根据自己的想法去定义端口号，并随时打开和关闭监听端口，我们还需要设置一些Debug窗口来进行发送和接收内容的打印及调试。首先在mainwindow.h头文件函数里面添加所需头文件。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//文本编辑</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QLineEdit&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>之后撰写发送槽函数，该槽函数主要是读取输入框的内容，写入socket中，并利用socket-&gt;write()函数，将内容通过TCP通信传输到下位机当中，并利用 socket-&gt;flush()函数刷新重置缓冲区</li>\n</ul>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\">void MainWindow::on_Send_Button_clicked()<span class=\"hljs-comment\">//发送数据</span><br>&#123;<br>\t<span class=\"hljs-comment\">//主要用于调试</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">qDebug</span>() &lt;&lt; &quot;Server Send: &quot; &lt;&lt; ui-&gt;</span>S<span class=\"hljs-function\"><span class=\"hljs-title\">end_text</span>-&gt;</span>toPlainText().toLatin1();<br>    <span class=\"hljs-comment\">//将输入框的内容写入socket缓冲区</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">socket</span>-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">write</span>(ui-&gt;</span>S<span class=\"hljs-function\"><span class=\"hljs-title\">end_text</span>-&gt;</span>toPlainText().toLatin1());<br>    <span class=\"hljs-comment\">//刷新socket缓冲区</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">socket</span>-&gt;</span>flush();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>而后定义两个简单的槽函数，利用clear()函数对发送区和接收区进行清空</li>\n</ul>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\">void MainWindow::on_Receive_CLEAR_clicked()<span class=\"hljs-comment\">//回收框清屏</span><br>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">ui</span>-&gt;</span>R<span class=\"hljs-function\"><span class=\"hljs-title\">eceive_text</span>-&gt;</span>clear();<br>&#125;<br><br>void MainWindow::on_Send_CLEAR_clicked()<span class=\"hljs-comment\">//发送框清屏</span><br>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">ui</span>-&gt;</span>S<span class=\"hljs-function\"><span class=\"hljs-title\">end_text</span>-&gt;</span>clear();<br>&#125;<br></code></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"TCP通信\"><a href=\"#TCP通信\" class=\"headerlink\" title=\"TCP通信\"></a>TCP通信</h1><h2 id=\"一、QT服务端构建\"><a href=\"#一、QT服务端构建\" class=\"headerlink\" title=\"一、QT服务端构建\"></a>一、QT服务端构建</h2><ul>\n<li>该模块将采用上位机作为服务端，下位机作为客户端进行连接，前提需要保证服务端、客户端处于同一局域网内，处于同一个端口号，IPv4地址一样，服务端的IPv4需要查阅该电脑本身IP，无法进行修改，选用默认方式。</li>\n</ul>\n<h3 id=\"①TCP的概念\"><a href=\"#①TCP的概念\" class=\"headerlink\" title=\"①TCP的概念\"></a>①TCP的概念</h3><ul>\n<li><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793 定义。消息是没有边界的，所以无论消息大小都可以进行传输。消息是有序的，当前一个消息没有收到，即使先收到了后面的字节，那么也不能扔给应用层去处理，同时对重复的报文会自动丢弃。</p>\n</li>\n<li><p>TCP传输里面，需要Socket，上位机需要设置Socket，就好像找了一把锁，下位机需要上报Socket，就好像插上钥匙开锁，如果一样，那就可以进行连接，Socket：由IP地址和端口号组成</p>\n</li>\n</ul>\n<h3 id=\"②代码实现\"><a href=\"#②代码实现\" class=\"headerlink\" title=\"②代码实现\"></a>②代码实现</h3><ul>\n<li>首先在mainwindow.h头文件函数里面添加所需头文件，如果报错，检查配置环境是否缺失，问网上教程，不赘述。之后还需要定义TCP通信对象，用于数据的读取和调用。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//TCP服务端</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QTcpServer&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QTcpSocket&gt;</span></span><br><br><span class=\"hljs-comment\">//创建TCP通讯对象</span><br>QTcpSocket *socket;<br>QTcpServer *server;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>之后在mainwindow.cpp主函数里面进行TCP的初始化定义，将头文件定义的对象指向接下来要读取的函数，并采用connect函数，将新的客户端于newConnection_SLOT()槽函数连接</li>\n</ul>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">MainWindow::MainWindow(QWidget *parent)<br>    : QMainWindow(parent)<br>    , ui(<span class=\"hljs-keyword\">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;setupUi(<span class=\"hljs-keyword\">this</span>);<br>    <br>\t<span class=\"hljs-comment\">//TCP通讯定义</span><br>    socket = <span class=\"hljs-keyword\">new</span> QTcpSocket();<br>    <span class=\"hljs-keyword\">server</span> = <span class=\"hljs-keyword\">new</span> QTcpServer();<br><br>    <span class=\"hljs-comment\">//信号：新的客户端连接建立 槽函数：获取客户端套接字，允许写入数据</span><br>    connect(<span class=\"hljs-keyword\">server</span>,SIGNAL(newConnection()),<span class=\"hljs-keyword\">this</span>,SLOT(newConnection_SLOT()));<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>newConnection_SLOT()槽函数用于初始化设置，并监听客户端信息，如果接收到缓存信息，触发readyRead_SLOT()槽函数进行数据的读取和打印</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">MainWindow::newConnection_SLOT</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//定义TCP</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    socket = server-&gt;<span class=\"hljs-built_in\">nextPendingConnection</span>(); <span class=\"hljs-comment\">//获取已经连接的客户端套接字</span><br>    <span class=\"hljs-built_in\">connect</span>(socket,<span class=\"hljs-built_in\">SIGNAL</span>(<span class=\"hljs-built_in\">readyRead</span>()),<span class=\"hljs-keyword\">this</span>,<span class=\"hljs-built_in\">SLOT</span>(<span class=\"hljs-built_in\">readyRead_SLOT</span>()));<span class=\"hljs-comment\">//如果socket中有缓存消息，触发槽函数</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>readyRead_SLOT()函数主要进行读取客户端发来的缓存消息，并写入Receive_text当中</li>\n</ul>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">void</span> MainWindow::readyRead_SLOT()<span class=\"hljs-comment\">//接收消息并显示到接收框</span><br>&#123;<br>    qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Server Received!&quot;</span>;<br>    QString <span class=\"hljs-built_in\">buffer</span>;<br>    <span class=\"hljs-comment\">//读取缓冲区数据</span><br>    <span class=\"hljs-built_in\">buffer</span> = socket-&gt;readAll();<br>    <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">buffer</span>.<span class=\"hljs-built_in\">isEmpty</span>())<br>    &#123;<br>        <span class=\"hljs-comment\">//刷新显示</span><br>        ui-&gt;Receive_text-&gt;appendPlainText(<span class=\"hljs-built_in\">buffer</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>该类型函数配置完，基本上可以实现监听、读写功能，但是缺少用户对它的触发，所以再编写一个触发函数，按下on_Monitor_OPEN_clicked(bool checked)函数，既可以将PORT_TEXT文本中用户定义的端口号写入socket中，并进行发送，如果未连接成功，将按键复位。如果连接成功，再次点击该按钮，则停止监听，断开TCP连接。</li>\n</ul>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\">void MainWindow::on_Monitor_OPEN_clicked(<span class=\"hljs-keyword\">bool</span> checked)<span class=\"hljs-comment\">//打开TCP监听</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(checked)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> port = ui-&gt;PORT_TEXT-&gt;text().toUInt();<br>        <span class=\"hljs-comment\">//如果未监听到</span><br>        <span class=\"hljs-keyword\">if</span>(!server-&gt;listen(QHostAddress::Any, port))<br>        &#123;<br>            qDebug() &lt;&lt; server-&gt;errorString();<br>            <span class=\"hljs-comment\">//连接失败，再次点击则重新连接，将checked恢复为true</span><br>            ui-&gt;Monitor_OPEN-&gt;toggle();<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Listen Successfully! Message from port:&quot;</span> &lt;&lt; port;<br>        <span class=\"hljs-comment\">//修改按钮文字</span><br>        ui-&gt;Monitor_OPEN-&gt;setText(<span class=\"hljs-string\">&quot;停止监听&quot;</span>);<br>        <span class=\"hljs-comment\">//发送键使能</span><br>        ui-&gt;Send_Button-&gt;setEnabled(<span class=\"hljs-keyword\">true</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>         qDebug() &lt;&lt; <span class=\"hljs-string\">&quot;Stop Listening!&quot;</span>;<br>        <span class=\"hljs-comment\">//如果已经连接则断开连接</span><br>        <span class=\"hljs-keyword\">if</span>(socket-&gt;state() == QAbstractSocket::ConnectedState)<br>        &#123;<br>            <span class=\"hljs-comment\">//断开连接</span><br>            socket-&gt;disconnectFromHost();<br>        &#125;<br>        <span class=\"hljs-comment\">//关闭倾听服务</span><br>        server-&gt;close();<br>        <span class=\"hljs-comment\">//修改按钮文字&amp;发送键静默</span><br>        ui-&gt;Monitor_OPEN-&gt;setText(<span class=\"hljs-string\">&quot;开始监听&quot;</span>);<br>        ui-&gt;Send_Button-&gt;setEnabled(<span class=\"hljs-keyword\">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、TCP服务端-客户端通信\"><a href=\"#二、TCP服务端-客户端通信\" class=\"headerlink\" title=\"二、TCP服务端-客户端通信\"></a>二、TCP服务端-客户端通信</h2><ul>\n<li>基于上述设置后，用户就可以根据自己的想法去定义端口号，并随时打开和关闭监听端口，我们还需要设置一些Debug窗口来进行发送和接收内容的打印及调试。首先在mainwindow.h头文件函数里面添加所需头文件。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//文本编辑</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QLineEdit&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>之后撰写发送槽函数，该槽函数主要是读取输入框的内容，写入socket中，并利用socket-&gt;write()函数，将内容通过TCP通信传输到下位机当中，并利用 socket-&gt;flush()函数刷新重置缓冲区</li>\n</ul>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\">void MainWindow::on_Send_Button_clicked()<span class=\"hljs-comment\">//发送数据</span><br>&#123;<br>\t<span class=\"hljs-comment\">//主要用于调试</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">qDebug</span>() &lt;&lt; &quot;Server Send: &quot; &lt;&lt; ui-&gt;</span>S<span class=\"hljs-function\"><span class=\"hljs-title\">end_text</span>-&gt;</span>toPlainText().toLatin1();<br>    <span class=\"hljs-comment\">//将输入框的内容写入socket缓冲区</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">socket</span>-&gt;</span><span class=\"hljs-function\"><span class=\"hljs-title\">write</span>(ui-&gt;</span>S<span class=\"hljs-function\"><span class=\"hljs-title\">end_text</span>-&gt;</span>toPlainText().toLatin1());<br>    <span class=\"hljs-comment\">//刷新socket缓冲区</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">socket</span>-&gt;</span>flush();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>而后定义两个简单的槽函数，利用clear()函数对发送区和接收区进行清空</li>\n</ul>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\">void MainWindow::on_Receive_CLEAR_clicked()<span class=\"hljs-comment\">//回收框清屏</span><br>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">ui</span>-&gt;</span>R<span class=\"hljs-function\"><span class=\"hljs-title\">eceive_text</span>-&gt;</span>clear();<br>&#125;<br><br>void MainWindow::on_Send_CLEAR_clicked()<span class=\"hljs-comment\">//发送框清屏</span><br>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">ui</span>-&gt;</span>S<span class=\"hljs-function\"><span class=\"hljs-title\">end_text</span>-&gt;</span>clear();<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"3D打印机运行逻辑","date":"2024-07-25T16:00:00.000Z","_content":"\n# 3D打印机运行逻辑\n\n### 打印机初始化\n\n1.获取机器，连接网络，并且在设置里面打开root权限，获得root的账号和密码\n\n```\nroot  //账号\nroot  //密码\n```\n\n2.需要获取机器的IP地址，然后用mobaxtem的ssh进行连接，连接时输入IP地址和账号\n\n```\n172.xx.xxx.xx  //IP地址\n```\n\n3.拷贝所需的文件夹进行安装\n\n```\ncp /tmp/udisk/sda1/fluidd/fluidd.sh /usr/data  //拷贝脚本文件\ncp /tmp/udisk/sda1/fluidd/fluidd.tar /usr/data  //拷贝配置文件\n\t\ncd /usr/data  //进入该文件夹下\n\t\n./fluidd.sh install  //执行安装指令\n```\n\n4.等待结束，即可登录fluidd网站\n\n```\n172.xx.xxx.xx:4408  //fluidd的网址\n```\n\n### 打印机操作\n\nSET_VELOCITY_LIMIT 改变打印机配置文件中指定的速度限制。\n\n```\nSET_VELOCITY_LIMIT [VELOCITY=<value>] [ACCEL=<value>] [MINIMUM_CRUISE_RATIO=<value>] [SQUARE_CORNER_VELOCITY=<value>]\n\n[VELOCITY=<value>]  //速度\n[ACCEL=<value>]  //加速度\n[MINIMUM_CRUISE_RATIO=<value>]  //最小巡航速度\n[SQUARE_CORNER_VELOCITY=<value>]  //角速度\n[ACCEL_TO_DECEL]  //加速减速\n```\n\n3D打印机Z轴正值是向下，负值是向上\n\n```\nG1 Z1  //K1-MAX向下位移1mm\nG1 Z-.5  //K1-MAX向上位移到-0.5mm\n```\n\n3D打印机X轴正值是向右，负值是向左\n\n```\nG1 X1  //K1-MAX向右位移1mm\nG1 X-.5  //K1-MAX向左位移到-0.5mm\n```\n\n3D打印机X轴正值是向后，负值是向前\n\n```\nG1 X1  //K1-MAX向后位移1mm\nG1 X-.5  //K1-MAX向前位移到-0.5mm\n```\n\nEXCLUDE_OBJECT_START 表示当前层上一个对象的gcode开始\n\nEXCLUDE_OBJECT_END 表示对象在该层的代码的结束\n\n```\nEXCLUDE_OBJECT_START NAME=对象名称\nEXCLUDE_OBJECT_END [NAME=对象名称]\n```\n\nEXCLUDE_OBJECT_DEFINE\n\n```\nEXCLUDE_OBJECT_DEFINE [NAME =对象名称[中心= X, Y][多边形= [(X, Y),……[reset =1] [json =1]  //提供文件中一个对象的摘要。\n//如果没有提供参数，这将列出Klipper已知的已定义对象。返回字符串列表，除非给出了JSON参数，否则它将以JSON格式返回对象详细信息。\n\n<NAME>  //当包含NAME参数时，将定义要排除的对象。\n\n<CENTER>  //对象的 X，Y 坐标。\n\n<POLYGON>  //提供对象轮廓的 X,Y 坐标数组\n\n//当提供RESET参数时，将清除所有已定义的对象，并重置[exclude_object]模块。\n```\n\n### G-code 打印流程\n\n```\n//这个干嘛没搞明白\nEXCLUDE_OBJECT_DEFINE  NAME=Square_columns_Z_axis.stl_id_0_copy_0 CENTER=163.166,143.573 POLYGON=[[58.702,39.1091],[267.631,39.1091],[267.631,248.038],[58.702,248.038],[58.702,39.1091]]\n\n//报告当前进度给控制器，P0是进度为0%，R1210是当前设定的剩余时间\nM73 P0 R1210\n\n//关闭P0风扇，没有P参数，默认P0，S代表风扇的模拟量为0，范围是0~255，\nM106 S0\n\n//关闭P2风扇\nM106 P2 S0\n\n//关闭热床温度，不进行等待\nM140 S0\n\n//关闭喷头温度，不进行等待，继续执行\nM104 S0 \n\n//执行宏定义，在gcode_macro.cfg配置文件中有宏定义函数，作用为开始打印，对打印机进行自动，调节热床和喷头温度\nSTART_PRINT EXTRUDER_TEMP=220 BED_TEMP=50\n\n//设定机箱温度为35摄氏度\nM141 S35\n\n//将打印机三轴设为绝对坐标系\nG90\n\n//设置移动单位为毫米\nG21\n\n//设置挤出头为绝对坐标系\nM83\n\n//关闭P0风扇\nM106 S0\n\n//关闭P2风扇\nM106 P2 S0\n\n//设置挤出头当前位置为零点\nG92 E0\n\n//使用G1直线移动方式，将挤出头回抽0.6mm，速度为2400mm/min\nG1 E-.6 F2400\n\n//设置加速度为1000mm/min，加减速速度为1000mm/min\nSET_VELOCITY_LIMIT ACCEL=1000 ACCEL_TO_DECEL=1000\n\n//设置角加速度为20rad/min\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=20\n\n//表示当前层开始打印\nEXCLUDE_OBJECT_START NAME=Square_columns_Z_axis.stl_id_0_copy_0\n\n//开始打印，G1直线位移到坐标为(49.789，32.953)位置，速度为30000mm/min\nG1 X49.789 Y32.952 F30000\n\n//Z轴向下移动0.4mm\nG1 Z.4\n\n//开始重复性打印操作\nG1 X50.408 Y32.135 E.037\nG1 X51.103 Y31.381 E.03702\nG1 X51.866 Y30.696 E.03702\nG1 X52.691 Y30.087 E.03702\nG1 X53.57 Y29.56 E.03702\nG1 X54.494 Y29.119 E.03697\nG1 X55.682 Y28.701 E.04545\nG1 X56.731 Y28.45 E.03897\nG1 X57.747 Y28.311 E.03702\nG1 X58.707 Y28.268 E.0347\nG1 X267.625 Y28.268 E7.5432\nG1 X268.655 Y28.317 E.03721\nG1 X269.669 Y28.463 E.03702\nG1 X270.665 Y28.706 E.03702\nG1 X271.632 Y29.041 E.03696\nG1 X272.832 Y29.612 E.04796\nG1 X273.788 Y30.196 E.04045\n...\n\n//打印进度和时长标记位\nM73 P0 R1208\n\n//表示上一层已经打印结束\nEXCLUDE_OBJECT_END NAME=Square_columns_Z_axis.stl_id_0_copy_0\n\n//表示当前层开始打印\nEXCLUDE_OBJECT_START NAME=Square_columns_Z_axis.stl_id_0_copy_0\n\n//关闭P0、P2风扇\nM106 S0\nM106 P2 S0\n\n//结束打印，在gcode_macro.cfg配置文件中有宏定义函数，表示结束打印\nEND_PRINT\n\n//设置机箱温度为0\nM141 S0\n\n//上传打印进度\nM73 P100 R0\n```\n\n","source":"_posts/Work No.7.md","raw":"---\ntitle: 3D打印机运行逻辑\ntag: 3D打印机\ndate: 2024-07-26\ncategories: 3D打印机\n---\n\n# 3D打印机运行逻辑\n\n### 打印机初始化\n\n1.获取机器，连接网络，并且在设置里面打开root权限，获得root的账号和密码\n\n```\nroot  //账号\nroot  //密码\n```\n\n2.需要获取机器的IP地址，然后用mobaxtem的ssh进行连接，连接时输入IP地址和账号\n\n```\n172.xx.xxx.xx  //IP地址\n```\n\n3.拷贝所需的文件夹进行安装\n\n```\ncp /tmp/udisk/sda1/fluidd/fluidd.sh /usr/data  //拷贝脚本文件\ncp /tmp/udisk/sda1/fluidd/fluidd.tar /usr/data  //拷贝配置文件\n\t\ncd /usr/data  //进入该文件夹下\n\t\n./fluidd.sh install  //执行安装指令\n```\n\n4.等待结束，即可登录fluidd网站\n\n```\n172.xx.xxx.xx:4408  //fluidd的网址\n```\n\n### 打印机操作\n\nSET_VELOCITY_LIMIT 改变打印机配置文件中指定的速度限制。\n\n```\nSET_VELOCITY_LIMIT [VELOCITY=<value>] [ACCEL=<value>] [MINIMUM_CRUISE_RATIO=<value>] [SQUARE_CORNER_VELOCITY=<value>]\n\n[VELOCITY=<value>]  //速度\n[ACCEL=<value>]  //加速度\n[MINIMUM_CRUISE_RATIO=<value>]  //最小巡航速度\n[SQUARE_CORNER_VELOCITY=<value>]  //角速度\n[ACCEL_TO_DECEL]  //加速减速\n```\n\n3D打印机Z轴正值是向下，负值是向上\n\n```\nG1 Z1  //K1-MAX向下位移1mm\nG1 Z-.5  //K1-MAX向上位移到-0.5mm\n```\n\n3D打印机X轴正值是向右，负值是向左\n\n```\nG1 X1  //K1-MAX向右位移1mm\nG1 X-.5  //K1-MAX向左位移到-0.5mm\n```\n\n3D打印机X轴正值是向后，负值是向前\n\n```\nG1 X1  //K1-MAX向后位移1mm\nG1 X-.5  //K1-MAX向前位移到-0.5mm\n```\n\nEXCLUDE_OBJECT_START 表示当前层上一个对象的gcode开始\n\nEXCLUDE_OBJECT_END 表示对象在该层的代码的结束\n\n```\nEXCLUDE_OBJECT_START NAME=对象名称\nEXCLUDE_OBJECT_END [NAME=对象名称]\n```\n\nEXCLUDE_OBJECT_DEFINE\n\n```\nEXCLUDE_OBJECT_DEFINE [NAME =对象名称[中心= X, Y][多边形= [(X, Y),……[reset =1] [json =1]  //提供文件中一个对象的摘要。\n//如果没有提供参数，这将列出Klipper已知的已定义对象。返回字符串列表，除非给出了JSON参数，否则它将以JSON格式返回对象详细信息。\n\n<NAME>  //当包含NAME参数时，将定义要排除的对象。\n\n<CENTER>  //对象的 X，Y 坐标。\n\n<POLYGON>  //提供对象轮廓的 X,Y 坐标数组\n\n//当提供RESET参数时，将清除所有已定义的对象，并重置[exclude_object]模块。\n```\n\n### G-code 打印流程\n\n```\n//这个干嘛没搞明白\nEXCLUDE_OBJECT_DEFINE  NAME=Square_columns_Z_axis.stl_id_0_copy_0 CENTER=163.166,143.573 POLYGON=[[58.702,39.1091],[267.631,39.1091],[267.631,248.038],[58.702,248.038],[58.702,39.1091]]\n\n//报告当前进度给控制器，P0是进度为0%，R1210是当前设定的剩余时间\nM73 P0 R1210\n\n//关闭P0风扇，没有P参数，默认P0，S代表风扇的模拟量为0，范围是0~255，\nM106 S0\n\n//关闭P2风扇\nM106 P2 S0\n\n//关闭热床温度，不进行等待\nM140 S0\n\n//关闭喷头温度，不进行等待，继续执行\nM104 S0 \n\n//执行宏定义，在gcode_macro.cfg配置文件中有宏定义函数，作用为开始打印，对打印机进行自动，调节热床和喷头温度\nSTART_PRINT EXTRUDER_TEMP=220 BED_TEMP=50\n\n//设定机箱温度为35摄氏度\nM141 S35\n\n//将打印机三轴设为绝对坐标系\nG90\n\n//设置移动单位为毫米\nG21\n\n//设置挤出头为绝对坐标系\nM83\n\n//关闭P0风扇\nM106 S0\n\n//关闭P2风扇\nM106 P2 S0\n\n//设置挤出头当前位置为零点\nG92 E0\n\n//使用G1直线移动方式，将挤出头回抽0.6mm，速度为2400mm/min\nG1 E-.6 F2400\n\n//设置加速度为1000mm/min，加减速速度为1000mm/min\nSET_VELOCITY_LIMIT ACCEL=1000 ACCEL_TO_DECEL=1000\n\n//设置角加速度为20rad/min\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=20\n\n//表示当前层开始打印\nEXCLUDE_OBJECT_START NAME=Square_columns_Z_axis.stl_id_0_copy_0\n\n//开始打印，G1直线位移到坐标为(49.789，32.953)位置，速度为30000mm/min\nG1 X49.789 Y32.952 F30000\n\n//Z轴向下移动0.4mm\nG1 Z.4\n\n//开始重复性打印操作\nG1 X50.408 Y32.135 E.037\nG1 X51.103 Y31.381 E.03702\nG1 X51.866 Y30.696 E.03702\nG1 X52.691 Y30.087 E.03702\nG1 X53.57 Y29.56 E.03702\nG1 X54.494 Y29.119 E.03697\nG1 X55.682 Y28.701 E.04545\nG1 X56.731 Y28.45 E.03897\nG1 X57.747 Y28.311 E.03702\nG1 X58.707 Y28.268 E.0347\nG1 X267.625 Y28.268 E7.5432\nG1 X268.655 Y28.317 E.03721\nG1 X269.669 Y28.463 E.03702\nG1 X270.665 Y28.706 E.03702\nG1 X271.632 Y29.041 E.03696\nG1 X272.832 Y29.612 E.04796\nG1 X273.788 Y30.196 E.04045\n...\n\n//打印进度和时长标记位\nM73 P0 R1208\n\n//表示上一层已经打印结束\nEXCLUDE_OBJECT_END NAME=Square_columns_Z_axis.stl_id_0_copy_0\n\n//表示当前层开始打印\nEXCLUDE_OBJECT_START NAME=Square_columns_Z_axis.stl_id_0_copy_0\n\n//关闭P0、P2风扇\nM106 S0\nM106 P2 S0\n\n//结束打印，在gcode_macro.cfg配置文件中有宏定义函数，表示结束打印\nEND_PRINT\n\n//设置机箱温度为0\nM141 S0\n\n//上传打印进度\nM73 P100 R0\n```\n\n","slug":"Work No.7","published":1,"updated":"2024-07-26T09:53:30.980Z","_id":"clz2im5zz0000dwfbaw72ajt0","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"3D打印机运行逻辑\"><a href=\"#3D打印机运行逻辑\" class=\"headerlink\" title=\"3D打印机运行逻辑\"></a>3D打印机运行逻辑</h1><h3 id=\"打印机初始化\"><a href=\"#打印机初始化\" class=\"headerlink\" title=\"打印机初始化\"></a>打印机初始化</h3><p>1.获取机器，连接网络，并且在设置里面打开root权限，获得root的账号和密码</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">root  <span class=\"hljs-comment\">//账号</span><br>root  <span class=\"hljs-comment\">//密码</span><br></code></pre></td></tr></table></figure>\n\n<p>2.需要获取机器的IP地址，然后用mobaxtem的ssh进行连接，连接时输入IP地址和账号</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">172</span><span class=\"hljs-selector-class\">.xx</span><span class=\"hljs-selector-class\">.xxx</span><span class=\"hljs-selector-class\">.xx</span>  <span class=\"hljs-comment\">//IP地址</span><br></code></pre></td></tr></table></figure>\n\n<p>3.拷贝所需的文件夹进行安装</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">cp <span class=\"hljs-regexp\">/tmp/u</span>disk<span class=\"hljs-regexp\">/sda1/</span>fluidd<span class=\"hljs-regexp\">/fluidd.sh /u</span>sr<span class=\"hljs-regexp\">/data  /</span>/拷贝脚本文件<br>cp <span class=\"hljs-regexp\">/tmp/u</span>disk<span class=\"hljs-regexp\">/sda1/</span>fluidd<span class=\"hljs-regexp\">/fluidd.tar /u</span>sr<span class=\"hljs-regexp\">/data  /</span>/拷贝配置文件<br>\t<br>cd <span class=\"hljs-regexp\">/usr/</span>data  <span class=\"hljs-regexp\">//</span>进入该文件夹下<br>\t<br>.<span class=\"hljs-regexp\">/fluidd.sh install  /</span>/执行安装指令<br></code></pre></td></tr></table></figure>\n\n<p>4.等待结束，即可登录fluidd网站</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">172</span><span class=\"hljs-selector-class\">.xx</span><span class=\"hljs-selector-class\">.xxx</span><span class=\"hljs-selector-class\">.xx</span>:<span class=\"hljs-number\">4408</span>  <span class=\"hljs-comment\">//fluidd的网址</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"打印机操作\"><a href=\"#打印机操作\" class=\"headerlink\" title=\"打印机操作\"></a>打印机操作</h3><p>SET_VELOCITY_LIMIT 改变打印机配置文件中指定的速度限制。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">SET_VELOCITY_LIMIT</span> <span class=\"hljs-selector-attr\">[VELOCITY=&lt;value&gt;]</span> <span class=\"hljs-selector-attr\">[ACCEL=&lt;value&gt;]</span> <span class=\"hljs-selector-attr\">[MINIMUM_CRUISE_RATIO=&lt;value&gt;]</span> <span class=\"hljs-selector-attr\">[SQUARE_CORNER_VELOCITY=&lt;value&gt;]</span><br><br><span class=\"hljs-selector-attr\">[VELOCITY=&lt;value&gt;]</span>  <span class=\"hljs-comment\">//速度</span><br><span class=\"hljs-selector-attr\">[ACCEL=&lt;value&gt;]</span>  <span class=\"hljs-comment\">//加速度</span><br><span class=\"hljs-selector-attr\">[MINIMUM_CRUISE_RATIO=&lt;value&gt;]</span>  <span class=\"hljs-comment\">//最小巡航速度</span><br><span class=\"hljs-selector-attr\">[SQUARE_CORNER_VELOCITY=&lt;value&gt;]</span>  <span class=\"hljs-comment\">//角速度</span><br><span class=\"hljs-selector-attr\">[ACCEL_TO_DECEL]</span>  <span class=\"hljs-comment\">//加速减速</span><br></code></pre></td></tr></table></figure>\n\n<p>3D打印机Z轴正值是向下，负值是向上</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">G1</span> Z1  //K1-MAX向下位移<span class=\"hljs-number\">1</span>mm<br><span class=\"hljs-attribute\">G1</span> Z-.<span class=\"hljs-number\">5</span>  //K1-MAX向上位移到-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5</span>mm<br></code></pre></td></tr></table></figure>\n\n<p>3D打印机X轴正值是向右，负值是向左</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">G1</span> X1  //K1-MAX向右位移<span class=\"hljs-number\">1</span>mm<br><span class=\"hljs-attribute\">G1</span> X-.<span class=\"hljs-number\">5</span>  //K1-MAX向左位移到-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5</span>mm<br></code></pre></td></tr></table></figure>\n\n<p>3D打印机X轴正值是向后，负值是向前</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">G1</span> X1  //K1-MAX向后位移<span class=\"hljs-number\">1</span>mm<br><span class=\"hljs-attribute\">G1</span> X-.<span class=\"hljs-number\">5</span>  //K1-MAX向前位移到-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5</span>mm<br></code></pre></td></tr></table></figure>\n\n<p>EXCLUDE_OBJECT_START 表示当前层上一个对象的gcode开始</p>\n<p>EXCLUDE_OBJECT_END 表示对象在该层的代码的结束</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">EXCLUDE_OBJECT_START <span class=\"hljs-attribute\">NAME</span>=对象名称<br>EXCLUDE_OBJECT_END [<span class=\"hljs-attribute\">NAME</span>=对象名称]<br></code></pre></td></tr></table></figure>\n\n<p>EXCLUDE_OBJECT_DEFINE</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">EXCLUDE_OBJECT_DEFINE <span class=\"hljs-selector-attr\">[NAME =对象名称[中心= X, Y]</span><span class=\"hljs-selector-attr\">[多边形= [(X, Y),……[reset =1]</span> <span class=\"hljs-selector-attr\">[json =1]</span>  <span class=\"hljs-comment\">//提供文件中一个对象的摘要。</span><br><span class=\"hljs-comment\">//如果没有提供参数，这将列出Klipper已知的已定义对象。返回字符串列表，除非给出了JSON参数，否则它将以JSON格式返回对象详细信息。</span><br><br>&lt;NAME&gt;  <span class=\"hljs-comment\">//当包含NAME参数时，将定义要排除的对象。</span><br><br>&lt;CENTER&gt;  <span class=\"hljs-comment\">//对象的 X，Y 坐标。</span><br><br>&lt;<span class=\"hljs-selector-tag\">POLYGON</span>&gt;  <span class=\"hljs-comment\">//提供对象轮廓的 X,Y 坐标数组</span><br><br><span class=\"hljs-comment\">//当提供RESET参数时，将清除所有已定义的对象，并重置[exclude_object]模块。</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"G-code-打印流程\"><a href=\"#G-code-打印流程\" class=\"headerlink\" title=\"G-code 打印流程\"></a>G-code 打印流程</h3><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-comment\">//这个干嘛没搞明白</span><br><span class=\"hljs-symbol\">EXCLUDE_OBJECT_DEFINE</span>  NAME<span class=\"hljs-symbol\">=Square_columns_Z_axis</span>.stl_id_0_copy_0 CENTER<span class=\"hljs-number\">=163</span>.<span class=\"hljs-number\">166</span>,<span class=\"hljs-number\">143</span>.<span class=\"hljs-number\">573</span> POLYGON=[[<span class=\"hljs-number\">58</span>.<span class=\"hljs-number\">702</span>,<span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">1091</span>],[<span class=\"hljs-number\">267</span>.<span class=\"hljs-number\">631</span>,<span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">1091</span>],[<span class=\"hljs-number\">267</span>.<span class=\"hljs-number\">631</span>,<span class=\"hljs-number\">248</span>.<span class=\"hljs-number\">038</span>],[<span class=\"hljs-number\">58</span>.<span class=\"hljs-number\">702</span>,<span class=\"hljs-number\">248</span>.<span class=\"hljs-number\">038</span>],[<span class=\"hljs-number\">58</span>.<span class=\"hljs-number\">702</span>,<span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">1091</span>]]<br><br><span class=\"hljs-comment\">//报告当前进度给控制器，P0是进度为0%，R1210是当前设定的剩余时间</span><br><span class=\"hljs-symbol\">M73</span> <span class=\"hljs-built_in\">P0</span> R1210<br><br><span class=\"hljs-comment\">//关闭P0风扇，没有P参数，默认P0，S代表风扇的模拟量为0，范围是0~255，</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//关闭P2风扇</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">P2</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//关闭热床温度，不进行等待</span><br><span class=\"hljs-symbol\">M140</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//关闭喷头温度，不进行等待，继续执行</span><br><span class=\"hljs-symbol\">M104</span> <span class=\"hljs-built_in\">S0</span> <br><br><span class=\"hljs-comment\">//执行宏定义，在gcode_macro.cfg配置文件中有宏定义函数，作用为开始打印，对打印机进行自动，调节热床和喷头温度</span><br><span class=\"hljs-symbol\">START_PRINT</span> EXTRUDER_TEMP<span class=\"hljs-number\">=220</span> BED_TEMP<span class=\"hljs-number\">=50</span><br><br><span class=\"hljs-comment\">//设定机箱温度为35摄氏度</span><br><span class=\"hljs-symbol\">M141</span> S35<br><br><span class=\"hljs-comment\">//将打印机三轴设为绝对坐标系</span><br><span class=\"hljs-symbol\">G90</span><br><br><span class=\"hljs-comment\">//设置移动单位为毫米</span><br><span class=\"hljs-symbol\">G21</span><br><br><span class=\"hljs-comment\">//设置挤出头为绝对坐标系</span><br><span class=\"hljs-symbol\">M83</span><br><br><span class=\"hljs-comment\">//关闭P0风扇</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//关闭P2风扇</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">P2</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//设置挤出头当前位置为零点</span><br><span class=\"hljs-symbol\">G92</span> E0<br><br><span class=\"hljs-comment\">//使用G1直线移动方式，将挤出头回抽0.6mm，速度为2400mm/min</span><br><span class=\"hljs-symbol\">G1</span> E-.<span class=\"hljs-number\">6</span> F2400<br><br><span class=\"hljs-comment\">//设置加速度为1000mm/min，加减速速度为1000mm/min</span><br><span class=\"hljs-symbol\">SET_VELOCITY_LIMIT</span> ACCEL<span class=\"hljs-number\">=1000</span> ACCEL_TO_DECEL<span class=\"hljs-number\">=1000</span><br><br><span class=\"hljs-comment\">//设置角加速度为20rad/min</span><br><span class=\"hljs-symbol\">SET_VELOCITY_LIMIT</span> SQUARE_CORNER_VELOCITY<span class=\"hljs-number\">=20</span><br><br><span class=\"hljs-comment\">//表示当前层开始打印</span><br><span class=\"hljs-symbol\">EXCLUDE_OBJECT_START</span> NAME<span class=\"hljs-symbol\">=Square_columns_Z_axis</span>.stl_id_0_copy_0<br><br><span class=\"hljs-comment\">//开始打印，G1直线位移到坐标为(49.789，32.953)位置，速度为30000mm/min</span><br><span class=\"hljs-symbol\">G1</span> X49.<span class=\"hljs-number\">789</span> Y32.<span class=\"hljs-number\">952</span> F30000<br><br><span class=\"hljs-comment\">//Z轴向下移动0.4mm</span><br><span class=\"hljs-symbol\">G1</span> Z.<span class=\"hljs-number\">4</span><br><br><span class=\"hljs-comment\">//开始重复性打印操作</span><br><span class=\"hljs-symbol\">G1</span> X50.<span class=\"hljs-number\">408</span> Y32.<span class=\"hljs-number\">135</span> E.<span class=\"hljs-number\">037</span><br><span class=\"hljs-symbol\">G1</span> X51.<span class=\"hljs-number\">103</span> Y31.<span class=\"hljs-number\">381</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X51.<span class=\"hljs-number\">866</span> Y30.<span class=\"hljs-number\">696</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X52.<span class=\"hljs-number\">691</span> Y30.<span class=\"hljs-number\">087</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X53.<span class=\"hljs-number\">57</span> Y29.<span class=\"hljs-number\">56</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X54.<span class=\"hljs-number\">494</span> Y29.<span class=\"hljs-number\">119</span> E.<span class=\"hljs-number\">03697</span><br><span class=\"hljs-symbol\">G1</span> X55.<span class=\"hljs-number\">682</span> Y28.<span class=\"hljs-number\">701</span> E.<span class=\"hljs-number\">04545</span><br><span class=\"hljs-symbol\">G1</span> X56.<span class=\"hljs-number\">731</span> Y28.<span class=\"hljs-number\">45</span> E.<span class=\"hljs-number\">03897</span><br><span class=\"hljs-symbol\">G1</span> X57.<span class=\"hljs-number\">747</span> Y28.<span class=\"hljs-number\">311</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X58.<span class=\"hljs-number\">707</span> Y28.<span class=\"hljs-number\">268</span> E.<span class=\"hljs-number\">0347</span><br><span class=\"hljs-symbol\">G1</span> X267.<span class=\"hljs-number\">625</span> Y28.<span class=\"hljs-number\">268</span> E7.<span class=\"hljs-number\">5432</span><br><span class=\"hljs-symbol\">G1</span> X268.<span class=\"hljs-number\">655</span> Y28.<span class=\"hljs-number\">317</span> E.<span class=\"hljs-number\">03721</span><br><span class=\"hljs-symbol\">G1</span> X269.<span class=\"hljs-number\">669</span> Y28.<span class=\"hljs-number\">463</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X270.<span class=\"hljs-number\">665</span> Y28.<span class=\"hljs-number\">706</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X271.<span class=\"hljs-number\">632</span> Y29.<span class=\"hljs-number\">041</span> E.<span class=\"hljs-number\">03696</span><br><span class=\"hljs-symbol\">G1</span> X272.<span class=\"hljs-number\">832</span> Y29.<span class=\"hljs-number\">612</span> E.<span class=\"hljs-number\">04796</span><br><span class=\"hljs-symbol\">G1</span> X273.<span class=\"hljs-number\">788</span> Y30.<span class=\"hljs-number\">196</span> E.<span class=\"hljs-number\">04045</span><br><span class=\"hljs-symbol\">...</span><br><br><span class=\"hljs-comment\">//打印进度和时长标记位</span><br><span class=\"hljs-symbol\">M73</span> <span class=\"hljs-built_in\">P0</span> R1208<br><br><span class=\"hljs-comment\">//表示上一层已经打印结束</span><br><span class=\"hljs-symbol\">EXCLUDE_OBJECT_END</span> NAME<span class=\"hljs-symbol\">=Square_columns_Z_axis</span>.stl_id_0_copy_0<br><br><span class=\"hljs-comment\">//表示当前层开始打印</span><br><span class=\"hljs-symbol\">EXCLUDE_OBJECT_START</span> NAME<span class=\"hljs-symbol\">=Square_columns_Z_axis</span>.stl_id_0_copy_0<br><br><span class=\"hljs-comment\">//关闭P0、P2风扇</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">S0</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">P2</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//结束打印，在gcode_macro.cfg配置文件中有宏定义函数，表示结束打印</span><br><span class=\"hljs-symbol\">END_PRINT</span><br><br><span class=\"hljs-comment\">//设置机箱温度为0</span><br><span class=\"hljs-symbol\">M141</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//上传打印进度</span><br><span class=\"hljs-symbol\">M73</span> P100 <span class=\"hljs-built_in\">R0</span><br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"3D打印机运行逻辑\"><a href=\"#3D打印机运行逻辑\" class=\"headerlink\" title=\"3D打印机运行逻辑\"></a>3D打印机运行逻辑</h1><h3 id=\"打印机初始化\"><a href=\"#打印机初始化\" class=\"headerlink\" title=\"打印机初始化\"></a>打印机初始化</h3><p>1.获取机器，连接网络，并且在设置里面打开root权限，获得root的账号和密码</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">root  <span class=\"hljs-comment\">//账号</span><br>root  <span class=\"hljs-comment\">//密码</span><br></code></pre></td></tr></table></figure>\n\n<p>2.需要获取机器的IP地址，然后用mobaxtem的ssh进行连接，连接时输入IP地址和账号</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">172</span><span class=\"hljs-selector-class\">.xx</span><span class=\"hljs-selector-class\">.xxx</span><span class=\"hljs-selector-class\">.xx</span>  <span class=\"hljs-comment\">//IP地址</span><br></code></pre></td></tr></table></figure>\n\n<p>3.拷贝所需的文件夹进行安装</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">cp <span class=\"hljs-regexp\">/tmp/u</span>disk<span class=\"hljs-regexp\">/sda1/</span>fluidd<span class=\"hljs-regexp\">/fluidd.sh /u</span>sr<span class=\"hljs-regexp\">/data  /</span>/拷贝脚本文件<br>cp <span class=\"hljs-regexp\">/tmp/u</span>disk<span class=\"hljs-regexp\">/sda1/</span>fluidd<span class=\"hljs-regexp\">/fluidd.tar /u</span>sr<span class=\"hljs-regexp\">/data  /</span>/拷贝配置文件<br>\t<br>cd <span class=\"hljs-regexp\">/usr/</span>data  <span class=\"hljs-regexp\">//</span>进入该文件夹下<br>\t<br>.<span class=\"hljs-regexp\">/fluidd.sh install  /</span>/执行安装指令<br></code></pre></td></tr></table></figure>\n\n<p>4.等待结束，即可登录fluidd网站</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">172</span><span class=\"hljs-selector-class\">.xx</span><span class=\"hljs-selector-class\">.xxx</span><span class=\"hljs-selector-class\">.xx</span>:<span class=\"hljs-number\">4408</span>  <span class=\"hljs-comment\">//fluidd的网址</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"打印机操作\"><a href=\"#打印机操作\" class=\"headerlink\" title=\"打印机操作\"></a>打印机操作</h3><p>SET_VELOCITY_LIMIT 改变打印机配置文件中指定的速度限制。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">SET_VELOCITY_LIMIT</span> <span class=\"hljs-selector-attr\">[VELOCITY=&lt;value&gt;]</span> <span class=\"hljs-selector-attr\">[ACCEL=&lt;value&gt;]</span> <span class=\"hljs-selector-attr\">[MINIMUM_CRUISE_RATIO=&lt;value&gt;]</span> <span class=\"hljs-selector-attr\">[SQUARE_CORNER_VELOCITY=&lt;value&gt;]</span><br><br><span class=\"hljs-selector-attr\">[VELOCITY=&lt;value&gt;]</span>  <span class=\"hljs-comment\">//速度</span><br><span class=\"hljs-selector-attr\">[ACCEL=&lt;value&gt;]</span>  <span class=\"hljs-comment\">//加速度</span><br><span class=\"hljs-selector-attr\">[MINIMUM_CRUISE_RATIO=&lt;value&gt;]</span>  <span class=\"hljs-comment\">//最小巡航速度</span><br><span class=\"hljs-selector-attr\">[SQUARE_CORNER_VELOCITY=&lt;value&gt;]</span>  <span class=\"hljs-comment\">//角速度</span><br><span class=\"hljs-selector-attr\">[ACCEL_TO_DECEL]</span>  <span class=\"hljs-comment\">//加速减速</span><br></code></pre></td></tr></table></figure>\n\n<p>3D打印机Z轴正值是向下，负值是向上</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">G1</span> Z1  //K1-MAX向下位移<span class=\"hljs-number\">1</span>mm<br><span class=\"hljs-attribute\">G1</span> Z-.<span class=\"hljs-number\">5</span>  //K1-MAX向上位移到-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5</span>mm<br></code></pre></td></tr></table></figure>\n\n<p>3D打印机X轴正值是向右，负值是向左</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">G1</span> X1  //K1-MAX向右位移<span class=\"hljs-number\">1</span>mm<br><span class=\"hljs-attribute\">G1</span> X-.<span class=\"hljs-number\">5</span>  //K1-MAX向左位移到-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5</span>mm<br></code></pre></td></tr></table></figure>\n\n<p>3D打印机X轴正值是向后，负值是向前</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">G1</span> X1  //K1-MAX向后位移<span class=\"hljs-number\">1</span>mm<br><span class=\"hljs-attribute\">G1</span> X-.<span class=\"hljs-number\">5</span>  //K1-MAX向前位移到-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5</span>mm<br></code></pre></td></tr></table></figure>\n\n<p>EXCLUDE_OBJECT_START 表示当前层上一个对象的gcode开始</p>\n<p>EXCLUDE_OBJECT_END 表示对象在该层的代码的结束</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">EXCLUDE_OBJECT_START <span class=\"hljs-attribute\">NAME</span>=对象名称<br>EXCLUDE_OBJECT_END [<span class=\"hljs-attribute\">NAME</span>=对象名称]<br></code></pre></td></tr></table></figure>\n\n<p>EXCLUDE_OBJECT_DEFINE</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">EXCLUDE_OBJECT_DEFINE <span class=\"hljs-selector-attr\">[NAME =对象名称[中心= X, Y]</span><span class=\"hljs-selector-attr\">[多边形= [(X, Y),……[reset =1]</span> <span class=\"hljs-selector-attr\">[json =1]</span>  <span class=\"hljs-comment\">//提供文件中一个对象的摘要。</span><br><span class=\"hljs-comment\">//如果没有提供参数，这将列出Klipper已知的已定义对象。返回字符串列表，除非给出了JSON参数，否则它将以JSON格式返回对象详细信息。</span><br><br>&lt;NAME&gt;  <span class=\"hljs-comment\">//当包含NAME参数时，将定义要排除的对象。</span><br><br>&lt;CENTER&gt;  <span class=\"hljs-comment\">//对象的 X，Y 坐标。</span><br><br>&lt;<span class=\"hljs-selector-tag\">POLYGON</span>&gt;  <span class=\"hljs-comment\">//提供对象轮廓的 X,Y 坐标数组</span><br><br><span class=\"hljs-comment\">//当提供RESET参数时，将清除所有已定义的对象，并重置[exclude_object]模块。</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"G-code-打印流程\"><a href=\"#G-code-打印流程\" class=\"headerlink\" title=\"G-code 打印流程\"></a>G-code 打印流程</h3><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-comment\">//这个干嘛没搞明白</span><br><span class=\"hljs-symbol\">EXCLUDE_OBJECT_DEFINE</span>  NAME<span class=\"hljs-symbol\">=Square_columns_Z_axis</span>.stl_id_0_copy_0 CENTER<span class=\"hljs-number\">=163</span>.<span class=\"hljs-number\">166</span>,<span class=\"hljs-number\">143</span>.<span class=\"hljs-number\">573</span> POLYGON=[[<span class=\"hljs-number\">58</span>.<span class=\"hljs-number\">702</span>,<span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">1091</span>],[<span class=\"hljs-number\">267</span>.<span class=\"hljs-number\">631</span>,<span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">1091</span>],[<span class=\"hljs-number\">267</span>.<span class=\"hljs-number\">631</span>,<span class=\"hljs-number\">248</span>.<span class=\"hljs-number\">038</span>],[<span class=\"hljs-number\">58</span>.<span class=\"hljs-number\">702</span>,<span class=\"hljs-number\">248</span>.<span class=\"hljs-number\">038</span>],[<span class=\"hljs-number\">58</span>.<span class=\"hljs-number\">702</span>,<span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">1091</span>]]<br><br><span class=\"hljs-comment\">//报告当前进度给控制器，P0是进度为0%，R1210是当前设定的剩余时间</span><br><span class=\"hljs-symbol\">M73</span> <span class=\"hljs-built_in\">P0</span> R1210<br><br><span class=\"hljs-comment\">//关闭P0风扇，没有P参数，默认P0，S代表风扇的模拟量为0，范围是0~255，</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//关闭P2风扇</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">P2</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//关闭热床温度，不进行等待</span><br><span class=\"hljs-symbol\">M140</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//关闭喷头温度，不进行等待，继续执行</span><br><span class=\"hljs-symbol\">M104</span> <span class=\"hljs-built_in\">S0</span> <br><br><span class=\"hljs-comment\">//执行宏定义，在gcode_macro.cfg配置文件中有宏定义函数，作用为开始打印，对打印机进行自动，调节热床和喷头温度</span><br><span class=\"hljs-symbol\">START_PRINT</span> EXTRUDER_TEMP<span class=\"hljs-number\">=220</span> BED_TEMP<span class=\"hljs-number\">=50</span><br><br><span class=\"hljs-comment\">//设定机箱温度为35摄氏度</span><br><span class=\"hljs-symbol\">M141</span> S35<br><br><span class=\"hljs-comment\">//将打印机三轴设为绝对坐标系</span><br><span class=\"hljs-symbol\">G90</span><br><br><span class=\"hljs-comment\">//设置移动单位为毫米</span><br><span class=\"hljs-symbol\">G21</span><br><br><span class=\"hljs-comment\">//设置挤出头为绝对坐标系</span><br><span class=\"hljs-symbol\">M83</span><br><br><span class=\"hljs-comment\">//关闭P0风扇</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//关闭P2风扇</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">P2</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//设置挤出头当前位置为零点</span><br><span class=\"hljs-symbol\">G92</span> E0<br><br><span class=\"hljs-comment\">//使用G1直线移动方式，将挤出头回抽0.6mm，速度为2400mm/min</span><br><span class=\"hljs-symbol\">G1</span> E-.<span class=\"hljs-number\">6</span> F2400<br><br><span class=\"hljs-comment\">//设置加速度为1000mm/min，加减速速度为1000mm/min</span><br><span class=\"hljs-symbol\">SET_VELOCITY_LIMIT</span> ACCEL<span class=\"hljs-number\">=1000</span> ACCEL_TO_DECEL<span class=\"hljs-number\">=1000</span><br><br><span class=\"hljs-comment\">//设置角加速度为20rad/min</span><br><span class=\"hljs-symbol\">SET_VELOCITY_LIMIT</span> SQUARE_CORNER_VELOCITY<span class=\"hljs-number\">=20</span><br><br><span class=\"hljs-comment\">//表示当前层开始打印</span><br><span class=\"hljs-symbol\">EXCLUDE_OBJECT_START</span> NAME<span class=\"hljs-symbol\">=Square_columns_Z_axis</span>.stl_id_0_copy_0<br><br><span class=\"hljs-comment\">//开始打印，G1直线位移到坐标为(49.789，32.953)位置，速度为30000mm/min</span><br><span class=\"hljs-symbol\">G1</span> X49.<span class=\"hljs-number\">789</span> Y32.<span class=\"hljs-number\">952</span> F30000<br><br><span class=\"hljs-comment\">//Z轴向下移动0.4mm</span><br><span class=\"hljs-symbol\">G1</span> Z.<span class=\"hljs-number\">4</span><br><br><span class=\"hljs-comment\">//开始重复性打印操作</span><br><span class=\"hljs-symbol\">G1</span> X50.<span class=\"hljs-number\">408</span> Y32.<span class=\"hljs-number\">135</span> E.<span class=\"hljs-number\">037</span><br><span class=\"hljs-symbol\">G1</span> X51.<span class=\"hljs-number\">103</span> Y31.<span class=\"hljs-number\">381</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X51.<span class=\"hljs-number\">866</span> Y30.<span class=\"hljs-number\">696</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X52.<span class=\"hljs-number\">691</span> Y30.<span class=\"hljs-number\">087</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X53.<span class=\"hljs-number\">57</span> Y29.<span class=\"hljs-number\">56</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X54.<span class=\"hljs-number\">494</span> Y29.<span class=\"hljs-number\">119</span> E.<span class=\"hljs-number\">03697</span><br><span class=\"hljs-symbol\">G1</span> X55.<span class=\"hljs-number\">682</span> Y28.<span class=\"hljs-number\">701</span> E.<span class=\"hljs-number\">04545</span><br><span class=\"hljs-symbol\">G1</span> X56.<span class=\"hljs-number\">731</span> Y28.<span class=\"hljs-number\">45</span> E.<span class=\"hljs-number\">03897</span><br><span class=\"hljs-symbol\">G1</span> X57.<span class=\"hljs-number\">747</span> Y28.<span class=\"hljs-number\">311</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X58.<span class=\"hljs-number\">707</span> Y28.<span class=\"hljs-number\">268</span> E.<span class=\"hljs-number\">0347</span><br><span class=\"hljs-symbol\">G1</span> X267.<span class=\"hljs-number\">625</span> Y28.<span class=\"hljs-number\">268</span> E7.<span class=\"hljs-number\">5432</span><br><span class=\"hljs-symbol\">G1</span> X268.<span class=\"hljs-number\">655</span> Y28.<span class=\"hljs-number\">317</span> E.<span class=\"hljs-number\">03721</span><br><span class=\"hljs-symbol\">G1</span> X269.<span class=\"hljs-number\">669</span> Y28.<span class=\"hljs-number\">463</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X270.<span class=\"hljs-number\">665</span> Y28.<span class=\"hljs-number\">706</span> E.<span class=\"hljs-number\">03702</span><br><span class=\"hljs-symbol\">G1</span> X271.<span class=\"hljs-number\">632</span> Y29.<span class=\"hljs-number\">041</span> E.<span class=\"hljs-number\">03696</span><br><span class=\"hljs-symbol\">G1</span> X272.<span class=\"hljs-number\">832</span> Y29.<span class=\"hljs-number\">612</span> E.<span class=\"hljs-number\">04796</span><br><span class=\"hljs-symbol\">G1</span> X273.<span class=\"hljs-number\">788</span> Y30.<span class=\"hljs-number\">196</span> E.<span class=\"hljs-number\">04045</span><br><span class=\"hljs-symbol\">...</span><br><br><span class=\"hljs-comment\">//打印进度和时长标记位</span><br><span class=\"hljs-symbol\">M73</span> <span class=\"hljs-built_in\">P0</span> R1208<br><br><span class=\"hljs-comment\">//表示上一层已经打印结束</span><br><span class=\"hljs-symbol\">EXCLUDE_OBJECT_END</span> NAME<span class=\"hljs-symbol\">=Square_columns_Z_axis</span>.stl_id_0_copy_0<br><br><span class=\"hljs-comment\">//表示当前层开始打印</span><br><span class=\"hljs-symbol\">EXCLUDE_OBJECT_START</span> NAME<span class=\"hljs-symbol\">=Square_columns_Z_axis</span>.stl_id_0_copy_0<br><br><span class=\"hljs-comment\">//关闭P0、P2风扇</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">S0</span><br><span class=\"hljs-symbol\">M106</span> <span class=\"hljs-built_in\">P2</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//结束打印，在gcode_macro.cfg配置文件中有宏定义函数，表示结束打印</span><br><span class=\"hljs-symbol\">END_PRINT</span><br><br><span class=\"hljs-comment\">//设置机箱温度为0</span><br><span class=\"hljs-symbol\">M141</span> <span class=\"hljs-built_in\">S0</span><br><br><span class=\"hljs-comment\">//上传打印进度</span><br><span class=\"hljs-symbol\">M73</span> P100 <span class=\"hljs-built_in\">R0</span><br></code></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clz0qu1nd0002rcfbd74jfitf","category_id":"clz0w34yc0000tsfb2jlv3whz","_id":"clz0w34yd0001tsfb1h7zeff1"},{"post_id":"clz0qu1nc0001rcfbcdhs3u4m","category_id":"clz0w3ssa0004tsfb4bef9efq","_id":"clz0w3ssa0005tsfb4iw88txe"},{"post_id":"clz0qu1nf0005rcfbh25yapd0","category_id":"clz0w44qh0006tsfbc8h19gdm","_id":"clz0w44qi0007tsfb8licdop6"},{"post_id":"clz0qu1nf0004rcfb0jmy4t6u","category_id":"clz0w4eeh0008tsfbetp1ej76","_id":"clz0w4eei0009tsfb0l605qg4"},{"post_id":"clz1edk980000x8uwatnzfn6x","category_id":"clz1edk9m0002x8uwh0371u10","_id":"clz1edk9u000cx8uw32cfbm8n"},{"post_id":"clz1edk9h0001x8uwcktnat42","category_id":"clz1edk9r0007x8uwafu2fwi2","_id":"clz1edk9x000ix8uwd5z6b8vt"},{"post_id":"clz1edk9o0004x8uw9mmldfjk","category_id":"clz1edk9m0002x8uwh0371u10","_id":"clz1edk9y000lx8uwcx77d1sf"},{"post_id":"clz1edk9w000gx8uwe5fegtff","category_id":"clz0w34yc0000tsfb2jlv3whz","_id":"clz1edk9y000ox8uwe9cl9pr7"},{"post_id":"clz1edk9p0005x8uwa0a7dn12","category_id":"clz1edk9x000hx8uw2npo8oww","_id":"clz1edk9z000rx8uwewawf7bx"},{"post_id":"clz1edk9q0006x8uwbywj7i5v","category_id":"clz1edk9x000hx8uw2npo8oww","_id":"clz1edka0000vx8uwa9vk3gin"},{"post_id":"clz1edk9s000ax8uw4jdp64ns","category_id":"clz1edk9x000hx8uw2npo8oww","_id":"clz1edka0000yx8uw6rdj9njh"},{"post_id":"clz1edk9t000bx8uw5cy70cj4","category_id":"clz1edka0000ux8uw3ncqf5f6","_id":"clz1edka10011x8uwdp51azct"},{"post_id":"clz2im5zz0000dwfbaw72ajt0","category_id":"clz0w3ssa0004tsfb4bef9efq","_id":"clz2im6090002dwfb7wfualzg"}],"PostTag":[{"post_id":"clz0qu1nc0001rcfbcdhs3u4m","tag_id":"clz0qu1ne0003rcfbhhyj8uzs","_id":"clz0qu1ng0007rcfbf2eb3zjt"},{"post_id":"clz0qu1nd0002rcfbd74jfitf","tag_id":"clz0qu1nf0006rcfb7angcid9","_id":"clz0qu1ng0009rcfbdcon1en5"},{"post_id":"clz0qu1nf0005rcfbh25yapd0","tag_id":"clz0qu1ng000arcfb8smxa4im","_id":"clz0qu1ng000crcfb5a8edi9w"},{"post_id":"clz1edk980000x8uwatnzfn6x","tag_id":"clz1edk9n0003x8uw7twxgvi8","_id":"clz1edk9s0009x8uwgjw7hpcy"},{"post_id":"clz1edk9h0001x8uwcktnat42","tag_id":"clz1edk9r0008x8uw779fewx6","_id":"clz1edk9w000fx8uw9s4zed94"},{"post_id":"clz1edk9o0004x8uw9mmldfjk","tag_id":"clz1edk9u000ex8uw7wyu974w","_id":"clz1edk9x000kx8uwa4hqbar2"},{"post_id":"clz1edk9p0005x8uwa0a7dn12","tag_id":"clz1edk9x000jx8uw4f6r7m09","_id":"clz1edk9y000px8uwef2l732n"},{"post_id":"clz1edk9q0006x8uwbywj7i5v","tag_id":"clz1edk9y000nx8uwhfv48lup","_id":"clz1edk9z000tx8uw8mmt3hbn"},{"post_id":"clz1edk9s000ax8uw4jdp64ns","tag_id":"clz1edk9z000sx8uw9g20dubl","_id":"clz1edka0000xx8uw8vmi7zgh"},{"post_id":"clz1edk9t000bx8uw5cy70cj4","tag_id":"clz1edka0000wx8uw1g5ue8bg","_id":"clz1edka10010x8uweoi04jqc"},{"post_id":"clz0qu1nf0004rcfb0jmy4t6u","tag_id":"clz1edka0000zx8uwgtlnfnoq","_id":"clz1edka10013x8uw38szapk7"},{"post_id":"clz1edk9w000gx8uwe5fegtff","tag_id":"clz1edka10012x8uwgdys7lk1","_id":"clz1edka10014x8uw4hnvfplv"},{"post_id":"clz2im5zz0000dwfbaw72ajt0","tag_id":"clz2im6070001dwfb5az0cpez","_id":"clz2im6090003dwfbfmej5buq"}],"Tag":[{"name":"Gcode","_id":"clz0qu1ne0003rcfbhhyj8uzs"},{"name":"Linux","_id":"clz0qu1nf0006rcfb7angcid9"},{"name":"Github","_id":"clz0qu1ng0008rcfb8tw2abhw"},{"name":"git","_id":"clz0qu1ng000arcfb8smxa4im"},{"name":"Markdown","_id":"clz1edk9n0003x8uw7twxgvi8"},{"name":"文献检索","_id":"clz1edk9r0008x8uw779fewx6"},{"name":"PPT","_id":"clz1edk9u000ex8uw7wyu974w"},{"name":"控制设计","_id":"clz1edk9x000jx8uw4f6r7m09"},{"name":"控制工程","_id":"clz1edk9y000nx8uwhfv48lup"},{"name":"无刷电机控制","_id":"clz1edk9z000sx8uw9g20dubl"},{"name":"Hi3861","_id":"clz1edka0000wx8uw1g5ue8bg"},{"name":"Github_Pages","_id":"clz1edka0000zx8uwgtlnfnoq"},{"name":"TCP","_id":"clz1edka10012x8uwgdys7lk1"},{"name":"3D打印机","_id":"clz2im6070001dwfb5az0cpez"}]}}