{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/Image/image-20240724154237430.png","path":"Image/image-20240724154237430.png","modified":0,"renderable":0},{"_id":"source/Image/image-20240724154427037.png","path":"Image/image-20240724154427037.png","modified":0,"renderable":0},{"_id":"source/Image/image-20240724155135615.png","path":"Image/image-20240724155135615.png","modified":0,"renderable":0},{"_id":"source/Image/image-20240724161404111.png","path":"Image/image-20240724161404111.png","modified":0,"renderable":0},{"_id":"source/Image/image-20240724162639684.png","path":"Image/image-20240724162639684.png","modified":0,"renderable":0},{"_id":"source/Image/image-20240724153741084.png","path":"Image/image-20240724153741084.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1}],"Cache":[{"_id":"source/Image/image-20240724154427037.png","hash":"2f95444cbb2285a578131ce272065a1c1aea7af9","modified":1721814734880},{"_id":"source/Image/image-20240724154237430.png","hash":"98d3dee917bd9d23fbeb8260c9e5c08cf8c0eecc","modified":1721814723983},{"_id":"source/Image/image-20240724161404111.png","hash":"b3f3ba5f0832da3a250f777a0bde4726a95cae70","modified":1721814756308},{"_id":"source/_posts/Work No.1.md","hash":"4515716527667f157f1fd3b631e69ccd40827cd8","modified":1721889269514},{"_id":"source/Image/image-20240724153741084.png","hash":"f081610bccd4b7aeaa2f570adc438917765cc952","modified":1721806749091},{"_id":"source/_posts/Work No.4.md","hash":"04e683a53aff6ce7cf7802d44a1d082a38504f7d","modified":1721889617998},{"_id":"source/_posts/Work No.6.md","hash":"6eb581b4f2350afa86e16accc6cb60e336a400d5","modified":1721891986020},{"_id":"source/_posts/Work No.5.md","hash":"5aefb822765680ca688986319ec4b863f9623dea","modified":1721888768027},{"_id":"source/about/index.md","hash":"856c0185874a6bdc1f53919542c67b6b7027c976","modified":1721804580005},{"_id":"source/Image/image-20240724155135615.png","hash":"3feb9a270e960d70a209ad4edf77bdcc17e2aaf8","modified":1721814744251},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1702661414000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1702661414000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1702661414000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1702661414000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1702661414000},{"_id":"themes/fluid/README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1702661414000},{"_id":"themes/fluid/README_en.md","hash":"365184a73af40e7365504c3077f3d80dfee1d80e","modified":1702661414000},{"_id":"themes/fluid/_config.yml","hash":"43b47435a36b574ba7a6188b476a1cfc2b920d21","modified":1721888479226},{"_id":"themes/fluid/package.json","hash":"c640b57695b7b6002399711f1a7708b0f6c05b84","modified":1702661414000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1702661414000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1702661414000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1702661414000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1702661414000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1702661414000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1702661414000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1702661414000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1702661414000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"2253e1bc61694b3bdc5e434ea2660d13d941b50e","modified":1702661414000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1702661414000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1702661414000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1702661414000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1702661414000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1702661414000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1702661414000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1702661414000},{"_id":"themes/fluid/layout/index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1702661414000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1702661414000},{"_id":"themes/fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1702661414000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1702661414000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1702661414000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1702661414000},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"19a8a00f5ba9607d82265572fe1202b64a8b0822","modified":1702661414000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1702661414000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1702661414000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1702661414000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1702661414000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1702661414000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1702661414000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1702661414000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1702661414000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1702661414000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1702661414000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1702661414000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1702661414000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"c5939d14065d38c86e16d1642e154dde5a23e830","modified":1702661414000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1702661414000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1702661414000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1702661414000},{"_id":"themes/fluid/source/js/events.js","hash":"5891534506b959a2f559f29e122baa3eb9159d93","modified":1702661414000},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1702661414000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1702661414000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1702661414000},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1702661414000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1702661414000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1702661414000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1702661414000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1702661414000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1702661414000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1702661414000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1702661414000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1702661414000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1702661414000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1702661414000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1702661414000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1702661414000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1702661414000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1702661414000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1702661414000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1702661414000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1702661414000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1702661414000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1702661414000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1702661414000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1702661414000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1702661414000},{"_id":"themes/fluid/scripts/tags/fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1702661414000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"0857aa86db2a711ae5c77218a9e3fa686d0e87b1","modified":1702661414000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1702661414000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1702661414000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1702661414000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1702661414000},{"_id":"themes/fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1702661414000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1702661414000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1702661414000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1702661414000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1702661414000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1702661414000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1702661414000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1702661414000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1702661414000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1702661414000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1702661414000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1702661414000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1702661414000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1702661414000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1702661414000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"cd432a6411ccac7df47e6a300fb1a872cfc763e7","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1702661414000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1702661414000},{"_id":"source/Image/image-20240724162639684.png","hash":"2d2977ccaebb8f224bef769a56afd8e462aec7cf","modified":1721814767986},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1702661414000},{"_id":"public/local-search.xml","hash":"c5cfc8926151cb603ec4f4eb2bb8658aa9f0856f","modified":1721892165177},{"_id":"public/about/index.html","hash":"af821fa90d8ac695a9a2c714de3c683b86543ae5","modified":1721890511730},{"_id":"public/2024/07/25/Work No.6/index.html","hash":"43904ad8c546f497dea77dc5c6cef3676a925023","modified":1721892165177},{"_id":"public/2024/07/25/Work No.5/index.html","hash":"9c117994d824f1dc7f7c7f0b65f58c0c3af469d9","modified":1721890511730},{"_id":"public/2024/07/25/Work No.4/index.html","hash":"fe1f3a27dae4cc112adbd22655c31f189af39f60","modified":1721890511730},{"_id":"public/2024/07/25/Work No.1/index.html","hash":"7859fa90347364a0988ce02e6d3359a50ce37961","modified":1721890511730},{"_id":"public/tags/Gcode/index.html","hash":"e32e2b2331214c78ba9fae0c73f29e3a06f6a661","modified":1721890511730},{"_id":"public/tags/Linux/index.html","hash":"a0e799a14816a42ced503f04fc9729a9fbf2426c","modified":1721890511730},{"_id":"public/tags/Github/index.html","hash":"d0c2d45db7c2c4035aff14b393f7d5b1f19219ef","modified":1721890511730},{"_id":"public/tags/git/index.html","hash":"6352ed2e74da6b1262e7c987371084182f09e8eb","modified":1721890511730},{"_id":"public/archives/index.html","hash":"4b4e6601b571e01020b3cf7c8f3d0e7036d38193","modified":1721890511730},{"_id":"public/archives/2024/index.html","hash":"9a38718194402f0f4333754cf35e0a1b3831f0a1","modified":1721890511730},{"_id":"public/archives/2024/07/index.html","hash":"fcdf53eacde613320f9dcf5e23cbf50dab8fe2dd","modified":1721890511730},{"_id":"public/index.html","hash":"9ae6bb16cf846e2e4a5263b5d0548c3373cfe52b","modified":1721890511730},{"_id":"public/404.html","hash":"884ce2ec0740abe96cab1eb7256d6ce53ae9acba","modified":1721890511730},{"_id":"public/tags/index.html","hash":"63380d55e25e0217ca782782baf1d3a716619e5c","modified":1721890511730},{"_id":"public/categories/index.html","hash":"23e93de71d8c8380e84bd454c9c87c27c0080655","modified":1721890511730},{"_id":"public/links/index.html","hash":"a98f077871b509a5a8d9dc26fc7cd467eeff7285","modified":1721890511730},{"_id":"public/Image/image-20240724154427037.png","hash":"2f95444cbb2285a578131ce272065a1c1aea7af9","modified":1721879899348},{"_id":"public/Image/image-20240724154237430.png","hash":"98d3dee917bd9d23fbeb8260c9e5c08cf8c0eecc","modified":1721879899348},{"_id":"public/Image/image-20240724161404111.png","hash":"b3f3ba5f0832da3a250f777a0bde4726a95cae70","modified":1721879899348},{"_id":"public/Image/image-20240724153741084.png","hash":"f081610bccd4b7aeaa2f570adc438917765cc952","modified":1721879899348},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1721879899348},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1721879899348},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1721879899348},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1721879899348},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1721879899348},{"_id":"public/Image/image-20240724155135615.png","hash":"3feb9a270e960d70a209ad4edf77bdcc17e2aaf8","modified":1721879899348},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1721879899348},{"_id":"public/css/main.css","hash":"dd5b6b89a31414b60b304cd465fc381171a0430e","modified":1721879899348},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1721879899348},{"_id":"public/js/color-schema.js","hash":"c5939d14065d38c86e16d1642e154dde5a23e830","modified":1721879899348},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1721879899348},{"_id":"public/css/highlight-dark.css","hash":"b6054db41ada8e006a249a2e78c42cc824e6e195","modified":1721879899348},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1721879899348},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1721879899348},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1721879899348},{"_id":"public/js/events.js","hash":"5891534506b959a2f559f29e122baa3eb9159d93","modified":1721879899348},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1721879899348},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1721879899348},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1721879899348},{"_id":"public/Image/image-20240724162639684.png","hash":"2d2977ccaebb8f224bef769a56afd8e462aec7cf","modified":1721879899348},{"_id":"public/categories/Linux/index.html","hash":"ceacf99c09353eaec00944fedca3363431dd59b8","modified":1721890511730},{"_id":"public/categories/3D打印机/index.html","hash":"b848b09c1aef4627297df6d85a41ac341660ce4c","modified":1721890511730},{"_id":"public/categories/Github/index.html","hash":"44becef1b9cdbc1b121b3542acec14818abbae72","modified":1721890511730},{"_id":"public/categories/Git/index.html","hash":"628441c9fec0b60ef6b112a8527b470a5e2a2e2a","modified":1721890511730}],"Category":[{"name":"Linux","_id":"clz0w34yc0000tsfb2jlv3whz"},{"name":"C/C++","_id":"clz0w3gel0002tsfbb9eycl0d"},{"name":"3D打印机","_id":"clz0w3ssa0004tsfb4bef9efq"},{"name":"Git","_id":"clz0w44qh0006tsfbc8h19gdm"},{"name":"Github","_id":"clz0w4eeh0008tsfbetp1ej76"}],"Data":[],"Page":[{"title":"about","date":"2024-07-24T07:02:45.000Z","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-07-24 15:02:45\nlayout: about\n---\n","updated":"2024-07-24T07:03:00.005Z","path":"about/index.html","comments":1,"_id":"clz0qu1na0000rcfb397j9gxy","content":"","excerpt":"","more":""}],"Post":[{"title":"Gcode学习","_content":"\n# Gcode学习\n\n### 一、3D打印机编程\n\n### 学习资料\n\n[[G-Codes - Klipper 文档 (klipper3d.org)](https://www.klipper3d.org/zh/G-Codes.html)](https://www.klipper3d.org/zh/Overview.html)\n\n[G-code - RepRap](https://reprap.org/wiki/G-code)\n\n[3D 打印机 G 代码命令：完整列表和教程_3d打印机g代码-CSDN博客](https://blog.csdn.net/acktomas/article/details/125552309)\n\n[3D打印机DIY之六------G代码命令_g代码m300-CSDN博客](https://blog.csdn.net/qlexcel/article/details/103466638)\n\n### G指令\n\n#### G0/G1: 直线移动\n\nG0和G1命令完全等价，作用就是让喷头线性移动到一个特定的位置，使用时，不需要所有的参数全部存在，但至少要有一个参数。\n\nG0 Xnnn Ynnn Znnn Ennn Fnnn Snnn / G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn\n\nXnnn表示X轴的移动位置；\n\nYnnn表示Y轴的移动位置；\n\nZnnn表示Z轴的移动位置；\n\nEnnn表示E轴（挤出头步进电机）的移动位置；\n\nFnnn表示移动速度，单位是毫米/每分钟；\n\nSnnn表示是否检查限位开关，S0不检查，S1检查，缺省值是S0；\n\n#### G28：复位\n\n打印机复位命令。执行时会让3个轴依次往限位开关的方向运行，碰到限位开关后还会减速做一次1mm左右的往返运动，来保证复位的准确性。如果在命令后面加上坐标值，则只会复位坐标值对应的坐标轴。（坐标值的数字会被忽略）\n\nG28 X0 Y72.3\n\n只会复位x轴和y轴。\n\n#### G29：Z轴高度三点测试\n\n这条命令会测试打印平面上三个点的Z轴高度，并在串口上输出结果。参数为Snnn，表示对测试结果的处理方式。S1表示更新内存中的Z轴高度值（重置系统会丢失），S2表示更新内存以及EEPROM中的Z轴高度值（重置系统不会丢失）。\n\n一般来说，只有使用高位限位开关（也就是说，Z轴的限位开关位于Z轴坐标最大处），且在挤出头上附带有Z轴高度测试微动开关的机型，适合使用G29命令测试Z轴高度。其他机械配置的机型，不适合使用G29命令。G29命令由固件配置\n\n#### G30：Z轴高度单点测试（单步）\n\n这条命令作为一个完整Z轴高度测试过程的一步，测试打印平面上一个点的Z轴高度，并在串口上输出结果。这个完整的Z轴高度测试过程，通常是由3D打印机控制软件连续发出的，通过参数控制G30的执行状态。因此在手动工作方式下，G30命令只适合不带参数运行\n\n#### G31：输出Z轴高度测试微动开关状态\n\n执行后会输出当前Z轴高度测试微动开关的当前状态，其中L表示微动开关没有触发。如果是处于触发状态，这里会输出H。\n\nG29命令、G30命令、G31命令只进行Z轴的高度测试，并不进行自动调平。\n\n#### G32：热床自动调平\n\n这条命令在G29命令的基础上，不仅测试打印平面上三个点的Z轴高度，而且还会根据测试的结果，对3D打印机的机械参数进行调整，实现热床自动调平。G32命令使用的参数与G29命令是一致的：Snnn，表示测试结果的处理方式。S1表示更新内存中的相关参数值（重置系统会丢失），S2表示更新内存以及EEPROM中的相关参数值（重置系统不会丢失）。\n\nG32命令执行完成时，不仅Z轴高度参数发生了改变，而且还会根据3D打印机的硬件配置，对热床进行相应的调平处理。\n\nG32命令会在3D打印机内存中构建一个转换矩阵（Transformation matrix），让未来3D打印机所处理的所有三维空间位置，都先经过这个矩阵的变换，保证在Z=0的情况下，正好与热床平面完全吻合\n\n#### G4: 暂停移动\n\n让喷头在当前位置停留一段时间。参数可以为：G4 Pnnn或G4 Snnn。Pnnn表示以毫秒为单位，Snnn表示以秒为单位。\n\nG4 P2000与G4 S2完全等价，都表示停顿2秒。\n\n在停顿过程中机器仍可以被控制，如挤出头温度。\n\n#### G20:使用英寸作为单位\n\n执行这条命令后，后面的命令都以英寸作为单位。\n\n#### G21: 使用毫米作为单位\n\n执行这条命令后，后面的命令都以毫米作为单位。\n\n#### G90/G91：设置坐标模式\n\n这两条命令用于设置当前坐标模式为绝对坐标模式(G90)或者相对坐标模式(G91)。没有参数。未设置时缺省值是绝对坐标模式\n\n#### G92:设置当前位置为某个坐标值\n\n把当前位置设定为某个坐标值，可以用来设置零点，如果参数为空表示把当前位置设置为所有轴的的零点。\n\n如：G92 X10 E90    ;表示把当前位置设置为x=10，喷头坐标=90\n\n再如：G92 E0       ；表示把当前喷头坐标设置为0\n\n#### G94/G95:进给速率单位\n\n使用了G94指令之后，所有的进给都是以mm/min为单位，即F100指刀具每分钟移动100毫米（默认的）\n\n使用了G95指令之后，所有的进给都是以mm/r为单位，即F100指主轴每转一转，刀具移动100毫米\n\n#### G17/G18/G19：选择加工平面\n\nG17–XY平面；\n\nG18–XZ平面；\n\nG19–YZ平面；\n\n### M指令\n\n#### M0:打印机停止\n\n打印机会终止任何动作，然后关机。所有的电机和加热器都会被关掉，这个时候只能通过reset按钮来重启控制器。\n\n#### M1: 打印机休眠\n\n打印机会终止任何动作，然后休眠。所有的马达和加热器都会被关掉，但是接收到G或M命令时，打印机可以被唤醒并进入工作状态。\n\n#### M17:启动所有步进电机\n\n#### M18:关闭所有步进电机\n\n#### M20:读取SD卡根目录中的文件\n\n读取SD卡根目录的文件，并通过串口输出文件名。\n\n#### M21:初始化SD卡\n\n初始化SD卡。如果在机器通电时插入SD卡，会默认初始化SD卡。开始其他SD卡功能时，SD卡一定要先初始化。本命令相当于文件系统中执行Mount动作。\n\n#### M22:卸载SD卡\n\n卸载SD卡，也就是执行Unmount动作。没有相关的参数。\n\n#### M23:选择SD卡中的文件\n\n选择一个SD卡上的文件。文件选择之后，可以执行打印、删除等动作。\n\n如：M23 filename.gcode   ;选中filename.gcode文件\n\n#### M24:开始打印SD卡中选中的文件\n\n开始打印通过M23命令选中的文件。\n\n#### M25:暂停SD卡打印\n\n暂停打印通过M23命令选定的文件。\n\n#### M27:报告SD卡打印进度\n\n获取SD卡打印进度。没有相关参数。\n\nM27命令的输出，格式为：SD printing byte 11518/1127578\n\n这条命令供上位机获取当前的3D打印进度信息，用于显示在电脑界面上。\n\n#### M28:开始往SD卡文件中写入数据\n\n接收到此命令后，后续接收到的命令（除了M29）都会被当成数据写入该文件。\n\n命令后面会跟着文件名，如果文件不存在则会被创建，如果存在则会被覆盖。接收到这条命令后，后续接收到的命令都会被写入该文件中，直到接收到M29命令。如：M28 filename.gcode  \n\n#### M29:停止往SD卡文件中写入数据\n\n接收到此命令后，后续接收到的命令要开始正常执行。\n\n#### M30:删除SD卡中的文件\n\n如：M30 filename.gcode     ;删除filename.gcode文件\n\n#### M32：创建子目录\n\n在SD卡上创建一个子目录。参数为：filename，表示待创建的子目录（包含目录名，以/分隔）；\n\n#### M82/M83：设置挤出头步进电机坐标模式\n\n与G90/G91命令类似，这两条命令用于设置挤出头当前坐标模式为绝对坐标模式(M82)或者相对坐标模式(M83)。没有参数。未设置时缺省值是绝对坐标模式。需要注意的是，G90/G91设置的坐标模式，同时对XYZE四个轴起作用，但M82/M83设置的坐标模式，只对E轴（挤出头步进电机）起作用。\n\n#### M84：设置步进电机自动关闭时间\n\n当3D打印机一段时间没有接收到步进电机运动指令之后，3D打印机（为了节能）会自动关闭步进电机。使用M84指令，可以设置这个自动关闭步进电机的时间。\n\nSnnn，表示步进电机关闭的时间，以秒为单位。\n\n如果使用M85时没有指定S参数，或者使用了S0参数，则代表取消3D打印机自动关闭功能，挤出头、热床等在工作完成之后，一直会处于当前状态，而不会被自动关闭。\n\n#### M73：获取当前打印进度\n\n告诉固件当前的构建进度百分比。预计这台机器会在显示屏上显示出来。如果百分比恰好为0，则向主机发送“构建开始”通知。如果百分比恰好为100，则向主机发送“构建结束”通知。\n\n#### M105: 获取当前温度（单位：℃）\n\n获取当前温度值，包括挤出头和热床的温度。\n\nX，表示输出ADC测量的原始值；\n\nM105命令的输出，格式为：T:18.97 /0 B:18.75 /0 B@:0 @:0\n\nT:之后的部分，代表挤出头的当前温度/目标温度；\n\nB:之后的部分代表热床的当前温度/目标温度。\n\n在PID温度控制模式下，B@:后面的数字代表热床当前的输出强度，是一个0~255的值，@:后面的数字，代表挤出头当前的输出强度，也是一个0~255的值。例子中，挤出头、热床都处于关闭状态，所以这个位置的值都是0。\n\n#### M104:设置挤出机（喷头）温度\n\n设置挤出头的目标温度。执行这条命令后，不需要等待达到这个温度，控制板继续执行下一条G-code语句。\n\nSnnn，表示目标温度；\n\nTnnn，表示对应的挤出头；\n\nP，表示要等待前面的指令完成之后，再开始设置挤出头温度；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。F1表示要触发；\n\n如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。\n\n如：M104 S190         ;将挤出机的温度设置为190度 \n\n#### M106: 打开风扇\n\n如：M106 S127    ;打开风扇（半速）。\n\n'S'表示 PWM值 (0-255). 可简单理解为：风扇有0-255级强度可选，其中 M106 S0 意味着风扇将被关掉。\n\nP表示风扇的数目，P0是第一个风扇，P1是第二个风扇\n\n#### M109: 等待挤出头加热达到目标温度\n\n设置挤出头的目标温度，并等待达到这个温度。\n\nSnnn，表示目标温度；\n\nTnnn，表示对应的挤出头；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。如： M109 S185      ;等待挤出头加热到185度\n\n#### M114: 获取挤出头当前位置\n\n输出挤出头当前位置。没有相关的参数。\n\nM114命令的输出，格式为：\n\nM114 X:20.00 Y:30.00 Z:10.000 E:0.0000\n\n#### M115: 获取3D打印机信息\n\n输出3D打印机信息。没有相关的参数。\n\nM115命令的输出，格式为：FIRMWARE_NAME:Repetier_0.92.3FIRMWARE_URL:…Printedfilament:0.00mPrintingtime:0days0hours0minSpeedMultiply:100FlowMultiply:100\n\n第一行是固件的版本信息，很长，没有列完整。第二行是已经打印了多少米耗材，打印时间是几天几小时几分钟。第三行是速度系数，参考M220命令。第四行是流率系数，参考M221命令。\n\n#### M140 设置热床目标温度\n\n设置热床的目标温度。执行这条命令后，不需要等待达到这个温度，立即开始执行下一条G-code语句。\n\nSnnn表示目标温度；\n\nFnnn表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n#### M141:设置构建平台的温度\n\n可能用于特定的温控策略或多热床系统\n\nM141 S60将加热床设置为60摄氏度\n\n#### M190: 等待热床加热达到目标温度\n\n设置热床的目标温度，并等待达到这个温度。\n\nSnnn，表示目标温度；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n#### M204：设置PID参数\n\n设置挤出头温度控制的PID参数，\n\nSnnn表示对应的挤出头，无S参数表示使用当前挤出头；\n\nXnnn表示P参数；\n\nYnnn表示I参数；\n\nZnnn表示D参数；\n\n#### M220：设置速度\n\n设置3D打印机运行速度系数。\n\n命令参数为Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；\n\n3D打印机运行速度系数，是一个在25%到500%范围内变化的值。这个系数值在3D打印机运行过程中，与切片器给出的3D打印机运动速度基础值相乘，得到最终的3D打印机实际运动速度值。\n\nM220命令的输出，格式为：SpeedMultiply:100\n\n#### M221：设置流率\n\n设置3D打印机的流率系数（Flow rate）。\n\n命令参数为：Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；\n\n3D打印机流率系数，是在上位机切片软件通过耗材直径、喷头直径、层高以及3D打印速度等因素综合计算得到的E轴运动速度的基础上，叠加的一个E轴运动速度系数。简单地说，就是控制挤出头耗材挤出量的多少。这个系数可以在25%到500%范围内变化。\n\nM221命令的输出，格式为：FlowMultiply:100\n\n### T指令\n\n#### T0/T1/T2/T3 命令，选择不同的工具或挤出机\n\nT0 选择第一个挤出机；T1 选择第二个挤出机；T2 选择第三个挤出机；T3 选择第四个挤出机\n\n#### 节选注释\n\n```\nM106 P2 S204    //打开第三个风扇，PWM值为204\n;LAYER_CHANGE\n;Z:16.8\n;HEIGHT:0.199999\n;BEFORE_LAYER_CHANGE\n;16.8\nG92 E0    //设置喷头当前位置为零点\nM106 P2 S0    //关闭第二个风扇\n\nG1 E-.35 F2400  //挤出机回抽挤出0.35mm，速度设置为2400mm/min\n;WIPE_START\nG1 F9473.877    //速度设置为9473.877mm/min\nG1 X320.911 Y304.914 E-.11658    //直线插补，移动到（320.911，304.914）位置，并回抽0.11658\nG1 X321.066 Y304.753 E-.03342    //直线插补，移动到（321.066，304.753）位置，并回抽0.03342\n;WIPE_END\nEXCLUDE_OBJECT_END NAME=ksr_fdmtest_w4.stl_id_0_copy_0\n;_SET_FAN_SPEED_CHANGING_LAYER\nEXCLUDE_OBJECT_START NAME=ksr_fdmtest_w4.stl_id_0_copy_0\nG17    //选择XY平面\nG3 Z17 I.035 J-1.216 P1  F30000    //圆弧插补，Z轴位置为17mm，圆心坐标为（321.066+0.035，304.753-1.216）,P1表示为顺时针，速度为30000mm/min\nG1 X43.587 Y296.746 Z17    //直线插补，移动到（321.066，304.753，17）位置\nG1 Z16.8    //直线插补，移动到（321.066，304.753，16.8）位置\nG1 E.5 F2400    //挤出机挤出0.5mm，速度设置为2400mm/min\n```\n\n### 二、CNC数控编程\n\n#### 学习资料\n\n[数控机床编程入门【G-code】 | 学习软件编程 (hubwiz.com)](http://blog.hubwiz.com/2021/06/26/g-code-tutorial/)\n\n#### G00–快速定位\n\nG00命令以最大速度将机器从当前位置移动到指定的坐标。机器将同时移动所有轴，以便同时完成行程。 结果是直线移动到新的位置点。\n\n#### G01–线性插值\n\nG01 命令指示机器以设定速度直线移动。我们用X、Y和Z值指定最终位置，用F值指定速度。 CNC控制器计算（插值）要经过的中间点的坐标，以获得直线。\n\n#### G02–顺时针环形插值\n\nG02命令要求机器以圆形模式顺时针移动。它与 G01 命令的概念相同，在执行适当的加工过程时使用。除了 终点参数，在这里我们还需要定义旋转中心，或弧线起点与弧线中心点的距离。起点实际上是上一个命令的 终点或当前点。\n\n#### G03–逆时针环形插值\n\n与 G02 一样，G03 命令指示机器以圆形模式移动，区别在于G03是逆时针运动。所有其他功能和规则与 G02 命令相同。\n\n#### G20/G21 – 单位选择\n\nG20 和 G21 命令定义 G-code单位，英寸或毫米。G20 = 英寸；G21 = 毫米\n\n#### G17/G18/G18 – 工作面选择\n\nG17–XY平面；G18–XZ平面；G19–YZ平面\n\n#### G28–返回home\n\nG28命令要求机器将移动到其参考点或home位置。为了避免碰撞，我们可以包括一个带有 X、Y 和 Z 参数的 中间点。该工具将在转到参考点之前通过该点。\n\n#### G90/G91 – 定位模式\n\n使用 G90 和 G91 命令，我们告诉机器如何解析坐标值。G90为绝对模式，G91为相对模式。\n\n#### 其他代码\n\n```\n- M00–程序停止\n- M02–程序结束\n- M03–主轴打开–顺时针\n- M04–主轴打开–逆时针\n- M05–主轴停止\n- M06–工具更改\n- M08–启用Flood Colant\n- M09–禁用Flood Colant\n- M30 – 程序结束\n- M104–启动挤出加热\n- M109–等到挤出器到达T0\n- M140–开始底板加热\n- M190–等到底板到达T0\n- M106–设置风扇速度\n```\n\n#### 代码解释\n\n```\n%\nG21 G17 G90 F100                     //G21单位选择毫米，G17选择XY平面，G90选择绝对模式，F100代表转速\nM03 S1000                            //主轴打开-顺时针，速度为1000转\nG00 X5 Y5                 ; point B  //快速移动到（5，5）\nG01 X5 Y5 Z-1             ; point B  //直线插补移动到（5，5，-1）\nG01 X5 Y15 Z-1            ; point C  //直线插补移动到（5，15，-1）\nG02 X9 Y19 Z-1 I4 J0      ; point D  //顺时针环形插补移动到（9，19，-1），圆心为（9，15）\nG01 X23 Y19 Z-1           ; point E  //直线插补移动到（23，19，-1）\nG01 X32 Y5 Z-1            ; point F  //直线插补移动到（32，5，-1）\nG01 X21 Y5 Z-1            ; point G  //直线插补移动到（21，5，-1）\nG01 X21 Y8 Z-1            ; point H  //直线插补移动到（21，8，-1）\nG03 X19 Y10 Z-1 I-2 J0    ; point I  //逆时针环形插补移动到（19，10，-1），圆心为（19，8）\nG01 X13 Y10 Z-1           ; point J  //直线插补移动到（13，10，-1）\nG03 X11 Y8 Z-1 I0 J-2     ; point K  //逆时针环形插补移动到（11，8，-1），圆心为（13，8）\nG01 X11 Y5 Z-1            ; point L  //直线插补移动到（11，5，-1）\nG01 X5 Y5 Z-1             ; point B  //直线插补移动到（5，5，-1）\nG01 X5 Y5 Z0                         //直线插补移动到（5，5，0）\nG28  X0 Y0                           //返回零点（0，0，0）\nM05                                  //关闭主轴\nM30                                  //程序结束\n%\n```\n","source":"_posts/Work No.4.md","raw":"---\ntitle: Gcode学习\ntag: Gcode\ncategories: 3D打印机\n---\n\n# Gcode学习\n\n### 一、3D打印机编程\n\n### 学习资料\n\n[[G-Codes - Klipper 文档 (klipper3d.org)](https://www.klipper3d.org/zh/G-Codes.html)](https://www.klipper3d.org/zh/Overview.html)\n\n[G-code - RepRap](https://reprap.org/wiki/G-code)\n\n[3D 打印机 G 代码命令：完整列表和教程_3d打印机g代码-CSDN博客](https://blog.csdn.net/acktomas/article/details/125552309)\n\n[3D打印机DIY之六------G代码命令_g代码m300-CSDN博客](https://blog.csdn.net/qlexcel/article/details/103466638)\n\n### G指令\n\n#### G0/G1: 直线移动\n\nG0和G1命令完全等价，作用就是让喷头线性移动到一个特定的位置，使用时，不需要所有的参数全部存在，但至少要有一个参数。\n\nG0 Xnnn Ynnn Znnn Ennn Fnnn Snnn / G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn\n\nXnnn表示X轴的移动位置；\n\nYnnn表示Y轴的移动位置；\n\nZnnn表示Z轴的移动位置；\n\nEnnn表示E轴（挤出头步进电机）的移动位置；\n\nFnnn表示移动速度，单位是毫米/每分钟；\n\nSnnn表示是否检查限位开关，S0不检查，S1检查，缺省值是S0；\n\n#### G28：复位\n\n打印机复位命令。执行时会让3个轴依次往限位开关的方向运行，碰到限位开关后还会减速做一次1mm左右的往返运动，来保证复位的准确性。如果在命令后面加上坐标值，则只会复位坐标值对应的坐标轴。（坐标值的数字会被忽略）\n\nG28 X0 Y72.3\n\n只会复位x轴和y轴。\n\n#### G29：Z轴高度三点测试\n\n这条命令会测试打印平面上三个点的Z轴高度，并在串口上输出结果。参数为Snnn，表示对测试结果的处理方式。S1表示更新内存中的Z轴高度值（重置系统会丢失），S2表示更新内存以及EEPROM中的Z轴高度值（重置系统不会丢失）。\n\n一般来说，只有使用高位限位开关（也就是说，Z轴的限位开关位于Z轴坐标最大处），且在挤出头上附带有Z轴高度测试微动开关的机型，适合使用G29命令测试Z轴高度。其他机械配置的机型，不适合使用G29命令。G29命令由固件配置\n\n#### G30：Z轴高度单点测试（单步）\n\n这条命令作为一个完整Z轴高度测试过程的一步，测试打印平面上一个点的Z轴高度，并在串口上输出结果。这个完整的Z轴高度测试过程，通常是由3D打印机控制软件连续发出的，通过参数控制G30的执行状态。因此在手动工作方式下，G30命令只适合不带参数运行\n\n#### G31：输出Z轴高度测试微动开关状态\n\n执行后会输出当前Z轴高度测试微动开关的当前状态，其中L表示微动开关没有触发。如果是处于触发状态，这里会输出H。\n\nG29命令、G30命令、G31命令只进行Z轴的高度测试，并不进行自动调平。\n\n#### G32：热床自动调平\n\n这条命令在G29命令的基础上，不仅测试打印平面上三个点的Z轴高度，而且还会根据测试的结果，对3D打印机的机械参数进行调整，实现热床自动调平。G32命令使用的参数与G29命令是一致的：Snnn，表示测试结果的处理方式。S1表示更新内存中的相关参数值（重置系统会丢失），S2表示更新内存以及EEPROM中的相关参数值（重置系统不会丢失）。\n\nG32命令执行完成时，不仅Z轴高度参数发生了改变，而且还会根据3D打印机的硬件配置，对热床进行相应的调平处理。\n\nG32命令会在3D打印机内存中构建一个转换矩阵（Transformation matrix），让未来3D打印机所处理的所有三维空间位置，都先经过这个矩阵的变换，保证在Z=0的情况下，正好与热床平面完全吻合\n\n#### G4: 暂停移动\n\n让喷头在当前位置停留一段时间。参数可以为：G4 Pnnn或G4 Snnn。Pnnn表示以毫秒为单位，Snnn表示以秒为单位。\n\nG4 P2000与G4 S2完全等价，都表示停顿2秒。\n\n在停顿过程中机器仍可以被控制，如挤出头温度。\n\n#### G20:使用英寸作为单位\n\n执行这条命令后，后面的命令都以英寸作为单位。\n\n#### G21: 使用毫米作为单位\n\n执行这条命令后，后面的命令都以毫米作为单位。\n\n#### G90/G91：设置坐标模式\n\n这两条命令用于设置当前坐标模式为绝对坐标模式(G90)或者相对坐标模式(G91)。没有参数。未设置时缺省值是绝对坐标模式\n\n#### G92:设置当前位置为某个坐标值\n\n把当前位置设定为某个坐标值，可以用来设置零点，如果参数为空表示把当前位置设置为所有轴的的零点。\n\n如：G92 X10 E90    ;表示把当前位置设置为x=10，喷头坐标=90\n\n再如：G92 E0       ；表示把当前喷头坐标设置为0\n\n#### G94/G95:进给速率单位\n\n使用了G94指令之后，所有的进给都是以mm/min为单位，即F100指刀具每分钟移动100毫米（默认的）\n\n使用了G95指令之后，所有的进给都是以mm/r为单位，即F100指主轴每转一转，刀具移动100毫米\n\n#### G17/G18/G19：选择加工平面\n\nG17–XY平面；\n\nG18–XZ平面；\n\nG19–YZ平面；\n\n### M指令\n\n#### M0:打印机停止\n\n打印机会终止任何动作，然后关机。所有的电机和加热器都会被关掉，这个时候只能通过reset按钮来重启控制器。\n\n#### M1: 打印机休眠\n\n打印机会终止任何动作，然后休眠。所有的马达和加热器都会被关掉，但是接收到G或M命令时，打印机可以被唤醒并进入工作状态。\n\n#### M17:启动所有步进电机\n\n#### M18:关闭所有步进电机\n\n#### M20:读取SD卡根目录中的文件\n\n读取SD卡根目录的文件，并通过串口输出文件名。\n\n#### M21:初始化SD卡\n\n初始化SD卡。如果在机器通电时插入SD卡，会默认初始化SD卡。开始其他SD卡功能时，SD卡一定要先初始化。本命令相当于文件系统中执行Mount动作。\n\n#### M22:卸载SD卡\n\n卸载SD卡，也就是执行Unmount动作。没有相关的参数。\n\n#### M23:选择SD卡中的文件\n\n选择一个SD卡上的文件。文件选择之后，可以执行打印、删除等动作。\n\n如：M23 filename.gcode   ;选中filename.gcode文件\n\n#### M24:开始打印SD卡中选中的文件\n\n开始打印通过M23命令选中的文件。\n\n#### M25:暂停SD卡打印\n\n暂停打印通过M23命令选定的文件。\n\n#### M27:报告SD卡打印进度\n\n获取SD卡打印进度。没有相关参数。\n\nM27命令的输出，格式为：SD printing byte 11518/1127578\n\n这条命令供上位机获取当前的3D打印进度信息，用于显示在电脑界面上。\n\n#### M28:开始往SD卡文件中写入数据\n\n接收到此命令后，后续接收到的命令（除了M29）都会被当成数据写入该文件。\n\n命令后面会跟着文件名，如果文件不存在则会被创建，如果存在则会被覆盖。接收到这条命令后，后续接收到的命令都会被写入该文件中，直到接收到M29命令。如：M28 filename.gcode  \n\n#### M29:停止往SD卡文件中写入数据\n\n接收到此命令后，后续接收到的命令要开始正常执行。\n\n#### M30:删除SD卡中的文件\n\n如：M30 filename.gcode     ;删除filename.gcode文件\n\n#### M32：创建子目录\n\n在SD卡上创建一个子目录。参数为：filename，表示待创建的子目录（包含目录名，以/分隔）；\n\n#### M82/M83：设置挤出头步进电机坐标模式\n\n与G90/G91命令类似，这两条命令用于设置挤出头当前坐标模式为绝对坐标模式(M82)或者相对坐标模式(M83)。没有参数。未设置时缺省值是绝对坐标模式。需要注意的是，G90/G91设置的坐标模式，同时对XYZE四个轴起作用，但M82/M83设置的坐标模式，只对E轴（挤出头步进电机）起作用。\n\n#### M84：设置步进电机自动关闭时间\n\n当3D打印机一段时间没有接收到步进电机运动指令之后，3D打印机（为了节能）会自动关闭步进电机。使用M84指令，可以设置这个自动关闭步进电机的时间。\n\nSnnn，表示步进电机关闭的时间，以秒为单位。\n\n如果使用M85时没有指定S参数，或者使用了S0参数，则代表取消3D打印机自动关闭功能，挤出头、热床等在工作完成之后，一直会处于当前状态，而不会被自动关闭。\n\n#### M73：获取当前打印进度\n\n告诉固件当前的构建进度百分比。预计这台机器会在显示屏上显示出来。如果百分比恰好为0，则向主机发送“构建开始”通知。如果百分比恰好为100，则向主机发送“构建结束”通知。\n\n#### M105: 获取当前温度（单位：℃）\n\n获取当前温度值，包括挤出头和热床的温度。\n\nX，表示输出ADC测量的原始值；\n\nM105命令的输出，格式为：T:18.97 /0 B:18.75 /0 B@:0 @:0\n\nT:之后的部分，代表挤出头的当前温度/目标温度；\n\nB:之后的部分代表热床的当前温度/目标温度。\n\n在PID温度控制模式下，B@:后面的数字代表热床当前的输出强度，是一个0~255的值，@:后面的数字，代表挤出头当前的输出强度，也是一个0~255的值。例子中，挤出头、热床都处于关闭状态，所以这个位置的值都是0。\n\n#### M104:设置挤出机（喷头）温度\n\n设置挤出头的目标温度。执行这条命令后，不需要等待达到这个温度，控制板继续执行下一条G-code语句。\n\nSnnn，表示目标温度；\n\nTnnn，表示对应的挤出头；\n\nP，表示要等待前面的指令完成之后，再开始设置挤出头温度；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。F1表示要触发；\n\n如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。\n\n如：M104 S190         ;将挤出机的温度设置为190度 \n\n#### M106: 打开风扇\n\n如：M106 S127    ;打开风扇（半速）。\n\n'S'表示 PWM值 (0-255). 可简单理解为：风扇有0-255级强度可选，其中 M106 S0 意味着风扇将被关掉。\n\nP表示风扇的数目，P0是第一个风扇，P1是第二个风扇\n\n#### M109: 等待挤出头加热达到目标温度\n\n设置挤出头的目标温度，并等待达到这个温度。\n\nSnnn，表示目标温度；\n\nTnnn，表示对应的挤出头；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。如： M109 S185      ;等待挤出头加热到185度\n\n#### M114: 获取挤出头当前位置\n\n输出挤出头当前位置。没有相关的参数。\n\nM114命令的输出，格式为：\n\nM114 X:20.00 Y:30.00 Z:10.000 E:0.0000\n\n#### M115: 获取3D打印机信息\n\n输出3D打印机信息。没有相关的参数。\n\nM115命令的输出，格式为：FIRMWARE_NAME:Repetier_0.92.3FIRMWARE_URL:…Printedfilament:0.00mPrintingtime:0days0hours0minSpeedMultiply:100FlowMultiply:100\n\n第一行是固件的版本信息，很长，没有列完整。第二行是已经打印了多少米耗材，打印时间是几天几小时几分钟。第三行是速度系数，参考M220命令。第四行是流率系数，参考M221命令。\n\n#### M140 设置热床目标温度\n\n设置热床的目标温度。执行这条命令后，不需要等待达到这个温度，立即开始执行下一条G-code语句。\n\nSnnn表示目标温度；\n\nFnnn表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n#### M141:设置构建平台的温度\n\n可能用于特定的温控策略或多热床系统\n\nM141 S60将加热床设置为60摄氏度\n\n#### M190: 等待热床加热达到目标温度\n\n设置热床的目标温度，并等待达到这个温度。\n\nSnnn，表示目标温度；\n\nFnnn，表示到达目标温度之后，是否触发蜂鸣器。\n\nF1表示要触发；\n\n#### M204：设置PID参数\n\n设置挤出头温度控制的PID参数，\n\nSnnn表示对应的挤出头，无S参数表示使用当前挤出头；\n\nXnnn表示P参数；\n\nYnnn表示I参数；\n\nZnnn表示D参数；\n\n#### M220：设置速度\n\n设置3D打印机运行速度系数。\n\n命令参数为Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；\n\n3D打印机运行速度系数，是一个在25%到500%范围内变化的值。这个系数值在3D打印机运行过程中，与切片器给出的3D打印机运动速度基础值相乘，得到最终的3D打印机实际运动速度值。\n\nM220命令的输出，格式为：SpeedMultiply:100\n\n#### M221：设置流率\n\n设置3D打印机的流率系数（Flow rate）。\n\n命令参数为：Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；\n\n3D打印机流率系数，是在上位机切片软件通过耗材直径、喷头直径、层高以及3D打印速度等因素综合计算得到的E轴运动速度的基础上，叠加的一个E轴运动速度系数。简单地说，就是控制挤出头耗材挤出量的多少。这个系数可以在25%到500%范围内变化。\n\nM221命令的输出，格式为：FlowMultiply:100\n\n### T指令\n\n#### T0/T1/T2/T3 命令，选择不同的工具或挤出机\n\nT0 选择第一个挤出机；T1 选择第二个挤出机；T2 选择第三个挤出机；T3 选择第四个挤出机\n\n#### 节选注释\n\n```\nM106 P2 S204    //打开第三个风扇，PWM值为204\n;LAYER_CHANGE\n;Z:16.8\n;HEIGHT:0.199999\n;BEFORE_LAYER_CHANGE\n;16.8\nG92 E0    //设置喷头当前位置为零点\nM106 P2 S0    //关闭第二个风扇\n\nG1 E-.35 F2400  //挤出机回抽挤出0.35mm，速度设置为2400mm/min\n;WIPE_START\nG1 F9473.877    //速度设置为9473.877mm/min\nG1 X320.911 Y304.914 E-.11658    //直线插补，移动到（320.911，304.914）位置，并回抽0.11658\nG1 X321.066 Y304.753 E-.03342    //直线插补，移动到（321.066，304.753）位置，并回抽0.03342\n;WIPE_END\nEXCLUDE_OBJECT_END NAME=ksr_fdmtest_w4.stl_id_0_copy_0\n;_SET_FAN_SPEED_CHANGING_LAYER\nEXCLUDE_OBJECT_START NAME=ksr_fdmtest_w4.stl_id_0_copy_0\nG17    //选择XY平面\nG3 Z17 I.035 J-1.216 P1  F30000    //圆弧插补，Z轴位置为17mm，圆心坐标为（321.066+0.035，304.753-1.216）,P1表示为顺时针，速度为30000mm/min\nG1 X43.587 Y296.746 Z17    //直线插补，移动到（321.066，304.753，17）位置\nG1 Z16.8    //直线插补，移动到（321.066，304.753，16.8）位置\nG1 E.5 F2400    //挤出机挤出0.5mm，速度设置为2400mm/min\n```\n\n### 二、CNC数控编程\n\n#### 学习资料\n\n[数控机床编程入门【G-code】 | 学习软件编程 (hubwiz.com)](http://blog.hubwiz.com/2021/06/26/g-code-tutorial/)\n\n#### G00–快速定位\n\nG00命令以最大速度将机器从当前位置移动到指定的坐标。机器将同时移动所有轴，以便同时完成行程。 结果是直线移动到新的位置点。\n\n#### G01–线性插值\n\nG01 命令指示机器以设定速度直线移动。我们用X、Y和Z值指定最终位置，用F值指定速度。 CNC控制器计算（插值）要经过的中间点的坐标，以获得直线。\n\n#### G02–顺时针环形插值\n\nG02命令要求机器以圆形模式顺时针移动。它与 G01 命令的概念相同，在执行适当的加工过程时使用。除了 终点参数，在这里我们还需要定义旋转中心，或弧线起点与弧线中心点的距离。起点实际上是上一个命令的 终点或当前点。\n\n#### G03–逆时针环形插值\n\n与 G02 一样，G03 命令指示机器以圆形模式移动，区别在于G03是逆时针运动。所有其他功能和规则与 G02 命令相同。\n\n#### G20/G21 – 单位选择\n\nG20 和 G21 命令定义 G-code单位，英寸或毫米。G20 = 英寸；G21 = 毫米\n\n#### G17/G18/G18 – 工作面选择\n\nG17–XY平面；G18–XZ平面；G19–YZ平面\n\n#### G28–返回home\n\nG28命令要求机器将移动到其参考点或home位置。为了避免碰撞，我们可以包括一个带有 X、Y 和 Z 参数的 中间点。该工具将在转到参考点之前通过该点。\n\n#### G90/G91 – 定位模式\n\n使用 G90 和 G91 命令，我们告诉机器如何解析坐标值。G90为绝对模式，G91为相对模式。\n\n#### 其他代码\n\n```\n- M00–程序停止\n- M02–程序结束\n- M03–主轴打开–顺时针\n- M04–主轴打开–逆时针\n- M05–主轴停止\n- M06–工具更改\n- M08–启用Flood Colant\n- M09–禁用Flood Colant\n- M30 – 程序结束\n- M104–启动挤出加热\n- M109–等到挤出器到达T0\n- M140–开始底板加热\n- M190–等到底板到达T0\n- M106–设置风扇速度\n```\n\n#### 代码解释\n\n```\n%\nG21 G17 G90 F100                     //G21单位选择毫米，G17选择XY平面，G90选择绝对模式，F100代表转速\nM03 S1000                            //主轴打开-顺时针，速度为1000转\nG00 X5 Y5                 ; point B  //快速移动到（5，5）\nG01 X5 Y5 Z-1             ; point B  //直线插补移动到（5，5，-1）\nG01 X5 Y15 Z-1            ; point C  //直线插补移动到（5，15，-1）\nG02 X9 Y19 Z-1 I4 J0      ; point D  //顺时针环形插补移动到（9，19，-1），圆心为（9，15）\nG01 X23 Y19 Z-1           ; point E  //直线插补移动到（23，19，-1）\nG01 X32 Y5 Z-1            ; point F  //直线插补移动到（32，5，-1）\nG01 X21 Y5 Z-1            ; point G  //直线插补移动到（21，5，-1）\nG01 X21 Y8 Z-1            ; point H  //直线插补移动到（21，8，-1）\nG03 X19 Y10 Z-1 I-2 J0    ; point I  //逆时针环形插补移动到（19，10，-1），圆心为（19，8）\nG01 X13 Y10 Z-1           ; point J  //直线插补移动到（13，10，-1）\nG03 X11 Y8 Z-1 I0 J-2     ; point K  //逆时针环形插补移动到（11，8，-1），圆心为（13，8）\nG01 X11 Y5 Z-1            ; point L  //直线插补移动到（11，5，-1）\nG01 X5 Y5 Z-1             ; point B  //直线插补移动到（5，5，-1）\nG01 X5 Y5 Z0                         //直线插补移动到（5，5，0）\nG28  X0 Y0                           //返回零点（0，0，0）\nM05                                  //关闭主轴\nM30                                  //程序结束\n%\n```\n","slug":"Work No.4","published":1,"date":"2024-07-25T01:14:04.255Z","updated":"2024-07-25T06:40:17.998Z","_id":"clz0qu1nc0001rcfbcdhs3u4m","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Gcode学习\"><a href=\"#Gcode学习\" class=\"headerlink\" title=\"Gcode学习\"></a>Gcode学习</h1><h3 id=\"一、3D打印机编程\"><a href=\"#一、3D打印机编程\" class=\"headerlink\" title=\"一、3D打印机编程\"></a>一、3D打印机编程</h3><h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"https://www.klipper3d.org/zh/Overview.html\"><a href=\"https://www.klipper3d.org/zh/G-Codes.html\">G-Codes - Klipper 文档 (klipper3d.org)</a></a></p>\n<p><a href=\"https://reprap.org/wiki/G-code\">G-code - RepRap</a></p>\n<p><a href=\"https://blog.csdn.net/acktomas/article/details/125552309\">3D 打印机 G 代码命令：完整列表和教程_3d打印机g代码-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qlexcel/article/details/103466638\">3D打印机DIY之六——G代码命令_g代码m300-CSDN博客</a></p>\n<h3 id=\"G指令\"><a href=\"#G指令\" class=\"headerlink\" title=\"G指令\"></a>G指令</h3><h4 id=\"G0-G1-直线移动\"><a href=\"#G0-G1-直线移动\" class=\"headerlink\" title=\"G0&#x2F;G1: 直线移动\"></a>G0&#x2F;G1: 直线移动</h4><p>G0和G1命令完全等价，作用就是让喷头线性移动到一个特定的位置，使用时，不需要所有的参数全部存在，但至少要有一个参数。</p>\n<p>G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn &#x2F; G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn</p>\n<p>Xnnn表示X轴的移动位置；</p>\n<p>Ynnn表示Y轴的移动位置；</p>\n<p>Znnn表示Z轴的移动位置；</p>\n<p>Ennn表示E轴（挤出头步进电机）的移动位置；</p>\n<p>Fnnn表示移动速度，单位是毫米&#x2F;每分钟；</p>\n<p>Snnn表示是否检查限位开关，S0不检查，S1检查，缺省值是S0；</p>\n<h4 id=\"G28：复位\"><a href=\"#G28：复位\" class=\"headerlink\" title=\"G28：复位\"></a>G28：复位</h4><p>打印机复位命令。执行时会让3个轴依次往限位开关的方向运行，碰到限位开关后还会减速做一次1mm左右的往返运动，来保证复位的准确性。如果在命令后面加上坐标值，则只会复位坐标值对应的坐标轴。（坐标值的数字会被忽略）</p>\n<p>G28 X0 Y72.3</p>\n<p>只会复位x轴和y轴。</p>\n<h4 id=\"G29：Z轴高度三点测试\"><a href=\"#G29：Z轴高度三点测试\" class=\"headerlink\" title=\"G29：Z轴高度三点测试\"></a>G29：Z轴高度三点测试</h4><p>这条命令会测试打印平面上三个点的Z轴高度，并在串口上输出结果。参数为Snnn，表示对测试结果的处理方式。S1表示更新内存中的Z轴高度值（重置系统会丢失），S2表示更新内存以及EEPROM中的Z轴高度值（重置系统不会丢失）。</p>\n<p>一般来说，只有使用高位限位开关（也就是说，Z轴的限位开关位于Z轴坐标最大处），且在挤出头上附带有Z轴高度测试微动开关的机型，适合使用G29命令测试Z轴高度。其他机械配置的机型，不适合使用G29命令。G29命令由固件配置</p>\n<h4 id=\"G30：Z轴高度单点测试（单步）\"><a href=\"#G30：Z轴高度单点测试（单步）\" class=\"headerlink\" title=\"G30：Z轴高度单点测试（单步）\"></a>G30：Z轴高度单点测试（单步）</h4><p>这条命令作为一个完整Z轴高度测试过程的一步，测试打印平面上一个点的Z轴高度，并在串口上输出结果。这个完整的Z轴高度测试过程，通常是由3D打印机控制软件连续发出的，通过参数控制G30的执行状态。因此在手动工作方式下，G30命令只适合不带参数运行</p>\n<h4 id=\"G31：输出Z轴高度测试微动开关状态\"><a href=\"#G31：输出Z轴高度测试微动开关状态\" class=\"headerlink\" title=\"G31：输出Z轴高度测试微动开关状态\"></a>G31：输出Z轴高度测试微动开关状态</h4><p>执行后会输出当前Z轴高度测试微动开关的当前状态，其中L表示微动开关没有触发。如果是处于触发状态，这里会输出H。</p>\n<p>G29命令、G30命令、G31命令只进行Z轴的高度测试，并不进行自动调平。</p>\n<h4 id=\"G32：热床自动调平\"><a href=\"#G32：热床自动调平\" class=\"headerlink\" title=\"G32：热床自动调平\"></a>G32：热床自动调平</h4><p>这条命令在G29命令的基础上，不仅测试打印平面上三个点的Z轴高度，而且还会根据测试的结果，对3D打印机的机械参数进行调整，实现热床自动调平。G32命令使用的参数与G29命令是一致的：Snnn，表示测试结果的处理方式。S1表示更新内存中的相关参数值（重置系统会丢失），S2表示更新内存以及EEPROM中的相关参数值（重置系统不会丢失）。</p>\n<p>G32命令执行完成时，不仅Z轴高度参数发生了改变，而且还会根据3D打印机的硬件配置，对热床进行相应的调平处理。</p>\n<p>G32命令会在3D打印机内存中构建一个转换矩阵（Transformation matrix），让未来3D打印机所处理的所有三维空间位置，都先经过这个矩阵的变换，保证在Z&#x3D;0的情况下，正好与热床平面完全吻合</p>\n<h4 id=\"G4-暂停移动\"><a href=\"#G4-暂停移动\" class=\"headerlink\" title=\"G4: 暂停移动\"></a>G4: 暂停移动</h4><p>让喷头在当前位置停留一段时间。参数可以为：G4 Pnnn或G4 Snnn。Pnnn表示以毫秒为单位，Snnn表示以秒为单位。</p>\n<p>G4 P2000与G4 S2完全等价，都表示停顿2秒。</p>\n<p>在停顿过程中机器仍可以被控制，如挤出头温度。</p>\n<h4 id=\"G20-使用英寸作为单位\"><a href=\"#G20-使用英寸作为单位\" class=\"headerlink\" title=\"G20:使用英寸作为单位\"></a>G20:使用英寸作为单位</h4><p>执行这条命令后，后面的命令都以英寸作为单位。</p>\n<h4 id=\"G21-使用毫米作为单位\"><a href=\"#G21-使用毫米作为单位\" class=\"headerlink\" title=\"G21: 使用毫米作为单位\"></a>G21: 使用毫米作为单位</h4><p>执行这条命令后，后面的命令都以毫米作为单位。</p>\n<h4 id=\"G90-G91：设置坐标模式\"><a href=\"#G90-G91：设置坐标模式\" class=\"headerlink\" title=\"G90&#x2F;G91：设置坐标模式\"></a>G90&#x2F;G91：设置坐标模式</h4><p>这两条命令用于设置当前坐标模式为绝对坐标模式(G90)或者相对坐标模式(G91)。没有参数。未设置时缺省值是绝对坐标模式</p>\n<h4 id=\"G92-设置当前位置为某个坐标值\"><a href=\"#G92-设置当前位置为某个坐标值\" class=\"headerlink\" title=\"G92:设置当前位置为某个坐标值\"></a>G92:设置当前位置为某个坐标值</h4><p>把当前位置设定为某个坐标值，可以用来设置零点，如果参数为空表示把当前位置设置为所有轴的的零点。</p>\n<p>如：G92 X10 E90    ;表示把当前位置设置为x&#x3D;10，喷头坐标&#x3D;90</p>\n<p>再如：G92 E0       ；表示把当前喷头坐标设置为0</p>\n<h4 id=\"G94-G95-进给速率单位\"><a href=\"#G94-G95-进给速率单位\" class=\"headerlink\" title=\"G94&#x2F;G95:进给速率单位\"></a>G94&#x2F;G95:进给速率单位</h4><p>使用了G94指令之后，所有的进给都是以mm&#x2F;min为单位，即F100指刀具每分钟移动100毫米（默认的）</p>\n<p>使用了G95指令之后，所有的进给都是以mm&#x2F;r为单位，即F100指主轴每转一转，刀具移动100毫米</p>\n<h4 id=\"G17-G18-G19：选择加工平面\"><a href=\"#G17-G18-G19：选择加工平面\" class=\"headerlink\" title=\"G17&#x2F;G18&#x2F;G19：选择加工平面\"></a>G17&#x2F;G18&#x2F;G19：选择加工平面</h4><p>G17–XY平面；</p>\n<p>G18–XZ平面；</p>\n<p>G19–YZ平面；</p>\n<h3 id=\"M指令\"><a href=\"#M指令\" class=\"headerlink\" title=\"M指令\"></a>M指令</h3><h4 id=\"M0-打印机停止\"><a href=\"#M0-打印机停止\" class=\"headerlink\" title=\"M0:打印机停止\"></a>M0:打印机停止</h4><p>打印机会终止任何动作，然后关机。所有的电机和加热器都会被关掉，这个时候只能通过reset按钮来重启控制器。</p>\n<h4 id=\"M1-打印机休眠\"><a href=\"#M1-打印机休眠\" class=\"headerlink\" title=\"M1: 打印机休眠\"></a>M1: 打印机休眠</h4><p>打印机会终止任何动作，然后休眠。所有的马达和加热器都会被关掉，但是接收到G或M命令时，打印机可以被唤醒并进入工作状态。</p>\n<h4 id=\"M17-启动所有步进电机\"><a href=\"#M17-启动所有步进电机\" class=\"headerlink\" title=\"M17:启动所有步进电机\"></a>M17:启动所有步进电机</h4><h4 id=\"M18-关闭所有步进电机\"><a href=\"#M18-关闭所有步进电机\" class=\"headerlink\" title=\"M18:关闭所有步进电机\"></a>M18:关闭所有步进电机</h4><h4 id=\"M20-读取SD卡根目录中的文件\"><a href=\"#M20-读取SD卡根目录中的文件\" class=\"headerlink\" title=\"M20:读取SD卡根目录中的文件\"></a>M20:读取SD卡根目录中的文件</h4><p>读取SD卡根目录的文件，并通过串口输出文件名。</p>\n<h4 id=\"M21-初始化SD卡\"><a href=\"#M21-初始化SD卡\" class=\"headerlink\" title=\"M21:初始化SD卡\"></a>M21:初始化SD卡</h4><p>初始化SD卡。如果在机器通电时插入SD卡，会默认初始化SD卡。开始其他SD卡功能时，SD卡一定要先初始化。本命令相当于文件系统中执行Mount动作。</p>\n<h4 id=\"M22-卸载SD卡\"><a href=\"#M22-卸载SD卡\" class=\"headerlink\" title=\"M22:卸载SD卡\"></a>M22:卸载SD卡</h4><p>卸载SD卡，也就是执行Unmount动作。没有相关的参数。</p>\n<h4 id=\"M23-选择SD卡中的文件\"><a href=\"#M23-选择SD卡中的文件\" class=\"headerlink\" title=\"M23:选择SD卡中的文件\"></a>M23:选择SD卡中的文件</h4><p>选择一个SD卡上的文件。文件选择之后，可以执行打印、删除等动作。</p>\n<p>如：M23 filename.gcode   ;选中filename.gcode文件</p>\n<h4 id=\"M24-开始打印SD卡中选中的文件\"><a href=\"#M24-开始打印SD卡中选中的文件\" class=\"headerlink\" title=\"M24:开始打印SD卡中选中的文件\"></a>M24:开始打印SD卡中选中的文件</h4><p>开始打印通过M23命令选中的文件。</p>\n<h4 id=\"M25-暂停SD卡打印\"><a href=\"#M25-暂停SD卡打印\" class=\"headerlink\" title=\"M25:暂停SD卡打印\"></a>M25:暂停SD卡打印</h4><p>暂停打印通过M23命令选定的文件。</p>\n<h4 id=\"M27-报告SD卡打印进度\"><a href=\"#M27-报告SD卡打印进度\" class=\"headerlink\" title=\"M27:报告SD卡打印进度\"></a>M27:报告SD卡打印进度</h4><p>获取SD卡打印进度。没有相关参数。</p>\n<p>M27命令的输出，格式为：SD printing byte 11518&#x2F;1127578</p>\n<p>这条命令供上位机获取当前的3D打印进度信息，用于显示在电脑界面上。</p>\n<h4 id=\"M28-开始往SD卡文件中写入数据\"><a href=\"#M28-开始往SD卡文件中写入数据\" class=\"headerlink\" title=\"M28:开始往SD卡文件中写入数据\"></a>M28:开始往SD卡文件中写入数据</h4><p>接收到此命令后，后续接收到的命令（除了M29）都会被当成数据写入该文件。</p>\n<p>命令后面会跟着文件名，如果文件不存在则会被创建，如果存在则会被覆盖。接收到这条命令后，后续接收到的命令都会被写入该文件中，直到接收到M29命令。如：M28 filename.gcode  </p>\n<h4 id=\"M29-停止往SD卡文件中写入数据\"><a href=\"#M29-停止往SD卡文件中写入数据\" class=\"headerlink\" title=\"M29:停止往SD卡文件中写入数据\"></a>M29:停止往SD卡文件中写入数据</h4><p>接收到此命令后，后续接收到的命令要开始正常执行。</p>\n<h4 id=\"M30-删除SD卡中的文件\"><a href=\"#M30-删除SD卡中的文件\" class=\"headerlink\" title=\"M30:删除SD卡中的文件\"></a>M30:删除SD卡中的文件</h4><p>如：M30 filename.gcode     ;删除filename.gcode文件</p>\n<h4 id=\"M32：创建子目录\"><a href=\"#M32：创建子目录\" class=\"headerlink\" title=\"M32：创建子目录\"></a>M32：创建子目录</h4><p>在SD卡上创建一个子目录。参数为：filename，表示待创建的子目录（包含目录名，以&#x2F;分隔）；</p>\n<h4 id=\"M82-M83：设置挤出头步进电机坐标模式\"><a href=\"#M82-M83：设置挤出头步进电机坐标模式\" class=\"headerlink\" title=\"M82&#x2F;M83：设置挤出头步进电机坐标模式\"></a>M82&#x2F;M83：设置挤出头步进电机坐标模式</h4><p>与G90&#x2F;G91命令类似，这两条命令用于设置挤出头当前坐标模式为绝对坐标模式(M82)或者相对坐标模式(M83)。没有参数。未设置时缺省值是绝对坐标模式。需要注意的是，G90&#x2F;G91设置的坐标模式，同时对XYZE四个轴起作用，但M82&#x2F;M83设置的坐标模式，只对E轴（挤出头步进电机）起作用。</p>\n<h4 id=\"M84：设置步进电机自动关闭时间\"><a href=\"#M84：设置步进电机自动关闭时间\" class=\"headerlink\" title=\"M84：设置步进电机自动关闭时间\"></a>M84：设置步进电机自动关闭时间</h4><p>当3D打印机一段时间没有接收到步进电机运动指令之后，3D打印机（为了节能）会自动关闭步进电机。使用M84指令，可以设置这个自动关闭步进电机的时间。</p>\n<p>Snnn，表示步进电机关闭的时间，以秒为单位。</p>\n<p>如果使用M85时没有指定S参数，或者使用了S0参数，则代表取消3D打印机自动关闭功能，挤出头、热床等在工作完成之后，一直会处于当前状态，而不会被自动关闭。</p>\n<h4 id=\"M73：获取当前打印进度\"><a href=\"#M73：获取当前打印进度\" class=\"headerlink\" title=\"M73：获取当前打印进度\"></a>M73：获取当前打印进度</h4><p>告诉固件当前的构建进度百分比。预计这台机器会在显示屏上显示出来。如果百分比恰好为0，则向主机发送“构建开始”通知。如果百分比恰好为100，则向主机发送“构建结束”通知。</p>\n<h4 id=\"M105-获取当前温度（单位：℃）\"><a href=\"#M105-获取当前温度（单位：℃）\" class=\"headerlink\" title=\"M105: 获取当前温度（单位：℃）\"></a>M105: 获取当前温度（单位：℃）</h4><p>获取当前温度值，包括挤出头和热床的温度。</p>\n<p>X，表示输出ADC测量的原始值；</p>\n<p>M105命令的输出，格式为：T:18.97 &#x2F;0 B:18.75 &#x2F;0 B@:0 @:0</p>\n<p>T:之后的部分，代表挤出头的当前温度&#x2F;目标温度；</p>\n<p>B:之后的部分代表热床的当前温度&#x2F;目标温度。</p>\n<p>在PID温度控制模式下，B@:后面的数字代表热床当前的输出强度，是一个0<del>255的值，@:后面的数字，代表挤出头当前的输出强度，也是一个0</del>255的值。例子中，挤出头、热床都处于关闭状态，所以这个位置的值都是0。</p>\n<h4 id=\"M104-设置挤出机（喷头）温度\"><a href=\"#M104-设置挤出机（喷头）温度\" class=\"headerlink\" title=\"M104:设置挤出机（喷头）温度\"></a>M104:设置挤出机（喷头）温度</h4><p>设置挤出头的目标温度。执行这条命令后，不需要等待达到这个温度，控制板继续执行下一条G-code语句。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Tnnn，表示对应的挤出头；</p>\n<p>P，表示要等待前面的指令完成之后，再开始设置挤出头温度；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。F1表示要触发；</p>\n<p>如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。</p>\n<p>如：M104 S190         ;将挤出机的温度设置为190度 </p>\n<h4 id=\"M106-打开风扇\"><a href=\"#M106-打开风扇\" class=\"headerlink\" title=\"M106: 打开风扇\"></a>M106: 打开风扇</h4><p>如：M106 S127    ;打开风扇（半速）。</p>\n<p>‘S’表示 PWM值 (0-255). 可简单理解为：风扇有0-255级强度可选，其中 M106 S0 意味着风扇将被关掉。</p>\n<p>P表示风扇的数目，P0是第一个风扇，P1是第二个风扇</p>\n<h4 id=\"M109-等待挤出头加热达到目标温度\"><a href=\"#M109-等待挤出头加热达到目标温度\" class=\"headerlink\" title=\"M109: 等待挤出头加热达到目标温度\"></a>M109: 等待挤出头加热达到目标温度</h4><p>设置挤出头的目标温度，并等待达到这个温度。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Tnnn，表示对应的挤出头；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<p>如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。如： M109 S185      ;等待挤出头加热到185度</p>\n<h4 id=\"M114-获取挤出头当前位置\"><a href=\"#M114-获取挤出头当前位置\" class=\"headerlink\" title=\"M114: 获取挤出头当前位置\"></a>M114: 获取挤出头当前位置</h4><p>输出挤出头当前位置。没有相关的参数。</p>\n<p>M114命令的输出，格式为：</p>\n<p>M114 X:20.00 Y:30.00 Z:10.000 E:0.0000</p>\n<h4 id=\"M115-获取3D打印机信息\"><a href=\"#M115-获取3D打印机信息\" class=\"headerlink\" title=\"M115: 获取3D打印机信息\"></a>M115: 获取3D打印机信息</h4><p>输出3D打印机信息。没有相关的参数。</p>\n<p>M115命令的输出，格式为：FIRMWARE_NAME:Repetier_0.92.3FIRMWARE_URL:…Printedfilament:0.00mPrintingtime:0days0hours0minSpeedMultiply:100FlowMultiply:100</p>\n<p>第一行是固件的版本信息，很长，没有列完整。第二行是已经打印了多少米耗材，打印时间是几天几小时几分钟。第三行是速度系数，参考M220命令。第四行是流率系数，参考M221命令。</p>\n<h4 id=\"M140-设置热床目标温度\"><a href=\"#M140-设置热床目标温度\" class=\"headerlink\" title=\"M140 设置热床目标温度\"></a>M140 设置热床目标温度</h4><p>设置热床的目标温度。执行这条命令后，不需要等待达到这个温度，立即开始执行下一条G-code语句。</p>\n<p>Snnn表示目标温度；</p>\n<p>Fnnn表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<h4 id=\"M141-设置构建平台的温度\"><a href=\"#M141-设置构建平台的温度\" class=\"headerlink\" title=\"M141:设置构建平台的温度\"></a>M141:设置构建平台的温度</h4><p>可能用于特定的温控策略或多热床系统</p>\n<p>M141 S60将加热床设置为60摄氏度</p>\n<h4 id=\"M190-等待热床加热达到目标温度\"><a href=\"#M190-等待热床加热达到目标温度\" class=\"headerlink\" title=\"M190: 等待热床加热达到目标温度\"></a>M190: 等待热床加热达到目标温度</h4><p>设置热床的目标温度，并等待达到这个温度。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<h4 id=\"M204：设置PID参数\"><a href=\"#M204：设置PID参数\" class=\"headerlink\" title=\"M204：设置PID参数\"></a>M204：设置PID参数</h4><p>设置挤出头温度控制的PID参数，</p>\n<p>Snnn表示对应的挤出头，无S参数表示使用当前挤出头；</p>\n<p>Xnnn表示P参数；</p>\n<p>Ynnn表示I参数；</p>\n<p>Znnn表示D参数；</p>\n<h4 id=\"M220：设置速度\"><a href=\"#M220：设置速度\" class=\"headerlink\" title=\"M220：设置速度\"></a>M220：设置速度</h4><p>设置3D打印机运行速度系数。</p>\n<p>命令参数为Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；</p>\n<p>3D打印机运行速度系数，是一个在25%到500%范围内变化的值。这个系数值在3D打印机运行过程中，与切片器给出的3D打印机运动速度基础值相乘，得到最终的3D打印机实际运动速度值。</p>\n<p>M220命令的输出，格式为：SpeedMultiply:100</p>\n<h4 id=\"M221：设置流率\"><a href=\"#M221：设置流率\" class=\"headerlink\" title=\"M221：设置流率\"></a>M221：设置流率</h4><p>设置3D打印机的流率系数（Flow rate）。</p>\n<p>命令参数为：Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；</p>\n<p>3D打印机流率系数，是在上位机切片软件通过耗材直径、喷头直径、层高以及3D打印速度等因素综合计算得到的E轴运动速度的基础上，叠加的一个E轴运动速度系数。简单地说，就是控制挤出头耗材挤出量的多少。这个系数可以在25%到500%范围内变化。</p>\n<p>M221命令的输出，格式为：FlowMultiply:100</p>\n<h3 id=\"T指令\"><a href=\"#T指令\" class=\"headerlink\" title=\"T指令\"></a>T指令</h3><h4 id=\"T0-T1-T2-T3-命令，选择不同的工具或挤出机\"><a href=\"#T0-T1-T2-T3-命令，选择不同的工具或挤出机\" class=\"headerlink\" title=\"T0&#x2F;T1&#x2F;T2&#x2F;T3 命令，选择不同的工具或挤出机\"></a>T0&#x2F;T1&#x2F;T2&#x2F;T3 命令，选择不同的工具或挤出机</h4><p>T0 选择第一个挤出机；T1 选择第二个挤出机；T2 选择第三个挤出机；T3 选择第四个挤出机</p>\n<h4 id=\"节选注释\"><a href=\"#节选注释\" class=\"headerlink\" title=\"节选注释\"></a>节选注释</h4><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">M106 P2 S204    //打开第三个风扇，PWM值为<span class=\"hljs-number\">204</span><br><span class=\"hljs-comment\">;LAYER_CHANGE</span><br><span class=\"hljs-comment\">;Z:16.8</span><br><span class=\"hljs-comment\">;HEIGHT:0.199999</span><br><span class=\"hljs-comment\">;BEFORE_LAYER_CHANGE</span><br><span class=\"hljs-comment\">;16.8</span><br>G92 E0    //设置喷头当前位置为零点<br>M106 P2 S0    //关闭第二个风扇<br><br>G1 E-.<span class=\"hljs-number\">35</span> F2400  //挤出机回抽挤出<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">35m</span>m，速度设置为<span class=\"hljs-number\">2400m</span>m/min<br><span class=\"hljs-comment\">;WIPE_START</span><br>G1 F<span class=\"hljs-number\">9473.877</span>    //速度设置为<span class=\"hljs-number\">9473</span>.<span class=\"hljs-number\">877m</span>m/min<br>G1 X<span class=\"hljs-number\">320.911</span> Y<span class=\"hljs-number\">304.914</span> E-.<span class=\"hljs-number\">11658</span>    //直线插补，移动到（<span class=\"hljs-number\">320.911</span>，<span class=\"hljs-number\">304.914</span>）位置，并回抽<span class=\"hljs-number\">0.11658</span><br>G1 X<span class=\"hljs-number\">321.066</span> Y<span class=\"hljs-number\">304.753</span> E-.<span class=\"hljs-number\">03342</span>    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>）位置，并回抽<span class=\"hljs-number\">0.03342</span><br><span class=\"hljs-comment\">;WIPE_END</span><br>EXCLUDE_OBJECT_END NAME=ksr_fdmtest_w4.stl_id_0_copy_0<br><span class=\"hljs-comment\">;_SET_FAN_SPEED_CHANGING_LAYER</span><br>EXCLUDE_OBJECT_START NAME=ksr_fdmtest_w4.stl_id_0_copy_0<br>G17    //选择XY平面<br>G3 Z17 I.<span class=\"hljs-number\">035</span> J-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">216</span> P1  F30000    //圆弧插补，Z轴位置为<span class=\"hljs-number\">17m</span>m，圆心坐标为（<span class=\"hljs-number\">321.066</span>+<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">035，304</span>.<span class=\"hljs-number\">753-1.216</span>）,P1表示为顺时针，速度为<span class=\"hljs-number\">30000m</span>m/min<br>G1 X43.<span class=\"hljs-number\">587</span> Y<span class=\"hljs-number\">296.746</span> Z17    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>，<span class=\"hljs-number\">17</span>）位置<br>G1 Z16.<span class=\"hljs-number\">8</span>    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>，<span class=\"hljs-number\">16</span>.<span class=\"hljs-number\">8</span>）位置<br>G1 E.<span class=\"hljs-number\">5</span> F2400    //挤出机挤出<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5m</span>m，速度设置为<span class=\"hljs-number\">2400m</span>m/min<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"二、CNC数控编程\"><a href=\"#二、CNC数控编程\" class=\"headerlink\" title=\"二、CNC数控编程\"></a>二、CNC数控编程</h3><h4 id=\"学习资料-1\"><a href=\"#学习资料-1\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h4><p><a href=\"http://blog.hubwiz.com/2021/06/26/g-code-tutorial/\">数控机床编程入门【G-code】 | 学习软件编程 (hubwiz.com)</a></p>\n<h4 id=\"G00–快速定位\"><a href=\"#G00–快速定位\" class=\"headerlink\" title=\"G00–快速定位\"></a>G00–快速定位</h4><p>G00命令以最大速度将机器从当前位置移动到指定的坐标。机器将同时移动所有轴，以便同时完成行程。 结果是直线移动到新的位置点。</p>\n<h4 id=\"G01–线性插值\"><a href=\"#G01–线性插值\" class=\"headerlink\" title=\"G01–线性插值\"></a>G01–线性插值</h4><p>G01 命令指示机器以设定速度直线移动。我们用X、Y和Z值指定最终位置，用F值指定速度。 CNC控制器计算（插值）要经过的中间点的坐标，以获得直线。</p>\n<h4 id=\"G02–顺时针环形插值\"><a href=\"#G02–顺时针环形插值\" class=\"headerlink\" title=\"G02–顺时针环形插值\"></a>G02–顺时针环形插值</h4><p>G02命令要求机器以圆形模式顺时针移动。它与 G01 命令的概念相同，在执行适当的加工过程时使用。除了 终点参数，在这里我们还需要定义旋转中心，或弧线起点与弧线中心点的距离。起点实际上是上一个命令的 终点或当前点。</p>\n<h4 id=\"G03–逆时针环形插值\"><a href=\"#G03–逆时针环形插值\" class=\"headerlink\" title=\"G03–逆时针环形插值\"></a>G03–逆时针环形插值</h4><p>与 G02 一样，G03 命令指示机器以圆形模式移动，区别在于G03是逆时针运动。所有其他功能和规则与 G02 命令相同。</p>\n<h4 id=\"G20-G21-–-单位选择\"><a href=\"#G20-G21-–-单位选择\" class=\"headerlink\" title=\"G20&#x2F;G21 – 单位选择\"></a>G20&#x2F;G21 – 单位选择</h4><p>G20 和 G21 命令定义 G-code单位，英寸或毫米。G20 &#x3D; 英寸；G21 &#x3D; 毫米</p>\n<h4 id=\"G17-G18-G18-–-工作面选择\"><a href=\"#G17-G18-G18-–-工作面选择\" class=\"headerlink\" title=\"G17&#x2F;G18&#x2F;G18 – 工作面选择\"></a>G17&#x2F;G18&#x2F;G18 – 工作面选择</h4><p>G17–XY平面；G18–XZ平面；G19–YZ平面</p>\n<h4 id=\"G28–返回home\"><a href=\"#G28–返回home\" class=\"headerlink\" title=\"G28–返回home\"></a>G28–返回home</h4><p>G28命令要求机器将移动到其参考点或home位置。为了避免碰撞，我们可以包括一个带有 X、Y 和 Z 参数的 中间点。该工具将在转到参考点之前通过该点。</p>\n<h4 id=\"G90-G91-–-定位模式\"><a href=\"#G90-G91-–-定位模式\" class=\"headerlink\" title=\"G90&#x2F;G91 – 定位模式\"></a>G90&#x2F;G91 – 定位模式</h4><p>使用 G90 和 G91 命令，我们告诉机器如何解析坐标值。G90为绝对模式，G91为相对模式。</p>\n<h4 id=\"其他代码\"><a href=\"#其他代码\" class=\"headerlink\" title=\"其他代码\"></a>其他代码</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">- </span>M00–程序停止<br><span class=\"hljs-bullet\">- </span>M02–程序结束<br><span class=\"hljs-bullet\">- </span>M03–主轴打开–顺时针<br><span class=\"hljs-bullet\">- </span>M04–主轴打开–逆时针<br><span class=\"hljs-bullet\">- </span>M05–主轴停止<br><span class=\"hljs-bullet\">- </span>M06–工具更改<br><span class=\"hljs-bullet\">- </span>M08–启用Flood Colant<br><span class=\"hljs-bullet\">- </span>M09–禁用Flood Colant<br><span class=\"hljs-bullet\">- </span>M30 – 程序结束<br><span class=\"hljs-bullet\">- </span>M104–启动挤出加热<br><span class=\"hljs-bullet\">- </span>M109–等到挤出器到达T0<br><span class=\"hljs-bullet\">- </span>M140–开始底板加热<br><span class=\"hljs-bullet\">- </span>M190–等到底板到达T0<br><span class=\"hljs-bullet\">- </span>M106–设置风扇速度<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h4><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">%<br>G21 G17 G90 F100                     <span class=\"hljs-comment\">//G21单位选择毫米，G17选择XY平面，G90选择绝对模式，F100代表转速</span><br>M03 S1000                            <span class=\"hljs-comment\">//主轴打开-顺时针，速度为1000转</span><br>G00 X5 Y5                 ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//快速移动到（5，5）</span><br>G01 X5 Y5 Z<span class=\"hljs-number\">-1</span>             ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//直线插补移动到（5，5，-1）</span><br>G01 X5 Y15 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> C  <span class=\"hljs-comment\">//直线插补移动到（5，15，-1）</span><br>G02 X9 Y19 Z<span class=\"hljs-number\">-1</span> I4 J0      ; <span class=\"hljs-built_in\">point</span> D  <span class=\"hljs-comment\">//顺时针环形插补移动到（9，19，-1），圆心为（9，15）</span><br>G01 X23 Y19 Z<span class=\"hljs-number\">-1</span>           ; <span class=\"hljs-built_in\">point</span> E  <span class=\"hljs-comment\">//直线插补移动到（23，19，-1）</span><br>G01 X32 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> F  <span class=\"hljs-comment\">//直线插补移动到（32，5，-1）</span><br>G01 X21 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> G  <span class=\"hljs-comment\">//直线插补移动到（21，5，-1）</span><br>G01 X21 Y8 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> H  <span class=\"hljs-comment\">//直线插补移动到（21，8，-1）</span><br>G03 X19 Y10 Z<span class=\"hljs-number\">-1</span> I<span class=\"hljs-number\">-2</span> J0    ; <span class=\"hljs-built_in\">point</span> I  <span class=\"hljs-comment\">//逆时针环形插补移动到（19，10，-1），圆心为（19，8）</span><br>G01 X13 Y10 Z<span class=\"hljs-number\">-1</span>           ; <span class=\"hljs-built_in\">point</span> J  <span class=\"hljs-comment\">//直线插补移动到（13，10，-1）</span><br>G03 X11 Y8 Z<span class=\"hljs-number\">-1</span> I0 J<span class=\"hljs-number\">-2</span>     ; <span class=\"hljs-built_in\">point</span> K  <span class=\"hljs-comment\">//逆时针环形插补移动到（11，8，-1），圆心为（13，8）</span><br>G01 X11 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> L  <span class=\"hljs-comment\">//直线插补移动到（11，5，-1）</span><br>G01 X5 Y5 Z<span class=\"hljs-number\">-1</span>             ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//直线插补移动到（5，5，-1）</span><br>G01 X5 Y5 Z0                         <span class=\"hljs-comment\">//直线插补移动到（5，5，0）</span><br>G28  X0 Y0                           <span class=\"hljs-comment\">//返回零点（0，0，0）</span><br>M05                                  <span class=\"hljs-comment\">//关闭主轴</span><br>M30                                  <span class=\"hljs-comment\">//程序结束</span><br>%<br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Gcode学习\"><a href=\"#Gcode学习\" class=\"headerlink\" title=\"Gcode学习\"></a>Gcode学习</h1><h3 id=\"一、3D打印机编程\"><a href=\"#一、3D打印机编程\" class=\"headerlink\" title=\"一、3D打印机编程\"></a>一、3D打印机编程</h3><h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"https://www.klipper3d.org/zh/Overview.html\"><a href=\"https://www.klipper3d.org/zh/G-Codes.html\">G-Codes - Klipper 文档 (klipper3d.org)</a></a></p>\n<p><a href=\"https://reprap.org/wiki/G-code\">G-code - RepRap</a></p>\n<p><a href=\"https://blog.csdn.net/acktomas/article/details/125552309\">3D 打印机 G 代码命令：完整列表和教程_3d打印机g代码-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qlexcel/article/details/103466638\">3D打印机DIY之六——G代码命令_g代码m300-CSDN博客</a></p>\n<h3 id=\"G指令\"><a href=\"#G指令\" class=\"headerlink\" title=\"G指令\"></a>G指令</h3><h4 id=\"G0-G1-直线移动\"><a href=\"#G0-G1-直线移动\" class=\"headerlink\" title=\"G0&#x2F;G1: 直线移动\"></a>G0&#x2F;G1: 直线移动</h4><p>G0和G1命令完全等价，作用就是让喷头线性移动到一个特定的位置，使用时，不需要所有的参数全部存在，但至少要有一个参数。</p>\n<p>G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn &#x2F; G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn</p>\n<p>Xnnn表示X轴的移动位置；</p>\n<p>Ynnn表示Y轴的移动位置；</p>\n<p>Znnn表示Z轴的移动位置；</p>\n<p>Ennn表示E轴（挤出头步进电机）的移动位置；</p>\n<p>Fnnn表示移动速度，单位是毫米&#x2F;每分钟；</p>\n<p>Snnn表示是否检查限位开关，S0不检查，S1检查，缺省值是S0；</p>\n<h4 id=\"G28：复位\"><a href=\"#G28：复位\" class=\"headerlink\" title=\"G28：复位\"></a>G28：复位</h4><p>打印机复位命令。执行时会让3个轴依次往限位开关的方向运行，碰到限位开关后还会减速做一次1mm左右的往返运动，来保证复位的准确性。如果在命令后面加上坐标值，则只会复位坐标值对应的坐标轴。（坐标值的数字会被忽略）</p>\n<p>G28 X0 Y72.3</p>\n<p>只会复位x轴和y轴。</p>\n<h4 id=\"G29：Z轴高度三点测试\"><a href=\"#G29：Z轴高度三点测试\" class=\"headerlink\" title=\"G29：Z轴高度三点测试\"></a>G29：Z轴高度三点测试</h4><p>这条命令会测试打印平面上三个点的Z轴高度，并在串口上输出结果。参数为Snnn，表示对测试结果的处理方式。S1表示更新内存中的Z轴高度值（重置系统会丢失），S2表示更新内存以及EEPROM中的Z轴高度值（重置系统不会丢失）。</p>\n<p>一般来说，只有使用高位限位开关（也就是说，Z轴的限位开关位于Z轴坐标最大处），且在挤出头上附带有Z轴高度测试微动开关的机型，适合使用G29命令测试Z轴高度。其他机械配置的机型，不适合使用G29命令。G29命令由固件配置</p>\n<h4 id=\"G30：Z轴高度单点测试（单步）\"><a href=\"#G30：Z轴高度单点测试（单步）\" class=\"headerlink\" title=\"G30：Z轴高度单点测试（单步）\"></a>G30：Z轴高度单点测试（单步）</h4><p>这条命令作为一个完整Z轴高度测试过程的一步，测试打印平面上一个点的Z轴高度，并在串口上输出结果。这个完整的Z轴高度测试过程，通常是由3D打印机控制软件连续发出的，通过参数控制G30的执行状态。因此在手动工作方式下，G30命令只适合不带参数运行</p>\n<h4 id=\"G31：输出Z轴高度测试微动开关状态\"><a href=\"#G31：输出Z轴高度测试微动开关状态\" class=\"headerlink\" title=\"G31：输出Z轴高度测试微动开关状态\"></a>G31：输出Z轴高度测试微动开关状态</h4><p>执行后会输出当前Z轴高度测试微动开关的当前状态，其中L表示微动开关没有触发。如果是处于触发状态，这里会输出H。</p>\n<p>G29命令、G30命令、G31命令只进行Z轴的高度测试，并不进行自动调平。</p>\n<h4 id=\"G32：热床自动调平\"><a href=\"#G32：热床自动调平\" class=\"headerlink\" title=\"G32：热床自动调平\"></a>G32：热床自动调平</h4><p>这条命令在G29命令的基础上，不仅测试打印平面上三个点的Z轴高度，而且还会根据测试的结果，对3D打印机的机械参数进行调整，实现热床自动调平。G32命令使用的参数与G29命令是一致的：Snnn，表示测试结果的处理方式。S1表示更新内存中的相关参数值（重置系统会丢失），S2表示更新内存以及EEPROM中的相关参数值（重置系统不会丢失）。</p>\n<p>G32命令执行完成时，不仅Z轴高度参数发生了改变，而且还会根据3D打印机的硬件配置，对热床进行相应的调平处理。</p>\n<p>G32命令会在3D打印机内存中构建一个转换矩阵（Transformation matrix），让未来3D打印机所处理的所有三维空间位置，都先经过这个矩阵的变换，保证在Z&#x3D;0的情况下，正好与热床平面完全吻合</p>\n<h4 id=\"G4-暂停移动\"><a href=\"#G4-暂停移动\" class=\"headerlink\" title=\"G4: 暂停移动\"></a>G4: 暂停移动</h4><p>让喷头在当前位置停留一段时间。参数可以为：G4 Pnnn或G4 Snnn。Pnnn表示以毫秒为单位，Snnn表示以秒为单位。</p>\n<p>G4 P2000与G4 S2完全等价，都表示停顿2秒。</p>\n<p>在停顿过程中机器仍可以被控制，如挤出头温度。</p>\n<h4 id=\"G20-使用英寸作为单位\"><a href=\"#G20-使用英寸作为单位\" class=\"headerlink\" title=\"G20:使用英寸作为单位\"></a>G20:使用英寸作为单位</h4><p>执行这条命令后，后面的命令都以英寸作为单位。</p>\n<h4 id=\"G21-使用毫米作为单位\"><a href=\"#G21-使用毫米作为单位\" class=\"headerlink\" title=\"G21: 使用毫米作为单位\"></a>G21: 使用毫米作为单位</h4><p>执行这条命令后，后面的命令都以毫米作为单位。</p>\n<h4 id=\"G90-G91：设置坐标模式\"><a href=\"#G90-G91：设置坐标模式\" class=\"headerlink\" title=\"G90&#x2F;G91：设置坐标模式\"></a>G90&#x2F;G91：设置坐标模式</h4><p>这两条命令用于设置当前坐标模式为绝对坐标模式(G90)或者相对坐标模式(G91)。没有参数。未设置时缺省值是绝对坐标模式</p>\n<h4 id=\"G92-设置当前位置为某个坐标值\"><a href=\"#G92-设置当前位置为某个坐标值\" class=\"headerlink\" title=\"G92:设置当前位置为某个坐标值\"></a>G92:设置当前位置为某个坐标值</h4><p>把当前位置设定为某个坐标值，可以用来设置零点，如果参数为空表示把当前位置设置为所有轴的的零点。</p>\n<p>如：G92 X10 E90    ;表示把当前位置设置为x&#x3D;10，喷头坐标&#x3D;90</p>\n<p>再如：G92 E0       ；表示把当前喷头坐标设置为0</p>\n<h4 id=\"G94-G95-进给速率单位\"><a href=\"#G94-G95-进给速率单位\" class=\"headerlink\" title=\"G94&#x2F;G95:进给速率单位\"></a>G94&#x2F;G95:进给速率单位</h4><p>使用了G94指令之后，所有的进给都是以mm&#x2F;min为单位，即F100指刀具每分钟移动100毫米（默认的）</p>\n<p>使用了G95指令之后，所有的进给都是以mm&#x2F;r为单位，即F100指主轴每转一转，刀具移动100毫米</p>\n<h4 id=\"G17-G18-G19：选择加工平面\"><a href=\"#G17-G18-G19：选择加工平面\" class=\"headerlink\" title=\"G17&#x2F;G18&#x2F;G19：选择加工平面\"></a>G17&#x2F;G18&#x2F;G19：选择加工平面</h4><p>G17–XY平面；</p>\n<p>G18–XZ平面；</p>\n<p>G19–YZ平面；</p>\n<h3 id=\"M指令\"><a href=\"#M指令\" class=\"headerlink\" title=\"M指令\"></a>M指令</h3><h4 id=\"M0-打印机停止\"><a href=\"#M0-打印机停止\" class=\"headerlink\" title=\"M0:打印机停止\"></a>M0:打印机停止</h4><p>打印机会终止任何动作，然后关机。所有的电机和加热器都会被关掉，这个时候只能通过reset按钮来重启控制器。</p>\n<h4 id=\"M1-打印机休眠\"><a href=\"#M1-打印机休眠\" class=\"headerlink\" title=\"M1: 打印机休眠\"></a>M1: 打印机休眠</h4><p>打印机会终止任何动作，然后休眠。所有的马达和加热器都会被关掉，但是接收到G或M命令时，打印机可以被唤醒并进入工作状态。</p>\n<h4 id=\"M17-启动所有步进电机\"><a href=\"#M17-启动所有步进电机\" class=\"headerlink\" title=\"M17:启动所有步进电机\"></a>M17:启动所有步进电机</h4><h4 id=\"M18-关闭所有步进电机\"><a href=\"#M18-关闭所有步进电机\" class=\"headerlink\" title=\"M18:关闭所有步进电机\"></a>M18:关闭所有步进电机</h4><h4 id=\"M20-读取SD卡根目录中的文件\"><a href=\"#M20-读取SD卡根目录中的文件\" class=\"headerlink\" title=\"M20:读取SD卡根目录中的文件\"></a>M20:读取SD卡根目录中的文件</h4><p>读取SD卡根目录的文件，并通过串口输出文件名。</p>\n<h4 id=\"M21-初始化SD卡\"><a href=\"#M21-初始化SD卡\" class=\"headerlink\" title=\"M21:初始化SD卡\"></a>M21:初始化SD卡</h4><p>初始化SD卡。如果在机器通电时插入SD卡，会默认初始化SD卡。开始其他SD卡功能时，SD卡一定要先初始化。本命令相当于文件系统中执行Mount动作。</p>\n<h4 id=\"M22-卸载SD卡\"><a href=\"#M22-卸载SD卡\" class=\"headerlink\" title=\"M22:卸载SD卡\"></a>M22:卸载SD卡</h4><p>卸载SD卡，也就是执行Unmount动作。没有相关的参数。</p>\n<h4 id=\"M23-选择SD卡中的文件\"><a href=\"#M23-选择SD卡中的文件\" class=\"headerlink\" title=\"M23:选择SD卡中的文件\"></a>M23:选择SD卡中的文件</h4><p>选择一个SD卡上的文件。文件选择之后，可以执行打印、删除等动作。</p>\n<p>如：M23 filename.gcode   ;选中filename.gcode文件</p>\n<h4 id=\"M24-开始打印SD卡中选中的文件\"><a href=\"#M24-开始打印SD卡中选中的文件\" class=\"headerlink\" title=\"M24:开始打印SD卡中选中的文件\"></a>M24:开始打印SD卡中选中的文件</h4><p>开始打印通过M23命令选中的文件。</p>\n<h4 id=\"M25-暂停SD卡打印\"><a href=\"#M25-暂停SD卡打印\" class=\"headerlink\" title=\"M25:暂停SD卡打印\"></a>M25:暂停SD卡打印</h4><p>暂停打印通过M23命令选定的文件。</p>\n<h4 id=\"M27-报告SD卡打印进度\"><a href=\"#M27-报告SD卡打印进度\" class=\"headerlink\" title=\"M27:报告SD卡打印进度\"></a>M27:报告SD卡打印进度</h4><p>获取SD卡打印进度。没有相关参数。</p>\n<p>M27命令的输出，格式为：SD printing byte 11518&#x2F;1127578</p>\n<p>这条命令供上位机获取当前的3D打印进度信息，用于显示在电脑界面上。</p>\n<h4 id=\"M28-开始往SD卡文件中写入数据\"><a href=\"#M28-开始往SD卡文件中写入数据\" class=\"headerlink\" title=\"M28:开始往SD卡文件中写入数据\"></a>M28:开始往SD卡文件中写入数据</h4><p>接收到此命令后，后续接收到的命令（除了M29）都会被当成数据写入该文件。</p>\n<p>命令后面会跟着文件名，如果文件不存在则会被创建，如果存在则会被覆盖。接收到这条命令后，后续接收到的命令都会被写入该文件中，直到接收到M29命令。如：M28 filename.gcode  </p>\n<h4 id=\"M29-停止往SD卡文件中写入数据\"><a href=\"#M29-停止往SD卡文件中写入数据\" class=\"headerlink\" title=\"M29:停止往SD卡文件中写入数据\"></a>M29:停止往SD卡文件中写入数据</h4><p>接收到此命令后，后续接收到的命令要开始正常执行。</p>\n<h4 id=\"M30-删除SD卡中的文件\"><a href=\"#M30-删除SD卡中的文件\" class=\"headerlink\" title=\"M30:删除SD卡中的文件\"></a>M30:删除SD卡中的文件</h4><p>如：M30 filename.gcode     ;删除filename.gcode文件</p>\n<h4 id=\"M32：创建子目录\"><a href=\"#M32：创建子目录\" class=\"headerlink\" title=\"M32：创建子目录\"></a>M32：创建子目录</h4><p>在SD卡上创建一个子目录。参数为：filename，表示待创建的子目录（包含目录名，以&#x2F;分隔）；</p>\n<h4 id=\"M82-M83：设置挤出头步进电机坐标模式\"><a href=\"#M82-M83：设置挤出头步进电机坐标模式\" class=\"headerlink\" title=\"M82&#x2F;M83：设置挤出头步进电机坐标模式\"></a>M82&#x2F;M83：设置挤出头步进电机坐标模式</h4><p>与G90&#x2F;G91命令类似，这两条命令用于设置挤出头当前坐标模式为绝对坐标模式(M82)或者相对坐标模式(M83)。没有参数。未设置时缺省值是绝对坐标模式。需要注意的是，G90&#x2F;G91设置的坐标模式，同时对XYZE四个轴起作用，但M82&#x2F;M83设置的坐标模式，只对E轴（挤出头步进电机）起作用。</p>\n<h4 id=\"M84：设置步进电机自动关闭时间\"><a href=\"#M84：设置步进电机自动关闭时间\" class=\"headerlink\" title=\"M84：设置步进电机自动关闭时间\"></a>M84：设置步进电机自动关闭时间</h4><p>当3D打印机一段时间没有接收到步进电机运动指令之后，3D打印机（为了节能）会自动关闭步进电机。使用M84指令，可以设置这个自动关闭步进电机的时间。</p>\n<p>Snnn，表示步进电机关闭的时间，以秒为单位。</p>\n<p>如果使用M85时没有指定S参数，或者使用了S0参数，则代表取消3D打印机自动关闭功能，挤出头、热床等在工作完成之后，一直会处于当前状态，而不会被自动关闭。</p>\n<h4 id=\"M73：获取当前打印进度\"><a href=\"#M73：获取当前打印进度\" class=\"headerlink\" title=\"M73：获取当前打印进度\"></a>M73：获取当前打印进度</h4><p>告诉固件当前的构建进度百分比。预计这台机器会在显示屏上显示出来。如果百分比恰好为0，则向主机发送“构建开始”通知。如果百分比恰好为100，则向主机发送“构建结束”通知。</p>\n<h4 id=\"M105-获取当前温度（单位：℃）\"><a href=\"#M105-获取当前温度（单位：℃）\" class=\"headerlink\" title=\"M105: 获取当前温度（单位：℃）\"></a>M105: 获取当前温度（单位：℃）</h4><p>获取当前温度值，包括挤出头和热床的温度。</p>\n<p>X，表示输出ADC测量的原始值；</p>\n<p>M105命令的输出，格式为：T:18.97 &#x2F;0 B:18.75 &#x2F;0 B@:0 @:0</p>\n<p>T:之后的部分，代表挤出头的当前温度&#x2F;目标温度；</p>\n<p>B:之后的部分代表热床的当前温度&#x2F;目标温度。</p>\n<p>在PID温度控制模式下，B@:后面的数字代表热床当前的输出强度，是一个0<del>255的值，@:后面的数字，代表挤出头当前的输出强度，也是一个0</del>255的值。例子中，挤出头、热床都处于关闭状态，所以这个位置的值都是0。</p>\n<h4 id=\"M104-设置挤出机（喷头）温度\"><a href=\"#M104-设置挤出机（喷头）温度\" class=\"headerlink\" title=\"M104:设置挤出机（喷头）温度\"></a>M104:设置挤出机（喷头）温度</h4><p>设置挤出头的目标温度。执行这条命令后，不需要等待达到这个温度，控制板继续执行下一条G-code语句。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Tnnn，表示对应的挤出头；</p>\n<p>P，表示要等待前面的指令完成之后，再开始设置挤出头温度；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。F1表示要触发；</p>\n<p>如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。</p>\n<p>如：M104 S190         ;将挤出机的温度设置为190度 </p>\n<h4 id=\"M106-打开风扇\"><a href=\"#M106-打开风扇\" class=\"headerlink\" title=\"M106: 打开风扇\"></a>M106: 打开风扇</h4><p>如：M106 S127    ;打开风扇（半速）。</p>\n<p>‘S’表示 PWM值 (0-255). 可简单理解为：风扇有0-255级强度可选，其中 M106 S0 意味着风扇将被关掉。</p>\n<p>P表示风扇的数目，P0是第一个风扇，P1是第二个风扇</p>\n<h4 id=\"M109-等待挤出头加热达到目标温度\"><a href=\"#M109-等待挤出头加热达到目标温度\" class=\"headerlink\" title=\"M109: 等待挤出头加热达到目标温度\"></a>M109: 等待挤出头加热达到目标温度</h4><p>设置挤出头的目标温度，并等待达到这个温度。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Tnnn，表示对应的挤出头；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<p>如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。如： M109 S185      ;等待挤出头加热到185度</p>\n<h4 id=\"M114-获取挤出头当前位置\"><a href=\"#M114-获取挤出头当前位置\" class=\"headerlink\" title=\"M114: 获取挤出头当前位置\"></a>M114: 获取挤出头当前位置</h4><p>输出挤出头当前位置。没有相关的参数。</p>\n<p>M114命令的输出，格式为：</p>\n<p>M114 X:20.00 Y:30.00 Z:10.000 E:0.0000</p>\n<h4 id=\"M115-获取3D打印机信息\"><a href=\"#M115-获取3D打印机信息\" class=\"headerlink\" title=\"M115: 获取3D打印机信息\"></a>M115: 获取3D打印机信息</h4><p>输出3D打印机信息。没有相关的参数。</p>\n<p>M115命令的输出，格式为：FIRMWARE_NAME:Repetier_0.92.3FIRMWARE_URL:…Printedfilament:0.00mPrintingtime:0days0hours0minSpeedMultiply:100FlowMultiply:100</p>\n<p>第一行是固件的版本信息，很长，没有列完整。第二行是已经打印了多少米耗材，打印时间是几天几小时几分钟。第三行是速度系数，参考M220命令。第四行是流率系数，参考M221命令。</p>\n<h4 id=\"M140-设置热床目标温度\"><a href=\"#M140-设置热床目标温度\" class=\"headerlink\" title=\"M140 设置热床目标温度\"></a>M140 设置热床目标温度</h4><p>设置热床的目标温度。执行这条命令后，不需要等待达到这个温度，立即开始执行下一条G-code语句。</p>\n<p>Snnn表示目标温度；</p>\n<p>Fnnn表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<h4 id=\"M141-设置构建平台的温度\"><a href=\"#M141-设置构建平台的温度\" class=\"headerlink\" title=\"M141:设置构建平台的温度\"></a>M141:设置构建平台的温度</h4><p>可能用于特定的温控策略或多热床系统</p>\n<p>M141 S60将加热床设置为60摄氏度</p>\n<h4 id=\"M190-等待热床加热达到目标温度\"><a href=\"#M190-等待热床加热达到目标温度\" class=\"headerlink\" title=\"M190: 等待热床加热达到目标温度\"></a>M190: 等待热床加热达到目标温度</h4><p>设置热床的目标温度，并等待达到这个温度。</p>\n<p>Snnn，表示目标温度；</p>\n<p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。</p>\n<p>F1表示要触发；</p>\n<h4 id=\"M204：设置PID参数\"><a href=\"#M204：设置PID参数\" class=\"headerlink\" title=\"M204：设置PID参数\"></a>M204：设置PID参数</h4><p>设置挤出头温度控制的PID参数，</p>\n<p>Snnn表示对应的挤出头，无S参数表示使用当前挤出头；</p>\n<p>Xnnn表示P参数；</p>\n<p>Ynnn表示I参数；</p>\n<p>Znnn表示D参数；</p>\n<h4 id=\"M220：设置速度\"><a href=\"#M220：设置速度\" class=\"headerlink\" title=\"M220：设置速度\"></a>M220：设置速度</h4><p>设置3D打印机运行速度系数。</p>\n<p>命令参数为Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；</p>\n<p>3D打印机运行速度系数，是一个在25%到500%范围内变化的值。这个系数值在3D打印机运行过程中，与切片器给出的3D打印机运动速度基础值相乘，得到最终的3D打印机实际运动速度值。</p>\n<p>M220命令的输出，格式为：SpeedMultiply:100</p>\n<h4 id=\"M221：设置流率\"><a href=\"#M221：设置流率\" class=\"headerlink\" title=\"M221：设置流率\"></a>M221：设置流率</h4><p>设置3D打印机的流率系数（Flow rate）。</p>\n<p>命令参数为：Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；</p>\n<p>3D打印机流率系数，是在上位机切片软件通过耗材直径、喷头直径、层高以及3D打印速度等因素综合计算得到的E轴运动速度的基础上，叠加的一个E轴运动速度系数。简单地说，就是控制挤出头耗材挤出量的多少。这个系数可以在25%到500%范围内变化。</p>\n<p>M221命令的输出，格式为：FlowMultiply:100</p>\n<h3 id=\"T指令\"><a href=\"#T指令\" class=\"headerlink\" title=\"T指令\"></a>T指令</h3><h4 id=\"T0-T1-T2-T3-命令，选择不同的工具或挤出机\"><a href=\"#T0-T1-T2-T3-命令，选择不同的工具或挤出机\" class=\"headerlink\" title=\"T0&#x2F;T1&#x2F;T2&#x2F;T3 命令，选择不同的工具或挤出机\"></a>T0&#x2F;T1&#x2F;T2&#x2F;T3 命令，选择不同的工具或挤出机</h4><p>T0 选择第一个挤出机；T1 选择第二个挤出机；T2 选择第三个挤出机；T3 选择第四个挤出机</p>\n<h4 id=\"节选注释\"><a href=\"#节选注释\" class=\"headerlink\" title=\"节选注释\"></a>节选注释</h4><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">M106 P2 S204    //打开第三个风扇，PWM值为<span class=\"hljs-number\">204</span><br><span class=\"hljs-comment\">;LAYER_CHANGE</span><br><span class=\"hljs-comment\">;Z:16.8</span><br><span class=\"hljs-comment\">;HEIGHT:0.199999</span><br><span class=\"hljs-comment\">;BEFORE_LAYER_CHANGE</span><br><span class=\"hljs-comment\">;16.8</span><br>G92 E0    //设置喷头当前位置为零点<br>M106 P2 S0    //关闭第二个风扇<br><br>G1 E-.<span class=\"hljs-number\">35</span> F2400  //挤出机回抽挤出<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">35m</span>m，速度设置为<span class=\"hljs-number\">2400m</span>m/min<br><span class=\"hljs-comment\">;WIPE_START</span><br>G1 F<span class=\"hljs-number\">9473.877</span>    //速度设置为<span class=\"hljs-number\">9473</span>.<span class=\"hljs-number\">877m</span>m/min<br>G1 X<span class=\"hljs-number\">320.911</span> Y<span class=\"hljs-number\">304.914</span> E-.<span class=\"hljs-number\">11658</span>    //直线插补，移动到（<span class=\"hljs-number\">320.911</span>，<span class=\"hljs-number\">304.914</span>）位置，并回抽<span class=\"hljs-number\">0.11658</span><br>G1 X<span class=\"hljs-number\">321.066</span> Y<span class=\"hljs-number\">304.753</span> E-.<span class=\"hljs-number\">03342</span>    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>）位置，并回抽<span class=\"hljs-number\">0.03342</span><br><span class=\"hljs-comment\">;WIPE_END</span><br>EXCLUDE_OBJECT_END NAME=ksr_fdmtest_w4.stl_id_0_copy_0<br><span class=\"hljs-comment\">;_SET_FAN_SPEED_CHANGING_LAYER</span><br>EXCLUDE_OBJECT_START NAME=ksr_fdmtest_w4.stl_id_0_copy_0<br>G17    //选择XY平面<br>G3 Z17 I.<span class=\"hljs-number\">035</span> J-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">216</span> P1  F30000    //圆弧插补，Z轴位置为<span class=\"hljs-number\">17m</span>m，圆心坐标为（<span class=\"hljs-number\">321.066</span>+<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">035，304</span>.<span class=\"hljs-number\">753-1.216</span>）,P1表示为顺时针，速度为<span class=\"hljs-number\">30000m</span>m/min<br>G1 X43.<span class=\"hljs-number\">587</span> Y<span class=\"hljs-number\">296.746</span> Z17    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>，<span class=\"hljs-number\">17</span>）位置<br>G1 Z16.<span class=\"hljs-number\">8</span>    //直线插补，移动到（<span class=\"hljs-number\">321.066</span>，<span class=\"hljs-number\">304.753</span>，<span class=\"hljs-number\">16</span>.<span class=\"hljs-number\">8</span>）位置<br>G1 E.<span class=\"hljs-number\">5</span> F2400    //挤出机挤出<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5m</span>m，速度设置为<span class=\"hljs-number\">2400m</span>m/min<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"二、CNC数控编程\"><a href=\"#二、CNC数控编程\" class=\"headerlink\" title=\"二、CNC数控编程\"></a>二、CNC数控编程</h3><h4 id=\"学习资料-1\"><a href=\"#学习资料-1\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h4><p><a href=\"http://blog.hubwiz.com/2021/06/26/g-code-tutorial/\">数控机床编程入门【G-code】 | 学习软件编程 (hubwiz.com)</a></p>\n<h4 id=\"G00–快速定位\"><a href=\"#G00–快速定位\" class=\"headerlink\" title=\"G00–快速定位\"></a>G00–快速定位</h4><p>G00命令以最大速度将机器从当前位置移动到指定的坐标。机器将同时移动所有轴，以便同时完成行程。 结果是直线移动到新的位置点。</p>\n<h4 id=\"G01–线性插值\"><a href=\"#G01–线性插值\" class=\"headerlink\" title=\"G01–线性插值\"></a>G01–线性插值</h4><p>G01 命令指示机器以设定速度直线移动。我们用X、Y和Z值指定最终位置，用F值指定速度。 CNC控制器计算（插值）要经过的中间点的坐标，以获得直线。</p>\n<h4 id=\"G02–顺时针环形插值\"><a href=\"#G02–顺时针环形插值\" class=\"headerlink\" title=\"G02–顺时针环形插值\"></a>G02–顺时针环形插值</h4><p>G02命令要求机器以圆形模式顺时针移动。它与 G01 命令的概念相同，在执行适当的加工过程时使用。除了 终点参数，在这里我们还需要定义旋转中心，或弧线起点与弧线中心点的距离。起点实际上是上一个命令的 终点或当前点。</p>\n<h4 id=\"G03–逆时针环形插值\"><a href=\"#G03–逆时针环形插值\" class=\"headerlink\" title=\"G03–逆时针环形插值\"></a>G03–逆时针环形插值</h4><p>与 G02 一样，G03 命令指示机器以圆形模式移动，区别在于G03是逆时针运动。所有其他功能和规则与 G02 命令相同。</p>\n<h4 id=\"G20-G21-–-单位选择\"><a href=\"#G20-G21-–-单位选择\" class=\"headerlink\" title=\"G20&#x2F;G21 – 单位选择\"></a>G20&#x2F;G21 – 单位选择</h4><p>G20 和 G21 命令定义 G-code单位，英寸或毫米。G20 &#x3D; 英寸；G21 &#x3D; 毫米</p>\n<h4 id=\"G17-G18-G18-–-工作面选择\"><a href=\"#G17-G18-G18-–-工作面选择\" class=\"headerlink\" title=\"G17&#x2F;G18&#x2F;G18 – 工作面选择\"></a>G17&#x2F;G18&#x2F;G18 – 工作面选择</h4><p>G17–XY平面；G18–XZ平面；G19–YZ平面</p>\n<h4 id=\"G28–返回home\"><a href=\"#G28–返回home\" class=\"headerlink\" title=\"G28–返回home\"></a>G28–返回home</h4><p>G28命令要求机器将移动到其参考点或home位置。为了避免碰撞，我们可以包括一个带有 X、Y 和 Z 参数的 中间点。该工具将在转到参考点之前通过该点。</p>\n<h4 id=\"G90-G91-–-定位模式\"><a href=\"#G90-G91-–-定位模式\" class=\"headerlink\" title=\"G90&#x2F;G91 – 定位模式\"></a>G90&#x2F;G91 – 定位模式</h4><p>使用 G90 和 G91 命令，我们告诉机器如何解析坐标值。G90为绝对模式，G91为相对模式。</p>\n<h4 id=\"其他代码\"><a href=\"#其他代码\" class=\"headerlink\" title=\"其他代码\"></a>其他代码</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">- </span>M00–程序停止<br><span class=\"hljs-bullet\">- </span>M02–程序结束<br><span class=\"hljs-bullet\">- </span>M03–主轴打开–顺时针<br><span class=\"hljs-bullet\">- </span>M04–主轴打开–逆时针<br><span class=\"hljs-bullet\">- </span>M05–主轴停止<br><span class=\"hljs-bullet\">- </span>M06–工具更改<br><span class=\"hljs-bullet\">- </span>M08–启用Flood Colant<br><span class=\"hljs-bullet\">- </span>M09–禁用Flood Colant<br><span class=\"hljs-bullet\">- </span>M30 – 程序结束<br><span class=\"hljs-bullet\">- </span>M104–启动挤出加热<br><span class=\"hljs-bullet\">- </span>M109–等到挤出器到达T0<br><span class=\"hljs-bullet\">- </span>M140–开始底板加热<br><span class=\"hljs-bullet\">- </span>M190–等到底板到达T0<br><span class=\"hljs-bullet\">- </span>M106–设置风扇速度<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h4><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">%<br>G21 G17 G90 F100                     <span class=\"hljs-comment\">//G21单位选择毫米，G17选择XY平面，G90选择绝对模式，F100代表转速</span><br>M03 S1000                            <span class=\"hljs-comment\">//主轴打开-顺时针，速度为1000转</span><br>G00 X5 Y5                 ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//快速移动到（5，5）</span><br>G01 X5 Y5 Z<span class=\"hljs-number\">-1</span>             ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//直线插补移动到（5，5，-1）</span><br>G01 X5 Y15 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> C  <span class=\"hljs-comment\">//直线插补移动到（5，15，-1）</span><br>G02 X9 Y19 Z<span class=\"hljs-number\">-1</span> I4 J0      ; <span class=\"hljs-built_in\">point</span> D  <span class=\"hljs-comment\">//顺时针环形插补移动到（9，19，-1），圆心为（9，15）</span><br>G01 X23 Y19 Z<span class=\"hljs-number\">-1</span>           ; <span class=\"hljs-built_in\">point</span> E  <span class=\"hljs-comment\">//直线插补移动到（23，19，-1）</span><br>G01 X32 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> F  <span class=\"hljs-comment\">//直线插补移动到（32，5，-1）</span><br>G01 X21 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> G  <span class=\"hljs-comment\">//直线插补移动到（21，5，-1）</span><br>G01 X21 Y8 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> H  <span class=\"hljs-comment\">//直线插补移动到（21，8，-1）</span><br>G03 X19 Y10 Z<span class=\"hljs-number\">-1</span> I<span class=\"hljs-number\">-2</span> J0    ; <span class=\"hljs-built_in\">point</span> I  <span class=\"hljs-comment\">//逆时针环形插补移动到（19，10，-1），圆心为（19，8）</span><br>G01 X13 Y10 Z<span class=\"hljs-number\">-1</span>           ; <span class=\"hljs-built_in\">point</span> J  <span class=\"hljs-comment\">//直线插补移动到（13，10，-1）</span><br>G03 X11 Y8 Z<span class=\"hljs-number\">-1</span> I0 J<span class=\"hljs-number\">-2</span>     ; <span class=\"hljs-built_in\">point</span> K  <span class=\"hljs-comment\">//逆时针环形插补移动到（11，8，-1），圆心为（13，8）</span><br>G01 X11 Y5 Z<span class=\"hljs-number\">-1</span>            ; <span class=\"hljs-built_in\">point</span> L  <span class=\"hljs-comment\">//直线插补移动到（11，5，-1）</span><br>G01 X5 Y5 Z<span class=\"hljs-number\">-1</span>             ; <span class=\"hljs-built_in\">point</span> B  <span class=\"hljs-comment\">//直线插补移动到（5，5，-1）</span><br>G01 X5 Y5 Z0                         <span class=\"hljs-comment\">//直线插补移动到（5，5，0）</span><br>G28  X0 Y0                           <span class=\"hljs-comment\">//返回零点（0，0，0）</span><br>M05                                  <span class=\"hljs-comment\">//关闭主轴</span><br>M30                                  <span class=\"hljs-comment\">//程序结束</span><br>%<br></code></pre></td></tr></table></figure>\n"},{"title":"Linux环境安装和配置","_content":"\n# Linux环境安装和配置\n\n## 一、安装VMware（16/17）\n\n安装版本：VMware® Workstation 16 Pro\n\n安装保姆链接：[安装虚拟机（VMware）保姆级教程（附安装包）_vmware虚拟机-CSDN博客](https://blog.csdn.net/weixin_74195551/article/details/127288338)\n\n破解链接：[VMware Workstation虚拟机合集+激活密钥_Win+Linux_10∕11∕12∕14∕15∕16∕17 - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn](https://www.52pojie.cn/thread-1804571-1-1.html)\n\n破解码：ZF3R0-FHED2-M80TY-8QYGC-NPKYF\n\nMobaXtem链接：[VMware虚拟机配置、连接MobaXterm_mobaxtem怎么连接虚拟机-CSDN博客](https://blog.csdn.net/qq_42578036/article/details/107710339)\n\n终极链接：[保姆级教程|VMware安装Ubuntu20.04(系统安装+网络配置+open-vm-tools安装+国内软件源更新)-CSDN博客](https://blog.csdn.net/lhl_blog/article/details/123406322)\n\n报错：\n\nVMware Workstation 无法连接到虚拟机\n\n点开虚拟机“属性”，在“兼容性”里面设置为以管理员身份运行此程序。\n\nVMware创建新的虚拟机，弹出“您已输入用户名，客户机操作将保留此用户名”错误提示\n\n【root】被系统占用了，让用户新建一个低权限的账户，修改用户名，不要再使用【root】，如：改为【user】或【your_name】\n\nVMware Ubuntu ping 百度不通\n\n选择 虚拟机->设置->网络适配器->自定义特定虚拟网络->选择VMnet1(桥接网络)->确定\n\n目的是确定我们使用的是VMnet1(桥接网络)，之后就可以ping通\n\n安装磁盘管理工具gparted并运行\n\n```\nsudo apt install gparted\nsudo gparted\n```\n\n报错是权限不足,那么修改挂载点的权限即可(注:所谓\"挂载\"的概念体现的是Linux\"一切皆文件\"的思想,物理世界中的一块硬盘在Linux系统的逻辑中也被映射为一个文件)\n\n```\nsudo mount -o remount -rw / \nsudo mount -o remount -rw /var/snap/firefox/common/host-hunspell\n```\n\n## 二、安装Ubuntu（22.04）\n\n安装版本：Linux Ubuntu22.04.4\n\n安装保姆链接：[ubuntu 22.04下载安装_ubuntu22.04下载-CSDN博客](https://blog.csdn.net/weixin_42640280/article/details/128351105)\n\n清华源：[清华大学开源软件镜像站 | Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/)\n\n步骤指令\n\n```\nsudo su //进入管理者模式\n\napt-get update //更新apt\n\napt-get install net-tools //安装ifconfig相关配件\n\napt-get install openssh-server //下载和安装ssh\n\nservice ssh restart //启动ssh\n```\n\n## 三、安装应用依赖第三方库\n\n将工程导入虚拟机中，tar -xvf 解压工程包\n\ngit clone 的所有包的位置可以随机放置，但是需要对每个包进行编译，编译参照readme文件或者网上查找，如果下载不下来，可以直接去官网直接下载zip格式，使用unzip xxx.zip进行安装\n\n```\nsudo apt-get install -y build-essential libsdl2-dev\n\ngit clone http://172.23.88.26:3333/zhangyufeng/libcrlog.git  //按照readme文档可以编译\n\nsudo apt-get install  libjson-c-dev\n\ngit clone https://github.com/protocolbuffers/protobuf.git\n\t//没安装成功，bash: ./autogen.sh: No such file or directory\n\t//在晚上的时候安装成功了，原因是高版本的缺失了./autogen.sh脚本，进行降版本就可以了，花费4小时\n\t//终极感谢博主：https://blog.csdn.net/jax_fanyang/article/details/135937002\n\t\n    1.11 点击链接下载3.21.12版本源码。https://github.com/protocolbuffers/protobuf/releases/tag/v2\n    1.12 cd protobuf-21.12/\n    1.13 ./autogen.sh\n    1.14 ./configure --prefix=/usr/local/protobuf\n    1.15 make\n    1.16 sudo make install\n    1.17 sudo vim /etc/profile\n    1.18 #添加以下内容：\n\n    #(动态库搜索路径) 程序加载运⾏期间查找动态链接库时指定除了系统默认路径之外的其他路径\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/protobuf/lib/\n    #(静态库搜索路径) 程序编译期间查找动态链接库时指定查找共享库的路径\n    export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/protobuf/lib/\n    #执⾏程序搜索路径\n    export PATH=$PATH:/usr/local/protobuf/bin/\n    #c程序头⽂件搜索路径\n    export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/local/protobuf/include/\n    #c++程序头⽂件搜索路径\n    export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/local/protobuf/include/\n    #pkg-config 路径\n    export PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/\n    1.18 source /etc/profile\n    1.19  protoc --version \n    执行之后应该看到==libprotoc 3.21.12==如果出现这个版本信息则安装成功\n    \ngit clone https://github.com/protobuf-c/protobuf-c  //按照readme文档可以编译\n\ngit clone https://github.com/eclipse/paho.mqtt.c.git\n\t\n\tbash\n    cd paho.mqtt.c\n    mkdir build && cd build\n    cmake ..\n    make\n    sudo make install\n\ngit clone https://github.com/eclipse/paho.mqtt.cpp.git（1.3.10）  //安装失败\n\ngit clone https://github.com/aliyun/aliyun-oss-cpp-sdk.git\n\n    cd <path/to/aliyun-oss-cpp-sdk>\n    mkdir build\n    cd build\n    cmake ..\n    \n    sudo apt-get install libcurl4-openssl-dev libssl-dev\n    make\n\ngit clone https://github.com/open-source-parsers/jsoncpp.git\n\n    mkdir -p build/debug\n    cd build/debug\n    cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G \"Unix Makefiles\" ../..\n    make\n\nsudo apt install libapr1-dev\n\nsudo apt install libaprutil1-dev\n\nsudo apt install libmxml-dev\n\nsudo apt-get install uuid-dev \n\ngit clone https://github.com/aliyun/aliyun-oss-c-sdk.git //好像安装有点问题\n\n    ./configure\n    make\n    make install\n\nhttps://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/102787/cn_zh/1558078831675/VodSDK-C_1.0.0.tar.gz?spm=a2c4g.11186623.0.0.65c71cd50vaal4&file=VodSDK-C_1.0.0.tar.gz //不知道怎么安装\n\n//找阿里云帮忙实现：[使用C/C++ SDK上传文件_视频点播(VOD)-阿里云帮助中心 (aliyun.com)](https://help.aliyun.com/zh/vod/developer-reference/upload-sdk-for-c-or-cpp?spm=a2c4g.11186623.0.0.61dd2c16XPqrTn#multiTask7060)\n\n    cmake .\n    make\n    make install\n\ngit clone https://github.com/ithewei/libhv\n\n    mkdir build\n    cd build\n    cmake ..\n    cmake --build .\n\nsudo apt-get install libboost-all-dev\n\ngit clone https://github.com/inotify-tools/inotify-tools.git//安装不知道成没成功\n\nsudo apt-get install libfreeimage3 libfreeimage-dev\n\ngit clone https://github.com/dpilger26/NumCpp.git\n\nsudo apt-get install libavformat-dev\n\nsudo apt-get install libswscale-dev\n```\n\n## 四、在PC上编译运行应用\n\nmake 编译程序\n\nmake clean 清除编译\n\n头文件所在位置：\n\n```\n/usr/include/\n\n/usr/local/include/\n\ncp  -r /usr/local/include/vod_sdk/ /usr/include/vod_sdk/  //缺失upload.h头文件，将他进行复制到usr/include/文件夹当中\n\n- 安装依赖\n  sudo apt install libjson-c-dev\n\n- 编译\n  make\n\n- 安装\n  sudo make install\n\n- 更新系统动态库\n  sudo ldconfig\n```\n\n运行项目\n\n先获得虚拟设备参数，导入config中\"/home/user/creality/userdata/config/\"\n\n开始编译主程序  make clean && make -j4（j4、j8代表进程速度，越高越快）\n\n获得各个文件的单独运行包，在vscode中运行./master-server，即可跑通实体机\n\nlinux中/opt目录用来**安装附加软件包**，是用户级的程序目录，可以理解为D:/Software。 安装到/opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。 opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。\n\n## 五、交叉编译到目标板运行\n\n交叉编译讲解：[交叉编译入门及必要配置方法总结_gcc-manifest.txt-CSDN博客](https://blog.csdn.net/lc315yuhuofei/article/details/103782049)\n\n虚拟机交叉编译教程：[立创泰山派学习05-虚拟机ubuntu安装交叉编译工具 - zbl1118 - 博客园 (cnblogs.com)](https://www.cnblogs.com/zblblog/p/18136017)\n\n## 六、知识点总结\n\n#### 1.交叉编译知识点\n\n交叉编译的目的是在一台架构A主机平台上编译另一种架构B目标平台的二进制文件或者库，交叉编译在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。 完整的Linux编译环境需要很多支持包，交叉编译使我们不需要花时间将各种支持包移植到目标板上\n\n主机平台：PC端 Windows 10 专业工作站版\n\n目标平台：Linux Ubuntu22.04.4/VMware® Workstation 16 Pro\n\n通常交叉编译工具链命名规则为：arch-core-kernel-system\n\narch：目标平台架构，如上文提到的arm，mips等；\n\ncore：有两种种情况，第一是CPU Core，如Cortex A8；第二是指定工具链的供应商。如果没有特殊指定，则留空不填。这一组命名比较灵活，有以厂家名称命名的，有以开发者命名的，也有以开发板命名的，或者直接是none或cross的；\n\nkernel： 目标平台的OS，见过的有linux，uclinux，bare-metal（无OS）；\n\nsystem：嵌入式应用二进制接口（Embedded Application Binary Interface），交叉编译工具链所选择的库函数和目标映像的规范，如gnu，gnueabi等。其中gnu等价于glibc+oabi；gnueabi等价于glibc+eabi。若不指定，则也可以留空不填；\n\n上述命名规则并不是统一的规范，使用的时候作为参考就行。我使用的交叉编译工具链名称为：gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu。\n\n获取交叉编译工具链两个途径：\n\n直接下载知名厂家已经编译好的工具链。\n\n```\nhttps://www.linaro.org/downloads/\nhttp://ftp.arm.linux.org.uk/pub/armlinux/toolchain/\nhttp://www.denx.de/en/Software/WebHome\nhttps://launchpad.net/gcc-arm-embedded\n```\n\n自己编译交叉编译工具链\n\n编译交叉编译工具链的工具：crosstool-NG、Buildroot、Embedded Linux Development Kit (ELDK)\n\n#### 2.Linux 系统编程知识点\n\n[Linux 系统编程从入门到进阶 学习指南-阿里云开发者社区 (aliyun.com)](https://developer.aliyun.com/article/1457993)\n\n什么是库函数？\n\n库函数是预编写的代码，存储在库文件中，供程序员使用。它们通过系统调用和操作系统的内核通信。例如，printf（） 是 C 语言的一个库函数，它内部使用 write（） 系统调用来和内核进行交互。\n\n[Linux C函数库大全 - 一觉醒来写程序 - 博客园 (cnblogs.com)](https://www.cnblogs.com/realjimmy/p/12844359.html)\n\n参考手册：[介紹 | Linux C API 参考手册 (gitbooks.io)](https://wizardforcel.gitbooks.io/linux-c-api-ref/content/index.html)\n\n**进程究竟是什么？**\n\n每当你启动一个程序，Linux 系统都会创建一个新的进程。这个进程有它自己的内存地址、系统资源和状态。简而言之，进程是程序的一个运行实例。\n\n**1.管道 （Pipe）**\n\n管道是 Linux 中用于进程间通信的一种机制。它们分为两种类型：**匿名管道**和**有名管道**。\n\n**2.信号 (Signals)**\n\n在 Linux 中，信号是一种用于进程间通信（IPC）的机制，允许操作系统或一个进程向另一个进程发送简单的消息。信号主要用于传递关于系统事件的通知，例如中断请求、程序异常、或其他重要事件。每个信号代表了一个特定类型的事件，并且进程可以根据收到的信号执行相应的动作。\n\n信号是异步的，意味着它们可以在任何时间点被发送到进程，通常与进程的正常控制流无关。信号的使用为进程提供了一种处理外部事件和错误的方式。\n\n**3.文件(Files)**\n\n文件在 Linux 系统中是一种基本的持久化存储机制，可用于**进程间通信**。多个进程可以通过对同一个文件的读取和写入来共享信息。\n\n**4.信号量(Semaphores)**\n信号量是一种在进程间或同一进程的不同线程间提供同步的机制。它是一个计数器，用于控制对共享资源的访问。当计数器值大于0时，表示资源可用；当值为0时，表示资源被占用。进程在访问共享资源前必须减少（wait）信号量，访问后必须增加（post）信号量。\n\n**5.共享内存(Shared Memory)**\n在 Linux 中，共享内存是进程间通信（IPC）的一种形式。当多个进程需要访问相同的数据时，使用共享内存是一种高效的方式。它允许两个或多个进程访问同一个物理内存区域，这使得数据传输不需要通过内核空间，从而提高了通信效率。\n\n**6.消息队列 (Message Queues)**\n\n消息队列是一种允许一个或多个进程向其写入消息，并由一个或多个进程读取消息的 IPC 机制。每条消息都由一个消息队列标识符（ID）识别， 且可以携带一个特定的类型。消息队列允许不同进程非阻塞地发送和接收记录或数据块，这些记录可以是不同类型和大小的。\n\n**7.套接字 (Sockets)**\n\n套接字是一种在不同进程间进行数据交换的通信机制。在 Linux 中，套接字可以用于同一台机器上的进程间通信（IPC）或不同机器上的网络通信。套接字支持多种通信协议，最常见的是TCP（可靠的、连接导向的协议）和UDP（无连接的、不可靠的协议）。\n\n## 七、常用指令\n\n```\n\nuname -m /*查看系统架构*/\nlscpu /*查看更多CPU情况*/\n\ntar -vxf [xxx.tar.gz压缩包]\nmv [现在的位置] [将要移动的位置]\n\npip list /*罗列所有的安装包*/\n\nmake clean  /*清理编译*/\nmake && make install  /*开始编译*/\n\ncp  -r /usr/local/include/vod_sdk/ /usr/include/vod_sdk/  /*复制文件夹到另一个文件夹上*/\n\nsudo apt-get autoremove xxx  /*卸载*/\n```\n\n常用指令汇总：[linux 常用命令【编程必备】-阿里云开发者社区 (aliyun.com)](https://developer.aliyun.com/article/1561151?spm=a2c6h.12873639.article-detail.33.657a1be0lxiKr4&scm=20140722.ID_community@@article@@1561151._.ID_community@@article@@1561151-OR_rec-V_1-RL_community@@article@@1457993)\n","source":"_posts/Work No.1.md","raw":"---\ntitle: Linux环境安装和配置\ntags: Linux\ncategories: Linux\n---\n\n# Linux环境安装和配置\n\n## 一、安装VMware（16/17）\n\n安装版本：VMware® Workstation 16 Pro\n\n安装保姆链接：[安装虚拟机（VMware）保姆级教程（附安装包）_vmware虚拟机-CSDN博客](https://blog.csdn.net/weixin_74195551/article/details/127288338)\n\n破解链接：[VMware Workstation虚拟机合集+激活密钥_Win+Linux_10∕11∕12∕14∕15∕16∕17 - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn](https://www.52pojie.cn/thread-1804571-1-1.html)\n\n破解码：ZF3R0-FHED2-M80TY-8QYGC-NPKYF\n\nMobaXtem链接：[VMware虚拟机配置、连接MobaXterm_mobaxtem怎么连接虚拟机-CSDN博客](https://blog.csdn.net/qq_42578036/article/details/107710339)\n\n终极链接：[保姆级教程|VMware安装Ubuntu20.04(系统安装+网络配置+open-vm-tools安装+国内软件源更新)-CSDN博客](https://blog.csdn.net/lhl_blog/article/details/123406322)\n\n报错：\n\nVMware Workstation 无法连接到虚拟机\n\n点开虚拟机“属性”，在“兼容性”里面设置为以管理员身份运行此程序。\n\nVMware创建新的虚拟机，弹出“您已输入用户名，客户机操作将保留此用户名”错误提示\n\n【root】被系统占用了，让用户新建一个低权限的账户，修改用户名，不要再使用【root】，如：改为【user】或【your_name】\n\nVMware Ubuntu ping 百度不通\n\n选择 虚拟机->设置->网络适配器->自定义特定虚拟网络->选择VMnet1(桥接网络)->确定\n\n目的是确定我们使用的是VMnet1(桥接网络)，之后就可以ping通\n\n安装磁盘管理工具gparted并运行\n\n```\nsudo apt install gparted\nsudo gparted\n```\n\n报错是权限不足,那么修改挂载点的权限即可(注:所谓\"挂载\"的概念体现的是Linux\"一切皆文件\"的思想,物理世界中的一块硬盘在Linux系统的逻辑中也被映射为一个文件)\n\n```\nsudo mount -o remount -rw / \nsudo mount -o remount -rw /var/snap/firefox/common/host-hunspell\n```\n\n## 二、安装Ubuntu（22.04）\n\n安装版本：Linux Ubuntu22.04.4\n\n安装保姆链接：[ubuntu 22.04下载安装_ubuntu22.04下载-CSDN博客](https://blog.csdn.net/weixin_42640280/article/details/128351105)\n\n清华源：[清华大学开源软件镜像站 | Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/)\n\n步骤指令\n\n```\nsudo su //进入管理者模式\n\napt-get update //更新apt\n\napt-get install net-tools //安装ifconfig相关配件\n\napt-get install openssh-server //下载和安装ssh\n\nservice ssh restart //启动ssh\n```\n\n## 三、安装应用依赖第三方库\n\n将工程导入虚拟机中，tar -xvf 解压工程包\n\ngit clone 的所有包的位置可以随机放置，但是需要对每个包进行编译，编译参照readme文件或者网上查找，如果下载不下来，可以直接去官网直接下载zip格式，使用unzip xxx.zip进行安装\n\n```\nsudo apt-get install -y build-essential libsdl2-dev\n\ngit clone http://172.23.88.26:3333/zhangyufeng/libcrlog.git  //按照readme文档可以编译\n\nsudo apt-get install  libjson-c-dev\n\ngit clone https://github.com/protocolbuffers/protobuf.git\n\t//没安装成功，bash: ./autogen.sh: No such file or directory\n\t//在晚上的时候安装成功了，原因是高版本的缺失了./autogen.sh脚本，进行降版本就可以了，花费4小时\n\t//终极感谢博主：https://blog.csdn.net/jax_fanyang/article/details/135937002\n\t\n    1.11 点击链接下载3.21.12版本源码。https://github.com/protocolbuffers/protobuf/releases/tag/v2\n    1.12 cd protobuf-21.12/\n    1.13 ./autogen.sh\n    1.14 ./configure --prefix=/usr/local/protobuf\n    1.15 make\n    1.16 sudo make install\n    1.17 sudo vim /etc/profile\n    1.18 #添加以下内容：\n\n    #(动态库搜索路径) 程序加载运⾏期间查找动态链接库时指定除了系统默认路径之外的其他路径\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/protobuf/lib/\n    #(静态库搜索路径) 程序编译期间查找动态链接库时指定查找共享库的路径\n    export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/protobuf/lib/\n    #执⾏程序搜索路径\n    export PATH=$PATH:/usr/local/protobuf/bin/\n    #c程序头⽂件搜索路径\n    export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/local/protobuf/include/\n    #c++程序头⽂件搜索路径\n    export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/local/protobuf/include/\n    #pkg-config 路径\n    export PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/\n    1.18 source /etc/profile\n    1.19  protoc --version \n    执行之后应该看到==libprotoc 3.21.12==如果出现这个版本信息则安装成功\n    \ngit clone https://github.com/protobuf-c/protobuf-c  //按照readme文档可以编译\n\ngit clone https://github.com/eclipse/paho.mqtt.c.git\n\t\n\tbash\n    cd paho.mqtt.c\n    mkdir build && cd build\n    cmake ..\n    make\n    sudo make install\n\ngit clone https://github.com/eclipse/paho.mqtt.cpp.git（1.3.10）  //安装失败\n\ngit clone https://github.com/aliyun/aliyun-oss-cpp-sdk.git\n\n    cd <path/to/aliyun-oss-cpp-sdk>\n    mkdir build\n    cd build\n    cmake ..\n    \n    sudo apt-get install libcurl4-openssl-dev libssl-dev\n    make\n\ngit clone https://github.com/open-source-parsers/jsoncpp.git\n\n    mkdir -p build/debug\n    cd build/debug\n    cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G \"Unix Makefiles\" ../..\n    make\n\nsudo apt install libapr1-dev\n\nsudo apt install libaprutil1-dev\n\nsudo apt install libmxml-dev\n\nsudo apt-get install uuid-dev \n\ngit clone https://github.com/aliyun/aliyun-oss-c-sdk.git //好像安装有点问题\n\n    ./configure\n    make\n    make install\n\nhttps://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/102787/cn_zh/1558078831675/VodSDK-C_1.0.0.tar.gz?spm=a2c4g.11186623.0.0.65c71cd50vaal4&file=VodSDK-C_1.0.0.tar.gz //不知道怎么安装\n\n//找阿里云帮忙实现：[使用C/C++ SDK上传文件_视频点播(VOD)-阿里云帮助中心 (aliyun.com)](https://help.aliyun.com/zh/vod/developer-reference/upload-sdk-for-c-or-cpp?spm=a2c4g.11186623.0.0.61dd2c16XPqrTn#multiTask7060)\n\n    cmake .\n    make\n    make install\n\ngit clone https://github.com/ithewei/libhv\n\n    mkdir build\n    cd build\n    cmake ..\n    cmake --build .\n\nsudo apt-get install libboost-all-dev\n\ngit clone https://github.com/inotify-tools/inotify-tools.git//安装不知道成没成功\n\nsudo apt-get install libfreeimage3 libfreeimage-dev\n\ngit clone https://github.com/dpilger26/NumCpp.git\n\nsudo apt-get install libavformat-dev\n\nsudo apt-get install libswscale-dev\n```\n\n## 四、在PC上编译运行应用\n\nmake 编译程序\n\nmake clean 清除编译\n\n头文件所在位置：\n\n```\n/usr/include/\n\n/usr/local/include/\n\ncp  -r /usr/local/include/vod_sdk/ /usr/include/vod_sdk/  //缺失upload.h头文件，将他进行复制到usr/include/文件夹当中\n\n- 安装依赖\n  sudo apt install libjson-c-dev\n\n- 编译\n  make\n\n- 安装\n  sudo make install\n\n- 更新系统动态库\n  sudo ldconfig\n```\n\n运行项目\n\n先获得虚拟设备参数，导入config中\"/home/user/creality/userdata/config/\"\n\n开始编译主程序  make clean && make -j4（j4、j8代表进程速度，越高越快）\n\n获得各个文件的单独运行包，在vscode中运行./master-server，即可跑通实体机\n\nlinux中/opt目录用来**安装附加软件包**，是用户级的程序目录，可以理解为D:/Software。 安装到/opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。 opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。\n\n## 五、交叉编译到目标板运行\n\n交叉编译讲解：[交叉编译入门及必要配置方法总结_gcc-manifest.txt-CSDN博客](https://blog.csdn.net/lc315yuhuofei/article/details/103782049)\n\n虚拟机交叉编译教程：[立创泰山派学习05-虚拟机ubuntu安装交叉编译工具 - zbl1118 - 博客园 (cnblogs.com)](https://www.cnblogs.com/zblblog/p/18136017)\n\n## 六、知识点总结\n\n#### 1.交叉编译知识点\n\n交叉编译的目的是在一台架构A主机平台上编译另一种架构B目标平台的二进制文件或者库，交叉编译在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。 完整的Linux编译环境需要很多支持包，交叉编译使我们不需要花时间将各种支持包移植到目标板上\n\n主机平台：PC端 Windows 10 专业工作站版\n\n目标平台：Linux Ubuntu22.04.4/VMware® Workstation 16 Pro\n\n通常交叉编译工具链命名规则为：arch-core-kernel-system\n\narch：目标平台架构，如上文提到的arm，mips等；\n\ncore：有两种种情况，第一是CPU Core，如Cortex A8；第二是指定工具链的供应商。如果没有特殊指定，则留空不填。这一组命名比较灵活，有以厂家名称命名的，有以开发者命名的，也有以开发板命名的，或者直接是none或cross的；\n\nkernel： 目标平台的OS，见过的有linux，uclinux，bare-metal（无OS）；\n\nsystem：嵌入式应用二进制接口（Embedded Application Binary Interface），交叉编译工具链所选择的库函数和目标映像的规范，如gnu，gnueabi等。其中gnu等价于glibc+oabi；gnueabi等价于glibc+eabi。若不指定，则也可以留空不填；\n\n上述命名规则并不是统一的规范，使用的时候作为参考就行。我使用的交叉编译工具链名称为：gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu。\n\n获取交叉编译工具链两个途径：\n\n直接下载知名厂家已经编译好的工具链。\n\n```\nhttps://www.linaro.org/downloads/\nhttp://ftp.arm.linux.org.uk/pub/armlinux/toolchain/\nhttp://www.denx.de/en/Software/WebHome\nhttps://launchpad.net/gcc-arm-embedded\n```\n\n自己编译交叉编译工具链\n\n编译交叉编译工具链的工具：crosstool-NG、Buildroot、Embedded Linux Development Kit (ELDK)\n\n#### 2.Linux 系统编程知识点\n\n[Linux 系统编程从入门到进阶 学习指南-阿里云开发者社区 (aliyun.com)](https://developer.aliyun.com/article/1457993)\n\n什么是库函数？\n\n库函数是预编写的代码，存储在库文件中，供程序员使用。它们通过系统调用和操作系统的内核通信。例如，printf（） 是 C 语言的一个库函数，它内部使用 write（） 系统调用来和内核进行交互。\n\n[Linux C函数库大全 - 一觉醒来写程序 - 博客园 (cnblogs.com)](https://www.cnblogs.com/realjimmy/p/12844359.html)\n\n参考手册：[介紹 | Linux C API 参考手册 (gitbooks.io)](https://wizardforcel.gitbooks.io/linux-c-api-ref/content/index.html)\n\n**进程究竟是什么？**\n\n每当你启动一个程序，Linux 系统都会创建一个新的进程。这个进程有它自己的内存地址、系统资源和状态。简而言之，进程是程序的一个运行实例。\n\n**1.管道 （Pipe）**\n\n管道是 Linux 中用于进程间通信的一种机制。它们分为两种类型：**匿名管道**和**有名管道**。\n\n**2.信号 (Signals)**\n\n在 Linux 中，信号是一种用于进程间通信（IPC）的机制，允许操作系统或一个进程向另一个进程发送简单的消息。信号主要用于传递关于系统事件的通知，例如中断请求、程序异常、或其他重要事件。每个信号代表了一个特定类型的事件，并且进程可以根据收到的信号执行相应的动作。\n\n信号是异步的，意味着它们可以在任何时间点被发送到进程，通常与进程的正常控制流无关。信号的使用为进程提供了一种处理外部事件和错误的方式。\n\n**3.文件(Files)**\n\n文件在 Linux 系统中是一种基本的持久化存储机制，可用于**进程间通信**。多个进程可以通过对同一个文件的读取和写入来共享信息。\n\n**4.信号量(Semaphores)**\n信号量是一种在进程间或同一进程的不同线程间提供同步的机制。它是一个计数器，用于控制对共享资源的访问。当计数器值大于0时，表示资源可用；当值为0时，表示资源被占用。进程在访问共享资源前必须减少（wait）信号量，访问后必须增加（post）信号量。\n\n**5.共享内存(Shared Memory)**\n在 Linux 中，共享内存是进程间通信（IPC）的一种形式。当多个进程需要访问相同的数据时，使用共享内存是一种高效的方式。它允许两个或多个进程访问同一个物理内存区域，这使得数据传输不需要通过内核空间，从而提高了通信效率。\n\n**6.消息队列 (Message Queues)**\n\n消息队列是一种允许一个或多个进程向其写入消息，并由一个或多个进程读取消息的 IPC 机制。每条消息都由一个消息队列标识符（ID）识别， 且可以携带一个特定的类型。消息队列允许不同进程非阻塞地发送和接收记录或数据块，这些记录可以是不同类型和大小的。\n\n**7.套接字 (Sockets)**\n\n套接字是一种在不同进程间进行数据交换的通信机制。在 Linux 中，套接字可以用于同一台机器上的进程间通信（IPC）或不同机器上的网络通信。套接字支持多种通信协议，最常见的是TCP（可靠的、连接导向的协议）和UDP（无连接的、不可靠的协议）。\n\n## 七、常用指令\n\n```\n\nuname -m /*查看系统架构*/\nlscpu /*查看更多CPU情况*/\n\ntar -vxf [xxx.tar.gz压缩包]\nmv [现在的位置] [将要移动的位置]\n\npip list /*罗列所有的安装包*/\n\nmake clean  /*清理编译*/\nmake && make install  /*开始编译*/\n\ncp  -r /usr/local/include/vod_sdk/ /usr/include/vod_sdk/  /*复制文件夹到另一个文件夹上*/\n\nsudo apt-get autoremove xxx  /*卸载*/\n```\n\n常用指令汇总：[linux 常用命令【编程必备】-阿里云开发者社区 (aliyun.com)](https://developer.aliyun.com/article/1561151?spm=a2c6h.12873639.article-detail.33.657a1be0lxiKr4&scm=20140722.ID_community@@article@@1561151._.ID_community@@article@@1561151-OR_rec-V_1-RL_community@@article@@1457993)\n","slug":"Work No.1","published":1,"date":"2024-07-25T01:14:04.254Z","updated":"2024-07-25T06:34:29.514Z","_id":"clz0qu1nd0002rcfbd74jfitf","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Linux环境安装和配置\"><a href=\"#Linux环境安装和配置\" class=\"headerlink\" title=\"Linux环境安装和配置\"></a>Linux环境安装和配置</h1><h2 id=\"一、安装VMware（16-17）\"><a href=\"#一、安装VMware（16-17）\" class=\"headerlink\" title=\"一、安装VMware（16&#x2F;17）\"></a>一、安装VMware（16&#x2F;17）</h2><p>安装版本：VMware® Workstation 16 Pro</p>\n<p>安装保姆链接：<a href=\"https://blog.csdn.net/weixin_74195551/article/details/127288338\">安装虚拟机（VMware）保姆级教程（附安装包）_vmware虚拟机-CSDN博客</a></p>\n<p>破解链接：<a href=\"https://www.52pojie.cn/thread-1804571-1-1.html\">VMware Workstation虚拟机合集+激活密钥_Win+Linux_10∕11∕12∕14∕15∕16∕17 - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>\n<p>破解码：ZF3R0-FHED2-M80TY-8QYGC-NPKYF</p>\n<p>MobaXtem链接：<a href=\"https://blog.csdn.net/qq_42578036/article/details/107710339\">VMware虚拟机配置、连接MobaXterm_mobaxtem怎么连接虚拟机-CSDN博客</a></p>\n<p>终极链接：<a href=\"https://blog.csdn.net/lhl_blog/article/details/123406322\">保姆级教程|VMware安装Ubuntu20.04(系统安装+网络配置+open-vm-tools安装+国内软件源更新)-CSDN博客</a></p>\n<p>报错：</p>\n<p>VMware Workstation 无法连接到虚拟机</p>\n<p>点开虚拟机“属性”，在“兼容性”里面设置为以管理员身份运行此程序。</p>\n<p>VMware创建新的虚拟机，弹出“您已输入用户名，客户机操作将保留此用户名”错误提示</p>\n<p>【root】被系统占用了，让用户新建一个低权限的账户，修改用户名，不要再使用【root】，如：改为【user】或【your_name】</p>\n<p>VMware Ubuntu ping 百度不通</p>\n<p>选择 虚拟机-&gt;设置-&gt;网络适配器-&gt;自定义特定虚拟网络-&gt;选择VMnet1(桥接网络)-&gt;确定</p>\n<p>目的是确定我们使用的是VMnet1(桥接网络)，之后就可以ping通</p>\n<p>安装磁盘管理工具gparted并运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> apt install gparted<br><span class=\"hljs-built_in\">sudo</span> gparted<br></code></pre></td></tr></table></figure>\n\n<p>报错是权限不足,那么修改挂载点的权限即可(注:所谓”挂载”的概念体现的是Linux”一切皆文件”的思想,物理世界中的一块硬盘在Linux系统的逻辑中也被映射为一个文件)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> mount -o remount -rw / <br><span class=\"hljs-built_in\">sudo</span> mount -o remount -rw /var/snap/firefox/common/host-hunspell<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、安装Ubuntu（22-04）\"><a href=\"#二、安装Ubuntu（22-04）\" class=\"headerlink\" title=\"二、安装Ubuntu（22.04）\"></a>二、安装Ubuntu（22.04）</h2><p>安装版本：Linux Ubuntu22.04.4</p>\n<p>安装保姆链接：<a href=\"https://blog.csdn.net/weixin_42640280/article/details/128351105\">ubuntu 22.04下载安装_ubuntu22.04下载-CSDN博客</a></p>\n<p>清华源：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/\">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>\n<p>步骤指令</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">sudo su <span class=\"hljs-comment\">//进入管理者模式</span><br><br>apt-<span class=\"hljs-built_in\">get</span> <span class=\"hljs-keyword\">update</span> <span class=\"hljs-comment\">//更新apt</span><br><br>apt-<span class=\"hljs-built_in\">get</span> install net-tools <span class=\"hljs-comment\">//安装ifconfig相关配件</span><br><br>apt-<span class=\"hljs-built_in\">get</span> install openssh-server <span class=\"hljs-comment\">//下载和安装ssh</span><br><br>service ssh restart <span class=\"hljs-comment\">//启动ssh</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三、安装应用依赖第三方库\"><a href=\"#三、安装应用依赖第三方库\" class=\"headerlink\" title=\"三、安装应用依赖第三方库\"></a>三、安装应用依赖第三方库</h2><p>将工程导入虚拟机中，tar -xvf 解压工程包</p>\n<p>git clone 的所有包的位置可以随机放置，但是需要对每个包进行编译，编译参照readme文件或者网上查找，如果下载不下来，可以直接去官网直接下载zip格式，使用unzip xxx.zip进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> apt-get install -y build-essential libsdl2-dev<br><br>git <span class=\"hljs-built_in\">clone</span> http://172.23.88.26:3333/zhangyufeng/libcrlog.git  //按照readme文档可以编译<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install  libjson-c-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/protocolbuffers/protobuf.git<br>\t//没安装成功，bash: ./autogen.sh: No such file or directory<br>\t//在晚上的时候安装成功了，原因是高版本的缺失了./autogen.sh脚本，进行降版本就可以了，花费4小时<br>\t//终极感谢博主：https://blog.csdn.net/jax_fanyang/article/details/135937002<br>\t<br>    1.11 点击链接下载3.21.12版本源码。https://github.com/protocolbuffers/protobuf/releases/tag/v2<br>    1.12 <span class=\"hljs-built_in\">cd</span> protobuf-21.12/<br>    1.13 ./autogen.sh<br>    1.14 ./configure --prefix=/usr/local/protobuf<br>    1.15 make<br>    1.16 <span class=\"hljs-built_in\">sudo</span> make install<br>    1.17 <span class=\"hljs-built_in\">sudo</span> vim /etc/profile<br>    1.18 <span class=\"hljs-comment\">#添加以下内容：</span><br><br>    <span class=\"hljs-comment\">#(动态库搜索路径) 程序加载运⾏期间查找动态链接库时指定除了系统默认路径之外的其他路径</span><br>    <span class=\"hljs-built_in\">export</span> LD_LIBRARY_PATH=<span class=\"hljs-variable\">$LD_LIBRARY_PATH</span>:/usr/local/protobuf/lib/<br>    <span class=\"hljs-comment\">#(静态库搜索路径) 程序编译期间查找动态链接库时指定查找共享库的路径</span><br>    <span class=\"hljs-built_in\">export</span> LIBRARY_PATH=<span class=\"hljs-variable\">$LIBRARY_PATH</span>:/usr/local/protobuf/lib/<br>    <span class=\"hljs-comment\">#执⾏程序搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$PATH</span>:/usr/local/protobuf/bin/<br>    <span class=\"hljs-comment\">#c程序头⽂件搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> C_INCLUDE_PATH=<span class=\"hljs-variable\">$C_INCLUDE_PATH</span>:/usr/local/protobuf/include/<br>    <span class=\"hljs-comment\">#c++程序头⽂件搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> CPLUS_INCLUDE_PATH=<span class=\"hljs-variable\">$CPLUS_INCLUDE_PATH</span>:/usr/local/protobuf/include/<br>    <span class=\"hljs-comment\">#pkg-config 路径</span><br>    <span class=\"hljs-built_in\">export</span> PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/<br>    1.18 <span class=\"hljs-built_in\">source</span> /etc/profile<br>    1.19  protoc --version <br>    执行之后应该看到==libprotoc 3.21.12==如果出现这个版本信息则安装成功<br>    <br>git <span class=\"hljs-built_in\">clone</span> https://github.com/protobuf-c/protobuf-c  //按照readme文档可以编译<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/eclipse/paho.mqtt.c.git<br>\t<br>\tbash<br>    <span class=\"hljs-built_in\">cd</span> paho.mqtt.c<br>    <span class=\"hljs-built_in\">mkdir</span> build &amp;&amp; <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    make<br>    <span class=\"hljs-built_in\">sudo</span> make install<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/eclipse/paho.mqtt.cpp.git（1.3.10）  //安装失败<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/aliyun/aliyun-oss-cpp-sdk.git<br><br>    <span class=\"hljs-built_in\">cd</span> &lt;path/to/aliyun-oss-cpp-sdk&gt;<br>    <span class=\"hljs-built_in\">mkdir</span> build<br>    <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    <br>    <span class=\"hljs-built_in\">sudo</span> apt-get install libcurl4-openssl-dev libssl-dev<br>    make<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/open-source-parsers/jsoncpp.git<br><br>    <span class=\"hljs-built_in\">mkdir</span> -p build/debug<br>    <span class=\"hljs-built_in\">cd</span> build/debug<br>    cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G <span class=\"hljs-string\">&quot;Unix Makefiles&quot;</span> ../..<br>    make<br><br><span class=\"hljs-built_in\">sudo</span> apt install libapr1-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt install libaprutil1-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt install libmxml-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install uuid-dev <br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/aliyun/aliyun-oss-c-sdk.git //好像安装有点问题<br><br>    ./configure<br>    make<br>    make install<br><br>https://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/102787/cn_zh/1558078831675/VodSDK-C_1.0.0.tar.gz?spm=a2c4g.11186623.0.0.65c71cd50vaal4&amp;file=VodSDK-C_1.0.0.tar.gz //不知道怎么安装<br><br>//找阿里云帮忙实现：[使用C/C++ SDK上传文件_视频点播(VOD)-阿里云帮助中心 (aliyun.com)](https://help.aliyun.com/zh/vod/developer-reference/upload-sdk-for-c-or-cpp?spm=a2c4g.11186623.0.0.61dd2c16XPqrTn#multiTask7060)<br><br>    cmake .<br>    make<br>    make install<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/ithewei/libhv<br><br>    <span class=\"hljs-built_in\">mkdir</span> build<br>    <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    cmake --build .<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libboost-all-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/inotify-tools/inotify-tools.git//安装不知道成没成功<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libfreeimage3 libfreeimage-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/dpilger26/NumCpp.git<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libavformat-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libswscale-dev<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、在PC上编译运行应用\"><a href=\"#四、在PC上编译运行应用\" class=\"headerlink\" title=\"四、在PC上编译运行应用\"></a>四、在PC上编译运行应用</h2><p>make 编译程序</p>\n<p>make clean 清除编译</p>\n<p>头文件所在位置：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">/usr/i</span>nclude/<br><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span><br><br>cp  -r <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-regexp\">/ /u</span>sr<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-regexp\">/  /</span><span class=\"hljs-regexp\">/缺失upload.h头文件，将他进行复制到usr/i</span>nclude/文件夹当中<br><br>- 安装依赖<br>  sudo apt install libjson-c-dev<br><br>- 编译<br>  make<br><br>- 安装<br>  sudo make install<br><br>- 更新系统动态库<br>  sudo ldconfig<br></code></pre></td></tr></table></figure>\n\n<p>运行项目</p>\n<p>先获得虚拟设备参数，导入config中”&#x2F;home&#x2F;user&#x2F;creality&#x2F;userdata&#x2F;config&#x2F;“</p>\n<p>开始编译主程序  make clean &amp;&amp; make -j4（j4、j8代表进程速度，越高越快）</p>\n<p>获得各个文件的单独运行包，在vscode中运行.&#x2F;master-server，即可跑通实体机</p>\n<p>linux中&#x2F;opt目录用来<strong>安装附加软件包</strong>，是用户级的程序目录，可以理解为D:&#x2F;Software。 安装到&#x2F;opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。 opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。</p>\n<h2 id=\"五、交叉编译到目标板运行\"><a href=\"#五、交叉编译到目标板运行\" class=\"headerlink\" title=\"五、交叉编译到目标板运行\"></a>五、交叉编译到目标板运行</h2><p>交叉编译讲解：<a href=\"https://blog.csdn.net/lc315yuhuofei/article/details/103782049\">交叉编译入门及必要配置方法总结_gcc-manifest.txt-CSDN博客</a></p>\n<p>虚拟机交叉编译教程：<a href=\"https://www.cnblogs.com/zblblog/p/18136017\">立创泰山派学习05-虚拟机ubuntu安装交叉编译工具 - zbl1118 - 博客园 (cnblogs.com)</a></p>\n<h2 id=\"六、知识点总结\"><a href=\"#六、知识点总结\" class=\"headerlink\" title=\"六、知识点总结\"></a>六、知识点总结</h2><h4 id=\"1-交叉编译知识点\"><a href=\"#1-交叉编译知识点\" class=\"headerlink\" title=\"1.交叉编译知识点\"></a>1.交叉编译知识点</h4><p>交叉编译的目的是在一台架构A主机平台上编译另一种架构B目标平台的二进制文件或者库，交叉编译在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。 完整的Linux编译环境需要很多支持包，交叉编译使我们不需要花时间将各种支持包移植到目标板上</p>\n<p>主机平台：PC端 Windows 10 专业工作站版</p>\n<p>目标平台：Linux Ubuntu22.04.4&#x2F;VMware® Workstation 16 Pro</p>\n<p>通常交叉编译工具链命名规则为：arch-core-kernel-system</p>\n<p>arch：目标平台架构，如上文提到的arm，mips等；</p>\n<p>core：有两种种情况，第一是CPU Core，如Cortex A8；第二是指定工具链的供应商。如果没有特殊指定，则留空不填。这一组命名比较灵活，有以厂家名称命名的，有以开发者命名的，也有以开发板命名的，或者直接是none或cross的；</p>\n<p>kernel： 目标平台的OS，见过的有linux，uclinux，bare-metal（无OS）；</p>\n<p>system：嵌入式应用二进制接口（Embedded Application Binary Interface），交叉编译工具链所选择的库函数和目标映像的规范，如gnu，gnueabi等。其中gnu等价于glibc+oabi；gnueabi等价于glibc+eabi。若不指定，则也可以留空不填；</p>\n<p>上述命名规则并不是统一的规范，使用的时候作为参考就行。我使用的交叉编译工具链名称为：gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu。</p>\n<p>获取交叉编译工具链两个途径：</p>\n<p>直接下载知名厂家已经编译好的工具链。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">https:<span class=\"hljs-regexp\">//</span>www.linaro.org<span class=\"hljs-regexp\">/downloads/</span><br>http:<span class=\"hljs-regexp\">//</span>ftp.arm.linux.org.uk<span class=\"hljs-regexp\">/pub/</span>armlinux<span class=\"hljs-regexp\">/toolchain/</span><br>http:<span class=\"hljs-regexp\">//</span>www.denx.de<span class=\"hljs-regexp\">/en/</span>Software/WebHome<br>https:<span class=\"hljs-regexp\">//</span>launchpad.net/gcc-arm-embedded<br></code></pre></td></tr></table></figure>\n\n<p>自己编译交叉编译工具链</p>\n<p>编译交叉编译工具链的工具：crosstool-NG、Buildroot、Embedded Linux Development Kit (ELDK)</p>\n<h4 id=\"2-Linux-系统编程知识点\"><a href=\"#2-Linux-系统编程知识点\" class=\"headerlink\" title=\"2.Linux 系统编程知识点\"></a>2.Linux 系统编程知识点</h4><p><a href=\"https://developer.aliyun.com/article/1457993\">Linux 系统编程从入门到进阶 学习指南-阿里云开发者社区 (aliyun.com)</a></p>\n<p>什么是库函数？</p>\n<p>库函数是预编写的代码，存储在库文件中，供程序员使用。它们通过系统调用和操作系统的内核通信。例如，printf（） 是 C 语言的一个库函数，它内部使用 write（） 系统调用来和内核进行交互。</p>\n<p><a href=\"https://www.cnblogs.com/realjimmy/p/12844359.html\">Linux C函数库大全 - 一觉醒来写程序 - 博客园 (cnblogs.com)</a></p>\n<p>参考手册：<a href=\"https://wizardforcel.gitbooks.io/linux-c-api-ref/content/index.html\">介紹 | Linux C API 参考手册 (gitbooks.io)</a></p>\n<p><strong>进程究竟是什么？</strong></p>\n<p>每当你启动一个程序，Linux 系统都会创建一个新的进程。这个进程有它自己的内存地址、系统资源和状态。简而言之，进程是程序的一个运行实例。</p>\n<p><strong>1.管道 （Pipe）</strong></p>\n<p>管道是 Linux 中用于进程间通信的一种机制。它们分为两种类型：<strong>匿名管道</strong>和<strong>有名管道</strong>。</p>\n<p><strong>2.信号 (Signals)</strong></p>\n<p>在 Linux 中，信号是一种用于进程间通信（IPC）的机制，允许操作系统或一个进程向另一个进程发送简单的消息。信号主要用于传递关于系统事件的通知，例如中断请求、程序异常、或其他重要事件。每个信号代表了一个特定类型的事件，并且进程可以根据收到的信号执行相应的动作。</p>\n<p>信号是异步的，意味着它们可以在任何时间点被发送到进程，通常与进程的正常控制流无关。信号的使用为进程提供了一种处理外部事件和错误的方式。</p>\n<p><strong>3.文件(Files)</strong></p>\n<p>文件在 Linux 系统中是一种基本的持久化存储机制，可用于<strong>进程间通信</strong>。多个进程可以通过对同一个文件的读取和写入来共享信息。</p>\n<p><strong>4.信号量(Semaphores)</strong><br>信号量是一种在进程间或同一进程的不同线程间提供同步的机制。它是一个计数器，用于控制对共享资源的访问。当计数器值大于0时，表示资源可用；当值为0时，表示资源被占用。进程在访问共享资源前必须减少（wait）信号量，访问后必须增加（post）信号量。</p>\n<p><strong>5.共享内存(Shared Memory)</strong><br>在 Linux 中，共享内存是进程间通信（IPC）的一种形式。当多个进程需要访问相同的数据时，使用共享内存是一种高效的方式。它允许两个或多个进程访问同一个物理内存区域，这使得数据传输不需要通过内核空间，从而提高了通信效率。</p>\n<p><strong>6.消息队列 (Message Queues)</strong></p>\n<p>消息队列是一种允许一个或多个进程向其写入消息，并由一个或多个进程读取消息的 IPC 机制。每条消息都由一个消息队列标识符（ID）识别， 且可以携带一个特定的类型。消息队列允许不同进程非阻塞地发送和接收记录或数据块，这些记录可以是不同类型和大小的。</p>\n<p><strong>7.套接字 (Sockets)</strong></p>\n<p>套接字是一种在不同进程间进行数据交换的通信机制。在 Linux 中，套接字可以用于同一台机器上的进程间通信（IPC）或不同机器上的网络通信。套接字支持多种通信协议，最常见的是TCP（可靠的、连接导向的协议）和UDP（无连接的、不可靠的协议）。</p>\n<h2 id=\"七、常用指令\"><a href=\"#七、常用指令\" class=\"headerlink\" title=\"七、常用指令\"></a>七、常用指令</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\"><br>uname <span class=\"hljs-operator\">-</span>m <span class=\"hljs-comment\">/*查看系统架构*/</span><br>lscpu <span class=\"hljs-comment\">/*查看更多CPU情况*/</span><br><br>tar <span class=\"hljs-operator\">-</span>vxf [xxx.tar.gz压缩包]<br>mv [现在的位置] [将要移动的位置]<br><br>pip list <span class=\"hljs-comment\">/*罗列所有的安装包*/</span><br><br>make clean  <span class=\"hljs-comment\">/*清理编译*/</span><br>make <span class=\"hljs-operator\">&amp;&amp;</span> make install  <span class=\"hljs-comment\">/*开始编译*/</span><br><br>cp  <span class=\"hljs-operator\">-</span>r <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-operator\">/</span> <span class=\"hljs-regexp\">/usr/</span>include<span class=\"hljs-regexp\">/vod_sdk/</span>  <span class=\"hljs-comment\">/*复制文件夹到另一个文件夹上*/</span><br><br>sudo apt<span class=\"hljs-operator\">-</span><span class=\"hljs-keyword\">get</span> autoremove xxx  <span class=\"hljs-comment\">/*卸载*/</span><br></code></pre></td></tr></table></figure>\n\n<p>常用指令汇总：<a href=\"https://developer.aliyun.com/article/1561151?spm=a2c6h.12873639.article-detail.33.657a1be0lxiKr4&scm=20140722.ID_community@@article@@1561151._.ID_community@@article@@1561151-OR_rec-V_1-RL_community@@article@@1457993\">linux 常用命令【编程必备】-阿里云开发者社区 (aliyun.com)</a></p>\n","excerpt":"","more":"<h1 id=\"Linux环境安装和配置\"><a href=\"#Linux环境安装和配置\" class=\"headerlink\" title=\"Linux环境安装和配置\"></a>Linux环境安装和配置</h1><h2 id=\"一、安装VMware（16-17）\"><a href=\"#一、安装VMware（16-17）\" class=\"headerlink\" title=\"一、安装VMware（16&#x2F;17）\"></a>一、安装VMware（16&#x2F;17）</h2><p>安装版本：VMware® Workstation 16 Pro</p>\n<p>安装保姆链接：<a href=\"https://blog.csdn.net/weixin_74195551/article/details/127288338\">安装虚拟机（VMware）保姆级教程（附安装包）_vmware虚拟机-CSDN博客</a></p>\n<p>破解链接：<a href=\"https://www.52pojie.cn/thread-1804571-1-1.html\">VMware Workstation虚拟机合集+激活密钥_Win+Linux_10∕11∕12∕14∕15∕16∕17 - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>\n<p>破解码：ZF3R0-FHED2-M80TY-8QYGC-NPKYF</p>\n<p>MobaXtem链接：<a href=\"https://blog.csdn.net/qq_42578036/article/details/107710339\">VMware虚拟机配置、连接MobaXterm_mobaxtem怎么连接虚拟机-CSDN博客</a></p>\n<p>终极链接：<a href=\"https://blog.csdn.net/lhl_blog/article/details/123406322\">保姆级教程|VMware安装Ubuntu20.04(系统安装+网络配置+open-vm-tools安装+国内软件源更新)-CSDN博客</a></p>\n<p>报错：</p>\n<p>VMware Workstation 无法连接到虚拟机</p>\n<p>点开虚拟机“属性”，在“兼容性”里面设置为以管理员身份运行此程序。</p>\n<p>VMware创建新的虚拟机，弹出“您已输入用户名，客户机操作将保留此用户名”错误提示</p>\n<p>【root】被系统占用了，让用户新建一个低权限的账户，修改用户名，不要再使用【root】，如：改为【user】或【your_name】</p>\n<p>VMware Ubuntu ping 百度不通</p>\n<p>选择 虚拟机-&gt;设置-&gt;网络适配器-&gt;自定义特定虚拟网络-&gt;选择VMnet1(桥接网络)-&gt;确定</p>\n<p>目的是确定我们使用的是VMnet1(桥接网络)，之后就可以ping通</p>\n<p>安装磁盘管理工具gparted并运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> apt install gparted<br><span class=\"hljs-built_in\">sudo</span> gparted<br></code></pre></td></tr></table></figure>\n\n<p>报错是权限不足,那么修改挂载点的权限即可(注:所谓”挂载”的概念体现的是Linux”一切皆文件”的思想,物理世界中的一块硬盘在Linux系统的逻辑中也被映射为一个文件)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> mount -o remount -rw / <br><span class=\"hljs-built_in\">sudo</span> mount -o remount -rw /var/snap/firefox/common/host-hunspell<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、安装Ubuntu（22-04）\"><a href=\"#二、安装Ubuntu（22-04）\" class=\"headerlink\" title=\"二、安装Ubuntu（22.04）\"></a>二、安装Ubuntu（22.04）</h2><p>安装版本：Linux Ubuntu22.04.4</p>\n<p>安装保姆链接：<a href=\"https://blog.csdn.net/weixin_42640280/article/details/128351105\">ubuntu 22.04下载安装_ubuntu22.04下载-CSDN博客</a></p>\n<p>清华源：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/\">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>\n<p>步骤指令</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">sudo su <span class=\"hljs-comment\">//进入管理者模式</span><br><br>apt-<span class=\"hljs-built_in\">get</span> <span class=\"hljs-keyword\">update</span> <span class=\"hljs-comment\">//更新apt</span><br><br>apt-<span class=\"hljs-built_in\">get</span> install net-tools <span class=\"hljs-comment\">//安装ifconfig相关配件</span><br><br>apt-<span class=\"hljs-built_in\">get</span> install openssh-server <span class=\"hljs-comment\">//下载和安装ssh</span><br><br>service ssh restart <span class=\"hljs-comment\">//启动ssh</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三、安装应用依赖第三方库\"><a href=\"#三、安装应用依赖第三方库\" class=\"headerlink\" title=\"三、安装应用依赖第三方库\"></a>三、安装应用依赖第三方库</h2><p>将工程导入虚拟机中，tar -xvf 解压工程包</p>\n<p>git clone 的所有包的位置可以随机放置，但是需要对每个包进行编译，编译参照readme文件或者网上查找，如果下载不下来，可以直接去官网直接下载zip格式，使用unzip xxx.zip进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> apt-get install -y build-essential libsdl2-dev<br><br>git <span class=\"hljs-built_in\">clone</span> http://172.23.88.26:3333/zhangyufeng/libcrlog.git  //按照readme文档可以编译<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install  libjson-c-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/protocolbuffers/protobuf.git<br>\t//没安装成功，bash: ./autogen.sh: No such file or directory<br>\t//在晚上的时候安装成功了，原因是高版本的缺失了./autogen.sh脚本，进行降版本就可以了，花费4小时<br>\t//终极感谢博主：https://blog.csdn.net/jax_fanyang/article/details/135937002<br>\t<br>    1.11 点击链接下载3.21.12版本源码。https://github.com/protocolbuffers/protobuf/releases/tag/v2<br>    1.12 <span class=\"hljs-built_in\">cd</span> protobuf-21.12/<br>    1.13 ./autogen.sh<br>    1.14 ./configure --prefix=/usr/local/protobuf<br>    1.15 make<br>    1.16 <span class=\"hljs-built_in\">sudo</span> make install<br>    1.17 <span class=\"hljs-built_in\">sudo</span> vim /etc/profile<br>    1.18 <span class=\"hljs-comment\">#添加以下内容：</span><br><br>    <span class=\"hljs-comment\">#(动态库搜索路径) 程序加载运⾏期间查找动态链接库时指定除了系统默认路径之外的其他路径</span><br>    <span class=\"hljs-built_in\">export</span> LD_LIBRARY_PATH=<span class=\"hljs-variable\">$LD_LIBRARY_PATH</span>:/usr/local/protobuf/lib/<br>    <span class=\"hljs-comment\">#(静态库搜索路径) 程序编译期间查找动态链接库时指定查找共享库的路径</span><br>    <span class=\"hljs-built_in\">export</span> LIBRARY_PATH=<span class=\"hljs-variable\">$LIBRARY_PATH</span>:/usr/local/protobuf/lib/<br>    <span class=\"hljs-comment\">#执⾏程序搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$PATH</span>:/usr/local/protobuf/bin/<br>    <span class=\"hljs-comment\">#c程序头⽂件搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> C_INCLUDE_PATH=<span class=\"hljs-variable\">$C_INCLUDE_PATH</span>:/usr/local/protobuf/include/<br>    <span class=\"hljs-comment\">#c++程序头⽂件搜索路径</span><br>    <span class=\"hljs-built_in\">export</span> CPLUS_INCLUDE_PATH=<span class=\"hljs-variable\">$CPLUS_INCLUDE_PATH</span>:/usr/local/protobuf/include/<br>    <span class=\"hljs-comment\">#pkg-config 路径</span><br>    <span class=\"hljs-built_in\">export</span> PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/<br>    1.18 <span class=\"hljs-built_in\">source</span> /etc/profile<br>    1.19  protoc --version <br>    执行之后应该看到==libprotoc 3.21.12==如果出现这个版本信息则安装成功<br>    <br>git <span class=\"hljs-built_in\">clone</span> https://github.com/protobuf-c/protobuf-c  //按照readme文档可以编译<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/eclipse/paho.mqtt.c.git<br>\t<br>\tbash<br>    <span class=\"hljs-built_in\">cd</span> paho.mqtt.c<br>    <span class=\"hljs-built_in\">mkdir</span> build &amp;&amp; <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    make<br>    <span class=\"hljs-built_in\">sudo</span> make install<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/eclipse/paho.mqtt.cpp.git（1.3.10）  //安装失败<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/aliyun/aliyun-oss-cpp-sdk.git<br><br>    <span class=\"hljs-built_in\">cd</span> &lt;path/to/aliyun-oss-cpp-sdk&gt;<br>    <span class=\"hljs-built_in\">mkdir</span> build<br>    <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    <br>    <span class=\"hljs-built_in\">sudo</span> apt-get install libcurl4-openssl-dev libssl-dev<br>    make<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/open-source-parsers/jsoncpp.git<br><br>    <span class=\"hljs-built_in\">mkdir</span> -p build/debug<br>    <span class=\"hljs-built_in\">cd</span> build/debug<br>    cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G <span class=\"hljs-string\">&quot;Unix Makefiles&quot;</span> ../..<br>    make<br><br><span class=\"hljs-built_in\">sudo</span> apt install libapr1-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt install libaprutil1-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt install libmxml-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install uuid-dev <br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/aliyun/aliyun-oss-c-sdk.git //好像安装有点问题<br><br>    ./configure<br>    make<br>    make install<br><br>https://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/102787/cn_zh/1558078831675/VodSDK-C_1.0.0.tar.gz?spm=a2c4g.11186623.0.0.65c71cd50vaal4&amp;file=VodSDK-C_1.0.0.tar.gz //不知道怎么安装<br><br>//找阿里云帮忙实现：[使用C/C++ SDK上传文件_视频点播(VOD)-阿里云帮助中心 (aliyun.com)](https://help.aliyun.com/zh/vod/developer-reference/upload-sdk-for-c-or-cpp?spm=a2c4g.11186623.0.0.61dd2c16XPqrTn#multiTask7060)<br><br>    cmake .<br>    make<br>    make install<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/ithewei/libhv<br><br>    <span class=\"hljs-built_in\">mkdir</span> build<br>    <span class=\"hljs-built_in\">cd</span> build<br>    cmake ..<br>    cmake --build .<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libboost-all-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/inotify-tools/inotify-tools.git//安装不知道成没成功<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libfreeimage3 libfreeimage-dev<br><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/dpilger26/NumCpp.git<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libavformat-dev<br><br><span class=\"hljs-built_in\">sudo</span> apt-get install libswscale-dev<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、在PC上编译运行应用\"><a href=\"#四、在PC上编译运行应用\" class=\"headerlink\" title=\"四、在PC上编译运行应用\"></a>四、在PC上编译运行应用</h2><p>make 编译程序</p>\n<p>make clean 清除编译</p>\n<p>头文件所在位置：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">/usr/i</span>nclude/<br><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span><br><br>cp  -r <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-regexp\">/ /u</span>sr<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-regexp\">/  /</span><span class=\"hljs-regexp\">/缺失upload.h头文件，将他进行复制到usr/i</span>nclude/文件夹当中<br><br>- 安装依赖<br>  sudo apt install libjson-c-dev<br><br>- 编译<br>  make<br><br>- 安装<br>  sudo make install<br><br>- 更新系统动态库<br>  sudo ldconfig<br></code></pre></td></tr></table></figure>\n\n<p>运行项目</p>\n<p>先获得虚拟设备参数，导入config中”&#x2F;home&#x2F;user&#x2F;creality&#x2F;userdata&#x2F;config&#x2F;“</p>\n<p>开始编译主程序  make clean &amp;&amp; make -j4（j4、j8代表进程速度，越高越快）</p>\n<p>获得各个文件的单独运行包，在vscode中运行.&#x2F;master-server，即可跑通实体机</p>\n<p>linux中&#x2F;opt目录用来<strong>安装附加软件包</strong>，是用户级的程序目录，可以理解为D:&#x2F;Software。 安装到&#x2F;opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。 opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。</p>\n<h2 id=\"五、交叉编译到目标板运行\"><a href=\"#五、交叉编译到目标板运行\" class=\"headerlink\" title=\"五、交叉编译到目标板运行\"></a>五、交叉编译到目标板运行</h2><p>交叉编译讲解：<a href=\"https://blog.csdn.net/lc315yuhuofei/article/details/103782049\">交叉编译入门及必要配置方法总结_gcc-manifest.txt-CSDN博客</a></p>\n<p>虚拟机交叉编译教程：<a href=\"https://www.cnblogs.com/zblblog/p/18136017\">立创泰山派学习05-虚拟机ubuntu安装交叉编译工具 - zbl1118 - 博客园 (cnblogs.com)</a></p>\n<h2 id=\"六、知识点总结\"><a href=\"#六、知识点总结\" class=\"headerlink\" title=\"六、知识点总结\"></a>六、知识点总结</h2><h4 id=\"1-交叉编译知识点\"><a href=\"#1-交叉编译知识点\" class=\"headerlink\" title=\"1.交叉编译知识点\"></a>1.交叉编译知识点</h4><p>交叉编译的目的是在一台架构A主机平台上编译另一种架构B目标平台的二进制文件或者库，交叉编译在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。 完整的Linux编译环境需要很多支持包，交叉编译使我们不需要花时间将各种支持包移植到目标板上</p>\n<p>主机平台：PC端 Windows 10 专业工作站版</p>\n<p>目标平台：Linux Ubuntu22.04.4&#x2F;VMware® Workstation 16 Pro</p>\n<p>通常交叉编译工具链命名规则为：arch-core-kernel-system</p>\n<p>arch：目标平台架构，如上文提到的arm，mips等；</p>\n<p>core：有两种种情况，第一是CPU Core，如Cortex A8；第二是指定工具链的供应商。如果没有特殊指定，则留空不填。这一组命名比较灵活，有以厂家名称命名的，有以开发者命名的，也有以开发板命名的，或者直接是none或cross的；</p>\n<p>kernel： 目标平台的OS，见过的有linux，uclinux，bare-metal（无OS）；</p>\n<p>system：嵌入式应用二进制接口（Embedded Application Binary Interface），交叉编译工具链所选择的库函数和目标映像的规范，如gnu，gnueabi等。其中gnu等价于glibc+oabi；gnueabi等价于glibc+eabi。若不指定，则也可以留空不填；</p>\n<p>上述命名规则并不是统一的规范，使用的时候作为参考就行。我使用的交叉编译工具链名称为：gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu。</p>\n<p>获取交叉编译工具链两个途径：</p>\n<p>直接下载知名厂家已经编译好的工具链。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">https:<span class=\"hljs-regexp\">//</span>www.linaro.org<span class=\"hljs-regexp\">/downloads/</span><br>http:<span class=\"hljs-regexp\">//</span>ftp.arm.linux.org.uk<span class=\"hljs-regexp\">/pub/</span>armlinux<span class=\"hljs-regexp\">/toolchain/</span><br>http:<span class=\"hljs-regexp\">//</span>www.denx.de<span class=\"hljs-regexp\">/en/</span>Software/WebHome<br>https:<span class=\"hljs-regexp\">//</span>launchpad.net/gcc-arm-embedded<br></code></pre></td></tr></table></figure>\n\n<p>自己编译交叉编译工具链</p>\n<p>编译交叉编译工具链的工具：crosstool-NG、Buildroot、Embedded Linux Development Kit (ELDK)</p>\n<h4 id=\"2-Linux-系统编程知识点\"><a href=\"#2-Linux-系统编程知识点\" class=\"headerlink\" title=\"2.Linux 系统编程知识点\"></a>2.Linux 系统编程知识点</h4><p><a href=\"https://developer.aliyun.com/article/1457993\">Linux 系统编程从入门到进阶 学习指南-阿里云开发者社区 (aliyun.com)</a></p>\n<p>什么是库函数？</p>\n<p>库函数是预编写的代码，存储在库文件中，供程序员使用。它们通过系统调用和操作系统的内核通信。例如，printf（） 是 C 语言的一个库函数，它内部使用 write（） 系统调用来和内核进行交互。</p>\n<p><a href=\"https://www.cnblogs.com/realjimmy/p/12844359.html\">Linux C函数库大全 - 一觉醒来写程序 - 博客园 (cnblogs.com)</a></p>\n<p>参考手册：<a href=\"https://wizardforcel.gitbooks.io/linux-c-api-ref/content/index.html\">介紹 | Linux C API 参考手册 (gitbooks.io)</a></p>\n<p><strong>进程究竟是什么？</strong></p>\n<p>每当你启动一个程序，Linux 系统都会创建一个新的进程。这个进程有它自己的内存地址、系统资源和状态。简而言之，进程是程序的一个运行实例。</p>\n<p><strong>1.管道 （Pipe）</strong></p>\n<p>管道是 Linux 中用于进程间通信的一种机制。它们分为两种类型：<strong>匿名管道</strong>和<strong>有名管道</strong>。</p>\n<p><strong>2.信号 (Signals)</strong></p>\n<p>在 Linux 中，信号是一种用于进程间通信（IPC）的机制，允许操作系统或一个进程向另一个进程发送简单的消息。信号主要用于传递关于系统事件的通知，例如中断请求、程序异常、或其他重要事件。每个信号代表了一个特定类型的事件，并且进程可以根据收到的信号执行相应的动作。</p>\n<p>信号是异步的，意味着它们可以在任何时间点被发送到进程，通常与进程的正常控制流无关。信号的使用为进程提供了一种处理外部事件和错误的方式。</p>\n<p><strong>3.文件(Files)</strong></p>\n<p>文件在 Linux 系统中是一种基本的持久化存储机制，可用于<strong>进程间通信</strong>。多个进程可以通过对同一个文件的读取和写入来共享信息。</p>\n<p><strong>4.信号量(Semaphores)</strong><br>信号量是一种在进程间或同一进程的不同线程间提供同步的机制。它是一个计数器，用于控制对共享资源的访问。当计数器值大于0时，表示资源可用；当值为0时，表示资源被占用。进程在访问共享资源前必须减少（wait）信号量，访问后必须增加（post）信号量。</p>\n<p><strong>5.共享内存(Shared Memory)</strong><br>在 Linux 中，共享内存是进程间通信（IPC）的一种形式。当多个进程需要访问相同的数据时，使用共享内存是一种高效的方式。它允许两个或多个进程访问同一个物理内存区域，这使得数据传输不需要通过内核空间，从而提高了通信效率。</p>\n<p><strong>6.消息队列 (Message Queues)</strong></p>\n<p>消息队列是一种允许一个或多个进程向其写入消息，并由一个或多个进程读取消息的 IPC 机制。每条消息都由一个消息队列标识符（ID）识别， 且可以携带一个特定的类型。消息队列允许不同进程非阻塞地发送和接收记录或数据块，这些记录可以是不同类型和大小的。</p>\n<p><strong>7.套接字 (Sockets)</strong></p>\n<p>套接字是一种在不同进程间进行数据交换的通信机制。在 Linux 中，套接字可以用于同一台机器上的进程间通信（IPC）或不同机器上的网络通信。套接字支持多种通信协议，最常见的是TCP（可靠的、连接导向的协议）和UDP（无连接的、不可靠的协议）。</p>\n<h2 id=\"七、常用指令\"><a href=\"#七、常用指令\" class=\"headerlink\" title=\"七、常用指令\"></a>七、常用指令</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\"><br>uname <span class=\"hljs-operator\">-</span>m <span class=\"hljs-comment\">/*查看系统架构*/</span><br>lscpu <span class=\"hljs-comment\">/*查看更多CPU情况*/</span><br><br>tar <span class=\"hljs-operator\">-</span>vxf [xxx.tar.gz压缩包]<br>mv [现在的位置] [将要移动的位置]<br><br>pip list <span class=\"hljs-comment\">/*罗列所有的安装包*/</span><br><br>make clean  <span class=\"hljs-comment\">/*清理编译*/</span><br>make <span class=\"hljs-operator\">&amp;&amp;</span> make install  <span class=\"hljs-comment\">/*开始编译*/</span><br><br>cp  <span class=\"hljs-operator\">-</span>r <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/include/</span>vod_sdk<span class=\"hljs-operator\">/</span> <span class=\"hljs-regexp\">/usr/</span>include<span class=\"hljs-regexp\">/vod_sdk/</span>  <span class=\"hljs-comment\">/*复制文件夹到另一个文件夹上*/</span><br><br>sudo apt<span class=\"hljs-operator\">-</span><span class=\"hljs-keyword\">get</span> autoremove xxx  <span class=\"hljs-comment\">/*卸载*/</span><br></code></pre></td></tr></table></figure>\n\n<p>常用指令汇总：<a href=\"https://developer.aliyun.com/article/1561151?spm=a2c6h.12873639.article-detail.33.657a1be0lxiKr4&scm=20140722.ID_community@@article@@1561151._.ID_community@@article@@1561151-OR_rec-V_1-RL_community@@article@@1457993\">linux 常用命令【编程必备】-阿里云开发者社区 (aliyun.com)</a></p>\n"},{"title":"Github+HEXO实现网站DIY","_content":"\n# Work No.6\n\n### 创建github.page网页\n\n点击Repositories，选择新建Repositories仓库\n\n在仓库名字Repository name栏填写网页的网址，后缀需要添加 .github.io\n\n例如 webname.github.io\n\n![image-20240724153741084.png](https://s2.loli.net/2024/07/25/CagbJOAwjnGZl5h.png)\n\n之后点击 Create repository ，创建该仓库，其他无需调整\n\n之后需要创建一个 index.html 文件，用于后续能够选取分支\n\n![image-20240724154237430.png](https://s2.loli.net/2024/07/25/fCE81aVXuvQHwkK.png)\n\n文件名字输入 index.html，内容为 `<hl> hello </hl>` 这个文件会初始化成一个网页，网页的内容只有 hello，这个随便填就行，后续会用模板，不用考虑这个\n\n![image-20240724154427037.png](https://s2.loli.net/2024/07/25/xcCAzGZfilE8pXI.png)\n\n进入仓库，选择 Setting ，点击 pages ，在 branch 上选择 main 分支（刚刚创建文件也是为了创建这个分支），点击 save 保存，之后等待几分钟，就会出现创建的网址，点击 visit site 即可进入建立的网页\n\n![image-20240724155135615.png](https://s2.loli.net/2024/07/25/iJS68ZOUrkLHKBo.png)\n\n完成这一步之后，就可以得到一个”hello“的网页，该网页没有任何排版和格式\n\n### 配置HEXO并进行部署\n\n打开git bash，执行如下命令安装hexo\n\n```\n\t$ npm install -g hexo-cli # 此命令完成对 hexo 的安装\n```\n\n如果没有安装npm、git、node.js的话\n\nnode.js参考https://blog.csdn.net/yaorongke/article/details/119084295\n\ngit安装参考https://blog.csdn.net/mukes/article/details/115693833\n\n之后随便在想要的地方建一个文件夹，这个文件夹的作用是用于博客文章存放和仓库交互，例如<blog>\n\n进入该文件，将该文件初始化\n\n```\n\t$ cd blog # 进入该文件夹\n\t$ hexo init # 该命令完成 hexo 在本地博客目录的初始化\n```\n\n之后生成网页的静态文件，如果需要更新网页的配置，需要先清理，在重新生成\n\n```\n\t$ hexo g # 生成静态文件，生成的文件在public文件夹里面\n\t\n\t$ hexo clean # 清除生成的静态文件\n```\n\n可以进行本地预览，本地预览的ctrl+c会退出运行，所以用右键复制网址到网页上预览\n\n```\n\t$ hexo s # 开启本地预览\n```\n\n安装部署插件\n\n```\n\t$ npm install hexo-deployer-git --save # 安装部署插件\n```\n\n`hexo` 有 2 种 `_config.yml` 文件，一个是根目录下的全局的 `_config.yml`，一个是各个主体 `theme` 下的 `_config.yml`。将前者称为站点配置文件， 后者称为主题配置文件。打开根目录下站点配置文件 `_config.yml`，配置有关 `deploy`和`url `的部分：\n\n```\n\t# URL\n\t## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\n\turl: GitHub pages的网址，例如https://GitHub用户名/仓库名               //修改这个地方，需要把网址改对，否则网页没有格式\n\tpermalink: :year/:month/:day/:title/\n\tpermalink_defaults:\n\tpretty_urls:\n\t  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n\t  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\t\n\t# Deployment\n\t## Docs: https://hexo.io/docs/one-command-deployment\n\tdeploy:\n\t  type: git\n\t  repo: git@github.com:GitHub账户名/仓库名.github.io.git\n\t  branch: master #如果分支是main记得修改，需要推送到哪个分支，就选择哪个分支\n```\n\n![image-20240724161404111.png](https://s2.loli.net/2024/07/25/Us5zgjtJm8fKQ6X.png)\n\n部署到 GitHub\n\n```\n\t$ hexo d # 将public里面的文件发送到云端GitHub上面\n```\n\n之后就可以刷新网页看到上传上去的网页，就拥有了自己的网页\n\n### 主题更换和选择\n\n我们上面用的是系统默认的主题，比较丑，所以我们可以使用hexo去挑选我们想要的主题类型\n\n[开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)](https://fluid-dev.github.io/hexo-fluid-docs/start/#更新主题)\n\n[Themes | Hexo](https://hexo.io/themes/)可以在这个网址里面挑选自己喜欢的\n\n本文挑选了fluid进行下载，选择直接下载zip包或者`git clone https://github.com/fluid-dev/hexo-theme-fluid.git`\n\n将下载的包解压放到 themes 文件夹里面，文件夹的名字改成fluid，最好不要文件夹套娃，如果出现，则将里面的文件全部移出来\n\n继续修改博客根目录下的 _config.yml 文件，注意，不是fluid里面的_config.yml文件\n\n```\n\tlanguage: zh-CN  # 指定语言，会影响主题显示的语言，按需修改\n\t\n\ttheme: fluid  # 指定主题\n```\n\n首次使用主题的「关于页」需要手动创建，打开git，输入代码\n\n```\n\t$ hexo new page about\n```\n\n创建成功后修改 `/source/about/index.md`，添加 `layout` 属性，`layout: about` 必须存在，并且不能修改成其他值，否则不会显示头像等样式\n\n```\n\t---\n\ttitle: 标题\n\tlayout: about\n\t---\n```\n\n之后重复上面的步骤先进行静态页面清除，再生成，之后上传到GitHub仓库中进行页面更新，等待几分钟后，如下图所示\n\n![image-20240724162639684.png](https://s2.loli.net/2024/07/25/2wTjGbtilvdkBpW.png)\n\n### 文档上传\n\n使用Typora进行.md文档的编写，非常好用的一个编辑器，绿色版可以网上搜索\n\n之后将md文件放到博客文件夹下面` source/_posts/ `文件夹下面\n\n之后使用vim编辑器对文档进行title和tag的编辑\n\n[Linux vi/vim | 菜鸟教程 (runoob.com)](https://www.runoob.com/linux/linux-vim.html)\n\n进入md文件，首先点击 i 进入编辑模式，在开头位置输入，其中title为文章的名字，tag为文章的标签，方便进行检索\n\n```\n\t---\n\ttitle： hello word\n\ttag： write\n\t---\n```\n\n编辑完成点击 Esc 退出报错，直接输入 :wq 保存编辑并且退出，完成文件的标记修改\n\n之后回到git bash中输入\n\n```\n\t$ hexo g # 生成静态文件，生成的文件在public文件夹里面\n\n\t$ hexo d # 将生成的文件导入GitHub站点\n```\n\n到此，等待几分钟后，你的文章就在你的网页上面出现了\n","source":"_posts/Work No.6.md","raw":"---\ntitle: Github+HEXO实现网站DIY\ntag: Github\ncategories: Github\n---\n\n# Work No.6\n\n### 创建github.page网页\n\n点击Repositories，选择新建Repositories仓库\n\n在仓库名字Repository name栏填写网页的网址，后缀需要添加 .github.io\n\n例如 webname.github.io\n\n![image-20240724153741084.png](https://s2.loli.net/2024/07/25/CagbJOAwjnGZl5h.png)\n\n之后点击 Create repository ，创建该仓库，其他无需调整\n\n之后需要创建一个 index.html 文件，用于后续能够选取分支\n\n![image-20240724154237430.png](https://s2.loli.net/2024/07/25/fCE81aVXuvQHwkK.png)\n\n文件名字输入 index.html，内容为 `<hl> hello </hl>` 这个文件会初始化成一个网页，网页的内容只有 hello，这个随便填就行，后续会用模板，不用考虑这个\n\n![image-20240724154427037.png](https://s2.loli.net/2024/07/25/xcCAzGZfilE8pXI.png)\n\n进入仓库，选择 Setting ，点击 pages ，在 branch 上选择 main 分支（刚刚创建文件也是为了创建这个分支），点击 save 保存，之后等待几分钟，就会出现创建的网址，点击 visit site 即可进入建立的网页\n\n![image-20240724155135615.png](https://s2.loli.net/2024/07/25/iJS68ZOUrkLHKBo.png)\n\n完成这一步之后，就可以得到一个”hello“的网页，该网页没有任何排版和格式\n\n### 配置HEXO并进行部署\n\n打开git bash，执行如下命令安装hexo\n\n```\n\t$ npm install -g hexo-cli # 此命令完成对 hexo 的安装\n```\n\n如果没有安装npm、git、node.js的话\n\nnode.js参考https://blog.csdn.net/yaorongke/article/details/119084295\n\ngit安装参考https://blog.csdn.net/mukes/article/details/115693833\n\n之后随便在想要的地方建一个文件夹，这个文件夹的作用是用于博客文章存放和仓库交互，例如<blog>\n\n进入该文件，将该文件初始化\n\n```\n\t$ cd blog # 进入该文件夹\n\t$ hexo init # 该命令完成 hexo 在本地博客目录的初始化\n```\n\n之后生成网页的静态文件，如果需要更新网页的配置，需要先清理，在重新生成\n\n```\n\t$ hexo g # 生成静态文件，生成的文件在public文件夹里面\n\t\n\t$ hexo clean # 清除生成的静态文件\n```\n\n可以进行本地预览，本地预览的ctrl+c会退出运行，所以用右键复制网址到网页上预览\n\n```\n\t$ hexo s # 开启本地预览\n```\n\n安装部署插件\n\n```\n\t$ npm install hexo-deployer-git --save # 安装部署插件\n```\n\n`hexo` 有 2 种 `_config.yml` 文件，一个是根目录下的全局的 `_config.yml`，一个是各个主体 `theme` 下的 `_config.yml`。将前者称为站点配置文件， 后者称为主题配置文件。打开根目录下站点配置文件 `_config.yml`，配置有关 `deploy`和`url `的部分：\n\n```\n\t# URL\n\t## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\n\turl: GitHub pages的网址，例如https://GitHub用户名/仓库名               //修改这个地方，需要把网址改对，否则网页没有格式\n\tpermalink: :year/:month/:day/:title/\n\tpermalink_defaults:\n\tpretty_urls:\n\t  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n\t  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\t\n\t# Deployment\n\t## Docs: https://hexo.io/docs/one-command-deployment\n\tdeploy:\n\t  type: git\n\t  repo: git@github.com:GitHub账户名/仓库名.github.io.git\n\t  branch: master #如果分支是main记得修改，需要推送到哪个分支，就选择哪个分支\n```\n\n![image-20240724161404111.png](https://s2.loli.net/2024/07/25/Us5zgjtJm8fKQ6X.png)\n\n部署到 GitHub\n\n```\n\t$ hexo d # 将public里面的文件发送到云端GitHub上面\n```\n\n之后就可以刷新网页看到上传上去的网页，就拥有了自己的网页\n\n### 主题更换和选择\n\n我们上面用的是系统默认的主题，比较丑，所以我们可以使用hexo去挑选我们想要的主题类型\n\n[开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)](https://fluid-dev.github.io/hexo-fluid-docs/start/#更新主题)\n\n[Themes | Hexo](https://hexo.io/themes/)可以在这个网址里面挑选自己喜欢的\n\n本文挑选了fluid进行下载，选择直接下载zip包或者`git clone https://github.com/fluid-dev/hexo-theme-fluid.git`\n\n将下载的包解压放到 themes 文件夹里面，文件夹的名字改成fluid，最好不要文件夹套娃，如果出现，则将里面的文件全部移出来\n\n继续修改博客根目录下的 _config.yml 文件，注意，不是fluid里面的_config.yml文件\n\n```\n\tlanguage: zh-CN  # 指定语言，会影响主题显示的语言，按需修改\n\t\n\ttheme: fluid  # 指定主题\n```\n\n首次使用主题的「关于页」需要手动创建，打开git，输入代码\n\n```\n\t$ hexo new page about\n```\n\n创建成功后修改 `/source/about/index.md`，添加 `layout` 属性，`layout: about` 必须存在，并且不能修改成其他值，否则不会显示头像等样式\n\n```\n\t---\n\ttitle: 标题\n\tlayout: about\n\t---\n```\n\n之后重复上面的步骤先进行静态页面清除，再生成，之后上传到GitHub仓库中进行页面更新，等待几分钟后，如下图所示\n\n![image-20240724162639684.png](https://s2.loli.net/2024/07/25/2wTjGbtilvdkBpW.png)\n\n### 文档上传\n\n使用Typora进行.md文档的编写，非常好用的一个编辑器，绿色版可以网上搜索\n\n之后将md文件放到博客文件夹下面` source/_posts/ `文件夹下面\n\n之后使用vim编辑器对文档进行title和tag的编辑\n\n[Linux vi/vim | 菜鸟教程 (runoob.com)](https://www.runoob.com/linux/linux-vim.html)\n\n进入md文件，首先点击 i 进入编辑模式，在开头位置输入，其中title为文章的名字，tag为文章的标签，方便进行检索\n\n```\n\t---\n\ttitle： hello word\n\ttag： write\n\t---\n```\n\n编辑完成点击 Esc 退出报错，直接输入 :wq 保存编辑并且退出，完成文件的标记修改\n\n之后回到git bash中输入\n\n```\n\t$ hexo g # 生成静态文件，生成的文件在public文件夹里面\n\n\t$ hexo d # 将生成的文件导入GitHub站点\n```\n\n到此，等待几分钟后，你的文章就在你的网页上面出现了\n","slug":"Work No.6","published":1,"date":"2024-07-25T01:14:04.256Z","updated":"2024-07-25T07:19:46.020Z","_id":"clz0qu1nf0004rcfb0jmy4t6u","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Work-No-6\"><a href=\"#Work-No-6\" class=\"headerlink\" title=\"Work No.6\"></a>Work No.6</h1><h3 id=\"创建github-page网页\"><a href=\"#创建github-page网页\" class=\"headerlink\" title=\"创建github.page网页\"></a>创建github.page网页</h3><p>点击Repositories，选择新建Repositories仓库</p>\n<p>在仓库名字Repository name栏填写网页的网址，后缀需要添加 .github.io</p>\n<p>例如 webname.github.io</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/CagbJOAwjnGZl5h.png\" alt=\"image-20240724153741084.png\"></p>\n<p>之后点击 Create repository ，创建该仓库，其他无需调整</p>\n<p>之后需要创建一个 index.html 文件，用于后续能够选取分支</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/fCE81aVXuvQHwkK.png\" alt=\"image-20240724154237430.png\"></p>\n<p>文件名字输入 index.html，内容为 <code>&lt;hl&gt; hello &lt;/hl&gt;</code> 这个文件会初始化成一个网页，网页的内容只有 hello，这个随便填就行，后续会用模板，不用考虑这个</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/xcCAzGZfilE8pXI.png\" alt=\"image-20240724154427037.png\"></p>\n<p>进入仓库，选择 Setting ，点击 pages ，在 branch 上选择 main 分支（刚刚创建文件也是为了创建这个分支），点击 save 保存，之后等待几分钟，就会出现创建的网址，点击 visit site 即可进入建立的网页</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/iJS68ZOUrkLHKBo.png\" alt=\"image-20240724155135615.png\"></p>\n<p>完成这一步之后，就可以得到一个”hello“的网页，该网页没有任何排版和格式</p>\n<h3 id=\"配置HEXO并进行部署\"><a href=\"#配置HEXO并进行部署\" class=\"headerlink\" title=\"配置HEXO并进行部署\"></a>配置HEXO并进行部署</h3><p>打开git bash，执行如下命令安装hexo</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">$ npm install -g hexo-<span class=\"hljs-keyword\">cli</span> <span class=\"hljs-meta\"># 此命令完成对 hexo 的安装</span><br></code></pre></td></tr></table></figure>\n\n<p>如果没有安装npm、git、node.js的话</p>\n<p>node.js参考<a href=\"https://blog.csdn.net/yaorongke/article/details/119084295\">https://blog.csdn.net/yaorongke/article/details/119084295</a></p>\n<p>git安装参考<a href=\"https://blog.csdn.net/mukes/article/details/115693833\">https://blog.csdn.net/mukes/article/details/115693833</a></p>\n<p>之后随便在想要的地方建一个文件夹，这个文件夹的作用是用于博客文章存放和仓库交互，例如<blog></p>\n<p>进入该文件，将该文件初始化</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">cd</span> blog <span class=\"hljs-comment\"># 进入该文件夹</span><br><span class=\"hljs-variable\">$</span> hexo init <span class=\"hljs-comment\"># 该命令完成 hexo 在本地博客目录的初始化</span><br></code></pre></td></tr></table></figure>\n\n<p>之后生成网页的静态文件，如果需要更新网页的配置，需要先清理，在重新生成</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo g <span class=\"hljs-comment\"># 生成静态文件，生成的文件在public文件夹里面</span><br><br><span class=\"hljs-variable\">$ </span>hexo clean <span class=\"hljs-comment\"># 清除生成的静态文件</span><br></code></pre></td></tr></table></figure>\n\n<p>可以进行本地预览，本地预览的ctrl+c会退出运行，所以用右键复制网址到网页上预览</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo s <span class=\"hljs-comment\"># 开启本地预览</span><br></code></pre></td></tr></table></figure>\n\n<p>安装部署插件</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">$ npm <span class=\"hljs-keyword\">install</span> hexo-deployer-git --save <span class=\"hljs-comment\"># 安装部署插件</span><br></code></pre></td></tr></table></figure>\n\n<p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为站点配置文件， 后者称为主题配置文件。打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code>和<code>url </code>的部分：</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"># URL<br>## <span class=\"hljs-keyword\">Set</span> your site url here. <span class=\"hljs-keyword\">For</span> example, <span class=\"hljs-keyword\">if</span> you use GitHub Page, <span class=\"hljs-keyword\">set</span> url <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;https://username.github.io/project&#x27;</span><br>url: GitHub pages的网址，例如https:<span class=\"hljs-comment\">//GitHub用户名/仓库名               //修改这个地方，需要把网址改对，否则网页没有格式</span><br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: <span class=\"hljs-keyword\">true</span> # <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">false</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">remove</span> trailing <span class=\"hljs-string\">&#x27;index.html&#x27;</span> <span class=\"hljs-keyword\">from</span> permalinks<br>  trailing_html: <span class=\"hljs-keyword\">true</span> # <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">false</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">remove</span> trailing <span class=\"hljs-string\">&#x27;.html&#x27;</span> <span class=\"hljs-keyword\">from</span> permalinks<br><br># Deployment<br>## Docs: https:<span class=\"hljs-comment\">//hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class=\"hljs-keyword\">type</span>: git<br>  repo: git@github.com:GitHub账户名/仓库名.github.io.git<br>  branch: master #如果分支是main记得修改，需要推送到哪个分支，就选择哪个分支<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/07/25/Us5zgjtJm8fKQ6X.png\" alt=\"image-20240724161404111.png\"></p>\n<p>部署到 GitHub</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo d <span class=\"hljs-comment\"># 将public里面的文件发送到云端GitHub上面</span><br></code></pre></td></tr></table></figure>\n\n<p>之后就可以刷新网页看到上传上去的网页，就拥有了自己的网页</p>\n<h3 id=\"主题更换和选择\"><a href=\"#主题更换和选择\" class=\"headerlink\" title=\"主题更换和选择\"></a>主题更换和选择</h3><p>我们上面用的是系统默认的主题，比较丑，所以我们可以使用hexo去挑选我们想要的主题类型</p>\n<p><a href=\"https://fluid-dev.github.io/hexo-fluid-docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98\">开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)</a></p>\n<p><a href=\"https://hexo.io/themes/\">Themes | Hexo</a>可以在这个网址里面挑选自己喜欢的</p>\n<p>本文挑选了fluid进行下载，选择直接下载zip包或者<code>git clone https://github.com/fluid-dev/hexo-theme-fluid.git</code></p>\n<p>将下载的包解压放到 themes 文件夹里面，文件夹的名字改成fluid，最好不要文件夹套娃，如果出现，则将里面的文件全部移出来</p>\n<p>继续修改博客根目录下的 _config.yml 文件，注意，不是fluid里面的_config.yml文件</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">language:</span> <span class=\"hljs-built_in\">zh</span>-CN  <span class=\"hljs-meta\"># 指定语言，会影响主题显示的语言，按需修改</span><br><br><span class=\"hljs-symbol\">theme:</span> fluid  <span class=\"hljs-meta\"># 指定主题</span><br></code></pre></td></tr></table></figure>\n\n<p>首次使用主题的「关于页」需要手动创建，打开git，输入代码</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">$ hexo <span class=\"hljs-keyword\">new</span> page about<br></code></pre></td></tr></table></figure>\n\n<p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性，<code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">标题</span><br><span class=\"hljs-attr\">layout:</span> <span class=\"hljs-string\">about</span><br><span class=\"hljs-meta\">---</span><br></code></pre></td></tr></table></figure>\n\n<p>之后重复上面的步骤先进行静态页面清除，再生成，之后上传到GitHub仓库中进行页面更新，等待几分钟后，如下图所示</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/2wTjGbtilvdkBpW.png\" alt=\"image-20240724162639684.png\"></p>\n<h3 id=\"文档上传\"><a href=\"#文档上传\" class=\"headerlink\" title=\"文档上传\"></a>文档上传</h3><p>使用Typora进行.md文档的编写，非常好用的一个编辑器，绿色版可以网上搜索</p>\n<p>之后将md文件放到博客文件夹下面<code>source/_posts/</code>文件夹下面</p>\n<p>之后使用vim编辑器对文档进行title和tag的编辑</p>\n<p><a href=\"https://www.runoob.com/linux/linux-vim.html\">Linux vi&#x2F;vim | 菜鸟教程 (runoob.com)</a></p>\n<p>进入md文件，首先点击 i 进入编辑模式，在开头位置输入，其中title为文章的名字，tag为文章的标签，方便进行检索</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-string\">title：</span> <span class=\"hljs-string\">hello</span> <span class=\"hljs-string\">word</span><br><span class=\"hljs-string\">tag：</span> <span class=\"hljs-string\">write</span><br><span class=\"hljs-meta\">---</span><br></code></pre></td></tr></table></figure>\n\n<p>编辑完成点击 Esc 退出报错，直接输入 :wq 保存编辑并且退出，完成文件的标记修改</p>\n<p>之后回到git bash中输入</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo g <span class=\"hljs-comment\"># 生成静态文件，生成的文件在public文件夹里面</span><br><br><span class=\"hljs-variable\">$ </span>hexo d <span class=\"hljs-comment\"># 将生成的文件导入GitHub站点</span><br></code></pre></td></tr></table></figure>\n\n<p>到此，等待几分钟后，你的文章就在你的网页上面出现了</p>\n","excerpt":"","more":"<h1 id=\"Work-No-6\"><a href=\"#Work-No-6\" class=\"headerlink\" title=\"Work No.6\"></a>Work No.6</h1><h3 id=\"创建github-page网页\"><a href=\"#创建github-page网页\" class=\"headerlink\" title=\"创建github.page网页\"></a>创建github.page网页</h3><p>点击Repositories，选择新建Repositories仓库</p>\n<p>在仓库名字Repository name栏填写网页的网址，后缀需要添加 .github.io</p>\n<p>例如 webname.github.io</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/CagbJOAwjnGZl5h.png\" alt=\"image-20240724153741084.png\"></p>\n<p>之后点击 Create repository ，创建该仓库，其他无需调整</p>\n<p>之后需要创建一个 index.html 文件，用于后续能够选取分支</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/fCE81aVXuvQHwkK.png\" alt=\"image-20240724154237430.png\"></p>\n<p>文件名字输入 index.html，内容为 <code>&lt;hl&gt; hello &lt;/hl&gt;</code> 这个文件会初始化成一个网页，网页的内容只有 hello，这个随便填就行，后续会用模板，不用考虑这个</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/xcCAzGZfilE8pXI.png\" alt=\"image-20240724154427037.png\"></p>\n<p>进入仓库，选择 Setting ，点击 pages ，在 branch 上选择 main 分支（刚刚创建文件也是为了创建这个分支），点击 save 保存，之后等待几分钟，就会出现创建的网址，点击 visit site 即可进入建立的网页</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/iJS68ZOUrkLHKBo.png\" alt=\"image-20240724155135615.png\"></p>\n<p>完成这一步之后，就可以得到一个”hello“的网页，该网页没有任何排版和格式</p>\n<h3 id=\"配置HEXO并进行部署\"><a href=\"#配置HEXO并进行部署\" class=\"headerlink\" title=\"配置HEXO并进行部署\"></a>配置HEXO并进行部署</h3><p>打开git bash，执行如下命令安装hexo</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">$ npm install -g hexo-<span class=\"hljs-keyword\">cli</span> <span class=\"hljs-meta\"># 此命令完成对 hexo 的安装</span><br></code></pre></td></tr></table></figure>\n\n<p>如果没有安装npm、git、node.js的话</p>\n<p>node.js参考<a href=\"https://blog.csdn.net/yaorongke/article/details/119084295\">https://blog.csdn.net/yaorongke/article/details/119084295</a></p>\n<p>git安装参考<a href=\"https://blog.csdn.net/mukes/article/details/115693833\">https://blog.csdn.net/mukes/article/details/115693833</a></p>\n<p>之后随便在想要的地方建一个文件夹，这个文件夹的作用是用于博客文章存放和仓库交互，例如<blog></p>\n<p>进入该文件，将该文件初始化</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">cd</span> blog <span class=\"hljs-comment\"># 进入该文件夹</span><br><span class=\"hljs-variable\">$</span> hexo init <span class=\"hljs-comment\"># 该命令完成 hexo 在本地博客目录的初始化</span><br></code></pre></td></tr></table></figure>\n\n<p>之后生成网页的静态文件，如果需要更新网页的配置，需要先清理，在重新生成</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo g <span class=\"hljs-comment\"># 生成静态文件，生成的文件在public文件夹里面</span><br><br><span class=\"hljs-variable\">$ </span>hexo clean <span class=\"hljs-comment\"># 清除生成的静态文件</span><br></code></pre></td></tr></table></figure>\n\n<p>可以进行本地预览，本地预览的ctrl+c会退出运行，所以用右键复制网址到网页上预览</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo s <span class=\"hljs-comment\"># 开启本地预览</span><br></code></pre></td></tr></table></figure>\n\n<p>安装部署插件</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">$ npm <span class=\"hljs-keyword\">install</span> hexo-deployer-git --save <span class=\"hljs-comment\"># 安装部署插件</span><br></code></pre></td></tr></table></figure>\n\n<p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为站点配置文件， 后者称为主题配置文件。打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code>和<code>url </code>的部分：</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"># URL<br>## <span class=\"hljs-keyword\">Set</span> your site url here. <span class=\"hljs-keyword\">For</span> example, <span class=\"hljs-keyword\">if</span> you use GitHub Page, <span class=\"hljs-keyword\">set</span> url <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;https://username.github.io/project&#x27;</span><br>url: GitHub pages的网址，例如https:<span class=\"hljs-comment\">//GitHub用户名/仓库名               //修改这个地方，需要把网址改对，否则网页没有格式</span><br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: <span class=\"hljs-keyword\">true</span> # <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">false</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">remove</span> trailing <span class=\"hljs-string\">&#x27;index.html&#x27;</span> <span class=\"hljs-keyword\">from</span> permalinks<br>  trailing_html: <span class=\"hljs-keyword\">true</span> # <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">false</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">remove</span> trailing <span class=\"hljs-string\">&#x27;.html&#x27;</span> <span class=\"hljs-keyword\">from</span> permalinks<br><br># Deployment<br>## Docs: https:<span class=\"hljs-comment\">//hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class=\"hljs-keyword\">type</span>: git<br>  repo: git@github.com:GitHub账户名/仓库名.github.io.git<br>  branch: master #如果分支是main记得修改，需要推送到哪个分支，就选择哪个分支<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/07/25/Us5zgjtJm8fKQ6X.png\" alt=\"image-20240724161404111.png\"></p>\n<p>部署到 GitHub</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo d <span class=\"hljs-comment\"># 将public里面的文件发送到云端GitHub上面</span><br></code></pre></td></tr></table></figure>\n\n<p>之后就可以刷新网页看到上传上去的网页，就拥有了自己的网页</p>\n<h3 id=\"主题更换和选择\"><a href=\"#主题更换和选择\" class=\"headerlink\" title=\"主题更换和选择\"></a>主题更换和选择</h3><p>我们上面用的是系统默认的主题，比较丑，所以我们可以使用hexo去挑选我们想要的主题类型</p>\n<p><a href=\"https://fluid-dev.github.io/hexo-fluid-docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98\">开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)</a></p>\n<p><a href=\"https://hexo.io/themes/\">Themes | Hexo</a>可以在这个网址里面挑选自己喜欢的</p>\n<p>本文挑选了fluid进行下载，选择直接下载zip包或者<code>git clone https://github.com/fluid-dev/hexo-theme-fluid.git</code></p>\n<p>将下载的包解压放到 themes 文件夹里面，文件夹的名字改成fluid，最好不要文件夹套娃，如果出现，则将里面的文件全部移出来</p>\n<p>继续修改博客根目录下的 _config.yml 文件，注意，不是fluid里面的_config.yml文件</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">language:</span> <span class=\"hljs-built_in\">zh</span>-CN  <span class=\"hljs-meta\"># 指定语言，会影响主题显示的语言，按需修改</span><br><br><span class=\"hljs-symbol\">theme:</span> fluid  <span class=\"hljs-meta\"># 指定主题</span><br></code></pre></td></tr></table></figure>\n\n<p>首次使用主题的「关于页」需要手动创建，打开git，输入代码</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">$ hexo <span class=\"hljs-keyword\">new</span> page about<br></code></pre></td></tr></table></figure>\n\n<p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性，<code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">标题</span><br><span class=\"hljs-attr\">layout:</span> <span class=\"hljs-string\">about</span><br><span class=\"hljs-meta\">---</span><br></code></pre></td></tr></table></figure>\n\n<p>之后重复上面的步骤先进行静态页面清除，再生成，之后上传到GitHub仓库中进行页面更新，等待几分钟后，如下图所示</p>\n<p><img src=\"https://s2.loli.net/2024/07/25/2wTjGbtilvdkBpW.png\" alt=\"image-20240724162639684.png\"></p>\n<h3 id=\"文档上传\"><a href=\"#文档上传\" class=\"headerlink\" title=\"文档上传\"></a>文档上传</h3><p>使用Typora进行.md文档的编写，非常好用的一个编辑器，绿色版可以网上搜索</p>\n<p>之后将md文件放到博客文件夹下面<code>source/_posts/</code>文件夹下面</p>\n<p>之后使用vim编辑器对文档进行title和tag的编辑</p>\n<p><a href=\"https://www.runoob.com/linux/linux-vim.html\">Linux vi&#x2F;vim | 菜鸟教程 (runoob.com)</a></p>\n<p>进入md文件，首先点击 i 进入编辑模式，在开头位置输入，其中title为文章的名字，tag为文章的标签，方便进行检索</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-string\">title：</span> <span class=\"hljs-string\">hello</span> <span class=\"hljs-string\">word</span><br><span class=\"hljs-string\">tag：</span> <span class=\"hljs-string\">write</span><br><span class=\"hljs-meta\">---</span><br></code></pre></td></tr></table></figure>\n\n<p>编辑完成点击 Esc 退出报错，直接输入 :wq 保存编辑并且退出，完成文件的标记修改</p>\n<p>之后回到git bash中输入</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo g <span class=\"hljs-comment\"># 生成静态文件，生成的文件在public文件夹里面</span><br><br><span class=\"hljs-variable\">$ </span>hexo d <span class=\"hljs-comment\"># 将生成的文件导入GitHub站点</span><br></code></pre></td></tr></table></figure>\n\n<p>到此，等待几分钟后，你的文章就在你的网页上面出现了</p>\n"},{"title":"Git使用","_content":"# Git使用\n\n## git基本了解\n\n### 学习资料\n\n[超详细的Git使用教程(图文)-CSDN博客](https://blog.csdn.net/qq_37883866/article/details/105349257)\n\n[Git基本使用教程（一）：入门及第一次基本完整操作_git的使用-CSDN博客](https://blog.csdn.net/qq_35206244/article/details/97698815)\n\n[git--一文弄懂git的工作区、索引区、本地仓库、远程仓库以及add、commit、push三个操作 - at_today - 博客园 (cnblogs.com)](https://www.cnblogs.com/Jing-Wang/p/10991008.html)\n\n[【原创】Git删除暂存区或版本库中的文件 - cposture - 博客园 (cnblogs.com)](https://www.cnblogs.com/cposture/p/git.html)\n\n[Git如何从暂存区（index/cache）中移除文件|极客教程 (geek-docs.com)](https://geek-docs.com/git/git-questions/611_git_how_to_remove_a_file_from_the_staging_area_index_cache_in_git.html)\n\n[git status 状态命令——查看文件状态_git status 看非新增文件-CSDN博客](https://blog.csdn.net/weixin_44567318/article/details/119701438)\n\n[Git 学习（三）本地仓库操作——git add & commit - feesland - 博客园 (cnblogs.com)](https://www.cnblogs.com/feeland/p/4500721.html)\n\n[git branch的详细使用，10个常见用法_git branch -vv-CSDN博客](https://blog.csdn.net/chaogu94/article/details/111057918)\n\n[Git基础 - git tag 一文真正的搞懂git标签的使用-CSDN博客](https://blog.csdn.net/qq_39505245/article/details/124705850)\n\n### git下载\n\n**官网：** https://git-scm.com/downloads\n\n## git使用方法\n\n### 注册GitHub账号\n\n账号：1\n\n密码：1\n\n### git注册\n\n```\n\t//设置账号，如果去掉 --global 参数只对当前仓库有效。\n\t$ git config --global user.name \"zhengyiyang\"\n\t\n\t//设置邮箱，如果去掉 --global 参数只对当前仓库有效。\n\t$ git config --global user.email \"903372205@qq.com\"\n\t\n\t//设置SSH，如果去掉 --global 参数只对当前仓库有效。\n\t$ ssh-keygen -t rsa -C \"903372205@qq.com\"\n\t\n\t储存位置：/c/Users/114008/.ssh/id_rsa\n\t\n\tid_rsa.pub为公共密钥\n\tid_rsa为私人密钥\n```\n\n### github配置SSH\n\n**打开id_rsa.pub文件，全选，复制全文**\n\n\n```\n\tssh-rsa AAAAB3NzaC1yc2EA...\n```\n\n**github->账户->setting**\n\nTitle：1\n\nKey type：Authentication Key\n\n### 测试是否成功连接\n\n```\n\t$ ssh -T git@github.com\n\t//代表成功连接\n\tHi yangyangdeyi0119! You've successfully authenticated, but GitHub does not provide shell access.  \n```\n\n### 建立Github云端仓库\n\n[github仓库建立及配置教程新手教程_github创建仓库-CSDN博客](https://blog.csdn.net/qq_44722674/article/details/117200397)\n\n修改用户名\n\n[GitHub修改昵称和用户名（图解详细教程）_github改名-CSDN博客](https://blog.csdn.net/weixin_44285445/article/details/107833418)\n\n### 创建本地仓库\n\n```\n\t//首先需要新建一个文件夹作为本地仓库\n\t//初始化该文件为本地仓库\n\t$ git init  \n\t\n\t//下载下来的test文件夹也是本地仓库\n\t$ git clone https://github.com/yangyangdeyi0119/test.git  \n```\n\n### 将文件加入暂存区\n\n文件本身在工作区，需要通过文件锁定，将其加入暂存区\n\n```\n\t//可以同时添加多个文件夹\n\t$ git add /test /test1\n\t\n\t//添加单个文件\n\t$ git add README.md \n    \n    //将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除  \n\t$ git add .   \n\t\n\t//将文件包的所有文件加入暂存区\n\t$ git add -f .\n    \n    //将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。 \n\t$ git add -u \n\t\n\t//表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。\n\t$ git add -A\n\t\n\t//暂存区各类状态\n\t- untracked 未跟踪（未被纳入版本控制）\n\t- tracked 已跟踪（被纳入版本控制）\n\t- Unmodified 未修改状态\n\t- Modified 已修改状态\n\t- Staged 已暂存状态\n```\n\n### 将文件移除暂存区\n\n```\n\t//仅删除暂存区的文件，不影响工作区的文件\n\t$ git rm --cache <file/aaa>\n\t\n\t//删除暂存区和工作区的文件\n\t$ git rm -f <file/aaa>\n\t\n\t//撤销对暂存区的修改。这个命令主要用于丢弃或还原文件的更改(测试未成功)\n\t$ git restore --staged <file/aaa>\n\t\n\t//将分支回退到之前的提交，并且还可以选择是否保留暂存区的更改\n\t$ git reset\n\t\n\t//撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工作区对应文件file；这个命令改变的是工作区\n\t$ git checkout 文件名\n\t\n```\n\n### 查看文件状态\n\n```\n\t//获取文件状态-完整\n\t$ git status\n\t\n\t//获取文件状态-简洁\n\t$ git status -s 更加简洁\n\t\t' ' （空格）表示文件未发生更改\n\t\tM 表示文件发生改动。\n\t\tA 表示新增文件。\n\t\tD 表示删除文件。\n\t\tR 表示重命名。\n\t\tC 表示复制。\n\t\tU 表示更新但未合并。\n\t\t? 表示未跟踪文件。\n\t\t! 表示忽略文件。\n\t\n\t//显示分支和跟踪信息 --branch\n\t$ git status -s -b\n\t\n\t//显示变更的文本内容，在不使用 -s 选项时才会显示变更内容\n\t//只有一个 -v 选项时，显示版本库和暂存区之间比较发生变更的内容。\n\t$ git status -v\n\t//而有两个 -v 选项时，显示暂存区和工作区之间比较发生变更的内容。\n\t$ git status -v -v\n\t\n\t//显示未跟踪文件\n\t$ git status -s -u[<mode>]\n\t\tno —— 不显示未跟踪的文件\n\t\tnormal —— 显示未跟踪的文件和目录。\n\t\tall —— 还显示了未跟踪目录下的文件\n\t\t\n\t//用来查看暂存区中文件信息\n\t$ git ls-files -参数\n\t\t--cached(-c)显示暂存区中的文件，git ls-files命令默认的参数\n\t\t--deleted(-d)显示删除的文件\n\t\t--modified(-m) 显示修改过的文件\n\t\t--other(-o)显示没有被git跟踪的文件\n\t\t--stage(-s) 显示mode以及文件对应的Blob对象，进而我们可以获取暂存区中对应文件里面的内容。\n```\n\n### 文件加入分支\n\n提交更改，实际上就是把暂存区的所有内容提交到当前分支，需要提交的文件修改通通放到暂存区；然后，一次性提交暂存区的所有修改\n\n```\n\t// 把暂存区的所有修改提交到分支，须输入描述信息\n\t$ git commit -m \"描述信息\"\n\t\n\t//更改之前一次commit的描述信息\n\t$ git commit --amend\n\t\n\t//提交暂存区的指定文件到仓库区（不行，最好单个提交git add，然后在git commit）\n\t$ git commit <file1> <file2> ... -m \"message\"\n\t\n\t//-a 参数设置修改文件后不需要执行 git add 命令，直接来提交（不好用）\n\t$ git commit -a\n\t\n\t出现报错\"nothing to commit, working tree clean\"\n    只需要修改该文件夹下的任意一个文件，因为检测到版本未发生改变\n    \n    //查找推送版本号\n    $ git log \n    \n    //选择回退版本，回退后，版本之后的将会丢失\n    git reset --hard <目标版本号>\n    \n    //软回退，不修改代码，回到暂存区\n    git reset --soft HEAD~n\n    \n    //只显示一行信息\n    git log --oneline\n```\n\n### 分支管理\n\n```\n\t//创建分支命令\n\t$ git branch <branchname>\n\t\n\t//切换分支命令\n\t$ git checkout <branchname>\n\t\n\t//列出分支\n\tgit branch\n\t//查看本地分支+上次提交的信息\n\t$ git branch -v\n\t//查看本地分支+远程分支\n\t$ git branch -a\n\t\t- 红色代表云端仓库分支\n\t\t- 白色代表本地仓库分支\n\t\t- 绿色代表目前所在分支\n\t//查看本地分支+上次提交的信息+本地和远程分支的关系\n\t$ git branch -vv\n\t//查看本地分支+上次提交的信息+本地和远程分支的关系+远程分支\n\t$ git branch -vv -a\n\t//只查看远程分支\n\t$ git branch -r\n\t\n\t//创建新分支并立即切换到该分支下\n\t$ git checkout -b <branchname>\n\t\n\t//删除本地分支\n\t$ git branch -d <branchname>\n\t//强制删除分支\n\t$ git branch -D aaa\n\t\n\t//合并分支\n\t$ git merge <branchname>\n\t\n\t//删除远程分支\n\t$ git push <主机名> -d <分支名>\n\t\n\t//将本地分支推送到远程分支，如果远程分支不存在，则创建。\n\t$ git push <远程主机名> <本地分支名>:<远程分支名>\n\t$ git push --set-upstream origin dev\n```\n\n### 将文件推送到云端仓库\n\n```\n\t//第一次推送代码指令\n\t$ git push -u origin <branchname>\n\t//-u参数可以在推送的同时,将origin仓库的master分支设置为本地仓库当前分支的upstream(上游)。添加了这个参数,将来运行git pull命令从远程仓库获取内容时,本地仓库的的这个分支就可以直接从origin的master分支获取内容,省去了另外添加参数的麻烦。\n\t\n\t//之后推送\n\t$ git push origin master\n\t\n\t//不同分支之间推送\n\t$ git push -u origin <branchname1>:origin/<branchname2>\n\t\n\t//云端仓库分支更新到本地仓库\n\t$ git remote update origin\n\t\t后缀加上 --prune则可以与云端仓库分支一致，多余的会被删除\n\t\t\n\t//报错\n\terror: failed to push some refs to 'https://github.com/yangyangdeyi0119/Learning.git'\n\thint: Updates were rejected because the remote contains work that you do not\n\thint: have locally. This is usually caused by another repository pushing to\n\thint: the same ref. If you want to integrate the remote changes, use\n\thint: 'git pull' before pushing again.\n\thint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\t直接git pull之后就可以了\n\t\n\t//删除现有远程仓库\n\t$ git remote rm origin\n\t\n\t//添加新远程仓库\n\t$ git remote add origin url\n\t\n\t//查看远程仓库的地址\n\t$ git remote -v\n\t\n\t//更换远程仓库地址，URL为新地址\n\t$ git remote set-url origin URL\n```\n\n### 暂存空间使用\n\nstash是本地的，不会通过git push命令上传到git server上\n\n发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑git stash。\n\n使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用git stash就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用git stash apply将以前一半的工作应用回来。\n\n经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。\n\n```\n\t//将未提交的修改保存至堆栈中\n\t$ git stash\n\t\n\t//为此次stash添加说明信息，便于以后查看\n\t$ git stash save \"stash message info\"  \n\t\n\t//查看stash栈中的内容\n\t$ git stash list\n\t\n\t//将stash中的内容弹出，并应用到当前分支对应的工作目录上，该命令将堆栈中最近保存的内容删除（出栈操作）\n\t$ git stash pop\n\t\n\t//将指定id的内容应用到当前分支的工作目录，内容不会删除，可以在多个分支上重复进行操作\n\t$ git stash apply stash名称\n\t\n\t//从堆栈中移除某个指定的stash\n\t$ git stash drop stash名称\n\t\n\t//清除堆栈中的所有内容\n\t$ git stash clear\n\t\n\t//查看堆栈中最新保存的stash和当前目录的差异。\n\t$ git stash show\n\t\n\t//从最新的stash创建分支。\n\t$ git stash branch\n```\n\n### 代码标签\n\ntag 中文我们可以称它为标签，tag 就是 对某次 commit 的一个标识，相当于起了一个别名。\n\n【轻量标签 】： 只是某个commit 的引用，可以理解为是一个commit的别名；\n\n【附注标签】 ：是存储在git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间以及其他的标签信息。它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证。\n\n```\n\t//直接列出所有的标签\n\t$ git tag\n\t\n\t//可以根据<tagname>进行标签的筛选\n\t$ git tag -l <tagname*>\n\t\n\t//查看标签的提交信息\n\t$ git show 标签名\n\t\n\t//在提交历史中查看标签\n\t$ git log --online --graph\n\t\n\t//创建轻量标签\n\t$ git tag 标签名\n\t$ git tag 标签名 提交版本\n\t\n\t//创建附注标签\n\t$ git tag -a 标签名称 -m 附注信息\n\t$ git tag -a 标签名称 提交版本号 -m 附注信息\n\t\t-a : 理解为 annotated 的首字符，表示 附注标签\n\t\t\n\t//删除标签\n\tgit tag -d 标签名称\n\t\n\t//将指定的标签上传到远程仓库\n\t$ git push origin <tagname>\n\t\n\t//将所有不在远程仓库中的标签上传到远程仓库\n\t$ git push origin --tags\n\t\n\t//删除远程仓库中的 指定标签\n\t$ git push origin  :regs/tags/<tagname>\n\t$ git push origin --delete <tagname>\n```\n","source":"_posts/Work No.5.md","raw":"---\ntitle: Git使用\ntag: git\ncategories: Git\n---\n# Git使用\n\n## git基本了解\n\n### 学习资料\n\n[超详细的Git使用教程(图文)-CSDN博客](https://blog.csdn.net/qq_37883866/article/details/105349257)\n\n[Git基本使用教程（一）：入门及第一次基本完整操作_git的使用-CSDN博客](https://blog.csdn.net/qq_35206244/article/details/97698815)\n\n[git--一文弄懂git的工作区、索引区、本地仓库、远程仓库以及add、commit、push三个操作 - at_today - 博客园 (cnblogs.com)](https://www.cnblogs.com/Jing-Wang/p/10991008.html)\n\n[【原创】Git删除暂存区或版本库中的文件 - cposture - 博客园 (cnblogs.com)](https://www.cnblogs.com/cposture/p/git.html)\n\n[Git如何从暂存区（index/cache）中移除文件|极客教程 (geek-docs.com)](https://geek-docs.com/git/git-questions/611_git_how_to_remove_a_file_from_the_staging_area_index_cache_in_git.html)\n\n[git status 状态命令——查看文件状态_git status 看非新增文件-CSDN博客](https://blog.csdn.net/weixin_44567318/article/details/119701438)\n\n[Git 学习（三）本地仓库操作——git add & commit - feesland - 博客园 (cnblogs.com)](https://www.cnblogs.com/feeland/p/4500721.html)\n\n[git branch的详细使用，10个常见用法_git branch -vv-CSDN博客](https://blog.csdn.net/chaogu94/article/details/111057918)\n\n[Git基础 - git tag 一文真正的搞懂git标签的使用-CSDN博客](https://blog.csdn.net/qq_39505245/article/details/124705850)\n\n### git下载\n\n**官网：** https://git-scm.com/downloads\n\n## git使用方法\n\n### 注册GitHub账号\n\n账号：1\n\n密码：1\n\n### git注册\n\n```\n\t//设置账号，如果去掉 --global 参数只对当前仓库有效。\n\t$ git config --global user.name \"zhengyiyang\"\n\t\n\t//设置邮箱，如果去掉 --global 参数只对当前仓库有效。\n\t$ git config --global user.email \"903372205@qq.com\"\n\t\n\t//设置SSH，如果去掉 --global 参数只对当前仓库有效。\n\t$ ssh-keygen -t rsa -C \"903372205@qq.com\"\n\t\n\t储存位置：/c/Users/114008/.ssh/id_rsa\n\t\n\tid_rsa.pub为公共密钥\n\tid_rsa为私人密钥\n```\n\n### github配置SSH\n\n**打开id_rsa.pub文件，全选，复制全文**\n\n\n```\n\tssh-rsa AAAAB3NzaC1yc2EA...\n```\n\n**github->账户->setting**\n\nTitle：1\n\nKey type：Authentication Key\n\n### 测试是否成功连接\n\n```\n\t$ ssh -T git@github.com\n\t//代表成功连接\n\tHi yangyangdeyi0119! You've successfully authenticated, but GitHub does not provide shell access.  \n```\n\n### 建立Github云端仓库\n\n[github仓库建立及配置教程新手教程_github创建仓库-CSDN博客](https://blog.csdn.net/qq_44722674/article/details/117200397)\n\n修改用户名\n\n[GitHub修改昵称和用户名（图解详细教程）_github改名-CSDN博客](https://blog.csdn.net/weixin_44285445/article/details/107833418)\n\n### 创建本地仓库\n\n```\n\t//首先需要新建一个文件夹作为本地仓库\n\t//初始化该文件为本地仓库\n\t$ git init  \n\t\n\t//下载下来的test文件夹也是本地仓库\n\t$ git clone https://github.com/yangyangdeyi0119/test.git  \n```\n\n### 将文件加入暂存区\n\n文件本身在工作区，需要通过文件锁定，将其加入暂存区\n\n```\n\t//可以同时添加多个文件夹\n\t$ git add /test /test1\n\t\n\t//添加单个文件\n\t$ git add README.md \n    \n    //将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除  \n\t$ git add .   \n\t\n\t//将文件包的所有文件加入暂存区\n\t$ git add -f .\n    \n    //将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。 \n\t$ git add -u \n\t\n\t//表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。\n\t$ git add -A\n\t\n\t//暂存区各类状态\n\t- untracked 未跟踪（未被纳入版本控制）\n\t- tracked 已跟踪（被纳入版本控制）\n\t- Unmodified 未修改状态\n\t- Modified 已修改状态\n\t- Staged 已暂存状态\n```\n\n### 将文件移除暂存区\n\n```\n\t//仅删除暂存区的文件，不影响工作区的文件\n\t$ git rm --cache <file/aaa>\n\t\n\t//删除暂存区和工作区的文件\n\t$ git rm -f <file/aaa>\n\t\n\t//撤销对暂存区的修改。这个命令主要用于丢弃或还原文件的更改(测试未成功)\n\t$ git restore --staged <file/aaa>\n\t\n\t//将分支回退到之前的提交，并且还可以选择是否保留暂存区的更改\n\t$ git reset\n\t\n\t//撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工作区对应文件file；这个命令改变的是工作区\n\t$ git checkout 文件名\n\t\n```\n\n### 查看文件状态\n\n```\n\t//获取文件状态-完整\n\t$ git status\n\t\n\t//获取文件状态-简洁\n\t$ git status -s 更加简洁\n\t\t' ' （空格）表示文件未发生更改\n\t\tM 表示文件发生改动。\n\t\tA 表示新增文件。\n\t\tD 表示删除文件。\n\t\tR 表示重命名。\n\t\tC 表示复制。\n\t\tU 表示更新但未合并。\n\t\t? 表示未跟踪文件。\n\t\t! 表示忽略文件。\n\t\n\t//显示分支和跟踪信息 --branch\n\t$ git status -s -b\n\t\n\t//显示变更的文本内容，在不使用 -s 选项时才会显示变更内容\n\t//只有一个 -v 选项时，显示版本库和暂存区之间比较发生变更的内容。\n\t$ git status -v\n\t//而有两个 -v 选项时，显示暂存区和工作区之间比较发生变更的内容。\n\t$ git status -v -v\n\t\n\t//显示未跟踪文件\n\t$ git status -s -u[<mode>]\n\t\tno —— 不显示未跟踪的文件\n\t\tnormal —— 显示未跟踪的文件和目录。\n\t\tall —— 还显示了未跟踪目录下的文件\n\t\t\n\t//用来查看暂存区中文件信息\n\t$ git ls-files -参数\n\t\t--cached(-c)显示暂存区中的文件，git ls-files命令默认的参数\n\t\t--deleted(-d)显示删除的文件\n\t\t--modified(-m) 显示修改过的文件\n\t\t--other(-o)显示没有被git跟踪的文件\n\t\t--stage(-s) 显示mode以及文件对应的Blob对象，进而我们可以获取暂存区中对应文件里面的内容。\n```\n\n### 文件加入分支\n\n提交更改，实际上就是把暂存区的所有内容提交到当前分支，需要提交的文件修改通通放到暂存区；然后，一次性提交暂存区的所有修改\n\n```\n\t// 把暂存区的所有修改提交到分支，须输入描述信息\n\t$ git commit -m \"描述信息\"\n\t\n\t//更改之前一次commit的描述信息\n\t$ git commit --amend\n\t\n\t//提交暂存区的指定文件到仓库区（不行，最好单个提交git add，然后在git commit）\n\t$ git commit <file1> <file2> ... -m \"message\"\n\t\n\t//-a 参数设置修改文件后不需要执行 git add 命令，直接来提交（不好用）\n\t$ git commit -a\n\t\n\t出现报错\"nothing to commit, working tree clean\"\n    只需要修改该文件夹下的任意一个文件，因为检测到版本未发生改变\n    \n    //查找推送版本号\n    $ git log \n    \n    //选择回退版本，回退后，版本之后的将会丢失\n    git reset --hard <目标版本号>\n    \n    //软回退，不修改代码，回到暂存区\n    git reset --soft HEAD~n\n    \n    //只显示一行信息\n    git log --oneline\n```\n\n### 分支管理\n\n```\n\t//创建分支命令\n\t$ git branch <branchname>\n\t\n\t//切换分支命令\n\t$ git checkout <branchname>\n\t\n\t//列出分支\n\tgit branch\n\t//查看本地分支+上次提交的信息\n\t$ git branch -v\n\t//查看本地分支+远程分支\n\t$ git branch -a\n\t\t- 红色代表云端仓库分支\n\t\t- 白色代表本地仓库分支\n\t\t- 绿色代表目前所在分支\n\t//查看本地分支+上次提交的信息+本地和远程分支的关系\n\t$ git branch -vv\n\t//查看本地分支+上次提交的信息+本地和远程分支的关系+远程分支\n\t$ git branch -vv -a\n\t//只查看远程分支\n\t$ git branch -r\n\t\n\t//创建新分支并立即切换到该分支下\n\t$ git checkout -b <branchname>\n\t\n\t//删除本地分支\n\t$ git branch -d <branchname>\n\t//强制删除分支\n\t$ git branch -D aaa\n\t\n\t//合并分支\n\t$ git merge <branchname>\n\t\n\t//删除远程分支\n\t$ git push <主机名> -d <分支名>\n\t\n\t//将本地分支推送到远程分支，如果远程分支不存在，则创建。\n\t$ git push <远程主机名> <本地分支名>:<远程分支名>\n\t$ git push --set-upstream origin dev\n```\n\n### 将文件推送到云端仓库\n\n```\n\t//第一次推送代码指令\n\t$ git push -u origin <branchname>\n\t//-u参数可以在推送的同时,将origin仓库的master分支设置为本地仓库当前分支的upstream(上游)。添加了这个参数,将来运行git pull命令从远程仓库获取内容时,本地仓库的的这个分支就可以直接从origin的master分支获取内容,省去了另外添加参数的麻烦。\n\t\n\t//之后推送\n\t$ git push origin master\n\t\n\t//不同分支之间推送\n\t$ git push -u origin <branchname1>:origin/<branchname2>\n\t\n\t//云端仓库分支更新到本地仓库\n\t$ git remote update origin\n\t\t后缀加上 --prune则可以与云端仓库分支一致，多余的会被删除\n\t\t\n\t//报错\n\terror: failed to push some refs to 'https://github.com/yangyangdeyi0119/Learning.git'\n\thint: Updates were rejected because the remote contains work that you do not\n\thint: have locally. This is usually caused by another repository pushing to\n\thint: the same ref. If you want to integrate the remote changes, use\n\thint: 'git pull' before pushing again.\n\thint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\t直接git pull之后就可以了\n\t\n\t//删除现有远程仓库\n\t$ git remote rm origin\n\t\n\t//添加新远程仓库\n\t$ git remote add origin url\n\t\n\t//查看远程仓库的地址\n\t$ git remote -v\n\t\n\t//更换远程仓库地址，URL为新地址\n\t$ git remote set-url origin URL\n```\n\n### 暂存空间使用\n\nstash是本地的，不会通过git push命令上传到git server上\n\n发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑git stash。\n\n使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用git stash就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用git stash apply将以前一半的工作应用回来。\n\n经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。\n\n```\n\t//将未提交的修改保存至堆栈中\n\t$ git stash\n\t\n\t//为此次stash添加说明信息，便于以后查看\n\t$ git stash save \"stash message info\"  \n\t\n\t//查看stash栈中的内容\n\t$ git stash list\n\t\n\t//将stash中的内容弹出，并应用到当前分支对应的工作目录上，该命令将堆栈中最近保存的内容删除（出栈操作）\n\t$ git stash pop\n\t\n\t//将指定id的内容应用到当前分支的工作目录，内容不会删除，可以在多个分支上重复进行操作\n\t$ git stash apply stash名称\n\t\n\t//从堆栈中移除某个指定的stash\n\t$ git stash drop stash名称\n\t\n\t//清除堆栈中的所有内容\n\t$ git stash clear\n\t\n\t//查看堆栈中最新保存的stash和当前目录的差异。\n\t$ git stash show\n\t\n\t//从最新的stash创建分支。\n\t$ git stash branch\n```\n\n### 代码标签\n\ntag 中文我们可以称它为标签，tag 就是 对某次 commit 的一个标识，相当于起了一个别名。\n\n【轻量标签 】： 只是某个commit 的引用，可以理解为是一个commit的别名；\n\n【附注标签】 ：是存储在git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间以及其他的标签信息。它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证。\n\n```\n\t//直接列出所有的标签\n\t$ git tag\n\t\n\t//可以根据<tagname>进行标签的筛选\n\t$ git tag -l <tagname*>\n\t\n\t//查看标签的提交信息\n\t$ git show 标签名\n\t\n\t//在提交历史中查看标签\n\t$ git log --online --graph\n\t\n\t//创建轻量标签\n\t$ git tag 标签名\n\t$ git tag 标签名 提交版本\n\t\n\t//创建附注标签\n\t$ git tag -a 标签名称 -m 附注信息\n\t$ git tag -a 标签名称 提交版本号 -m 附注信息\n\t\t-a : 理解为 annotated 的首字符，表示 附注标签\n\t\t\n\t//删除标签\n\tgit tag -d 标签名称\n\t\n\t//将指定的标签上传到远程仓库\n\t$ git push origin <tagname>\n\t\n\t//将所有不在远程仓库中的标签上传到远程仓库\n\t$ git push origin --tags\n\t\n\t//删除远程仓库中的 指定标签\n\t$ git push origin  :regs/tags/<tagname>\n\t$ git push origin --delete <tagname>\n```\n","slug":"Work No.5","published":1,"date":"2024-07-25T01:14:04.256Z","updated":"2024-07-25T06:26:08.027Z","_id":"clz0qu1nf0005rcfbh25yapd0","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h1><h2 id=\"git基本了解\"><a href=\"#git基本了解\" class=\"headerlink\" title=\"git基本了解\"></a>git基本了解</h2><h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"https://blog.csdn.net/qq_37883866/article/details/105349257\">超详细的Git使用教程(图文)-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_35206244/article/details/97698815\">Git基本使用教程（一）：入门及第一次基本完整操作_git的使用-CSDN博客</a></p>\n<p><a href=\"https://www.cnblogs.com/Jing-Wang/p/10991008.html\">git–一文弄懂git的工作区、索引区、本地仓库、远程仓库以及add、commit、push三个操作 - at_today - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/cposture/p/git.html\">【原创】Git删除暂存区或版本库中的文件 - cposture - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://geek-docs.com/git/git-questions/611_git_how_to_remove_a_file_from_the_staging_area_index_cache_in_git.html\">Git如何从暂存区（index&#x2F;cache）中移除文件|极客教程 (geek-docs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_44567318/article/details/119701438\">git status 状态命令——查看文件状态_git status 看非新增文件-CSDN博客</a></p>\n<p><a href=\"https://www.cnblogs.com/feeland/p/4500721.html\">Git 学习（三）本地仓库操作——git add &amp; commit - feesland - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/chaogu94/article/details/111057918\">git branch的详细使用，10个常见用法_git branch -vv-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_39505245/article/details/124705850\">Git基础 - git tag 一文真正的搞懂git标签的使用-CSDN博客</a></p>\n<h3 id=\"git下载\"><a href=\"#git下载\" class=\"headerlink\" title=\"git下载\"></a>git下载</h3><p><strong>官网：</strong> <a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a></p>\n<h2 id=\"git使用方法\"><a href=\"#git使用方法\" class=\"headerlink\" title=\"git使用方法\"></a>git使用方法</h2><h3 id=\"注册GitHub账号\"><a href=\"#注册GitHub账号\" class=\"headerlink\" title=\"注册GitHub账号\"></a>注册GitHub账号</h3><p>账号：1</p>\n<p>密码：1</p>\n<h3 id=\"git注册\"><a href=\"#git注册\" class=\"headerlink\" title=\"git注册\"></a>git注册</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-string\">//</span>设置账号，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ git config <span class=\"hljs-params\">--global</span> user.name <span class=\"hljs-string\">&quot;zhengyiyang&quot;</span><br><br><span class=\"hljs-string\">//</span>设置邮箱，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ git config <span class=\"hljs-params\">--global</span> user.email <span class=\"hljs-string\">&quot;903372205@qq.com&quot;</span><br><br><span class=\"hljs-string\">//</span>设置SSH，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;903372205@qq.com&quot;</span><br><br>储存位置：<span class=\"hljs-string\">/c/Users/114008/.ssh/id_rsa</span><br><br>id_rsa.pub为公共密钥<br>id_rsa为私人密钥<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"github配置SSH\"><a href=\"#github配置SSH\" class=\"headerlink\" title=\"github配置SSH\"></a>github配置SSH</h3><p><strong>打开id_rsa.pub文件，全选，复制全文</strong></p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-function\"><span class=\"hljs-title\">ssh</span></span>-rsa AAAAB3NzaC1yc2EA...<br></code></pre></td></tr></table></figure>\n\n<p><strong>github-&gt;账户-&gt;setting</strong></p>\n<p>Title：1</p>\n<p>Key type：Authentication Key</p>\n<h3 id=\"测试是否成功连接\"><a href=\"#测试是否成功连接\" class=\"headerlink\" title=\"测试是否成功连接\"></a>测试是否成功连接</h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">$ ssh -T git@github.com<br>//代表成功连接<br>Hi yangyangdeyi0119! You<span class=\"hljs-symbol\">&#x27;ve</span> successfully authenticated, but GitHub does <span class=\"hljs-keyword\">not</span> provide shell <span class=\"hljs-keyword\">access</span>.  <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"建立Github云端仓库\"><a href=\"#建立Github云端仓库\" class=\"headerlink\" title=\"建立Github云端仓库\"></a>建立Github云端仓库</h3><p><a href=\"https://blog.csdn.net/qq_44722674/article/details/117200397\">github仓库建立及配置教程新手教程_github创建仓库-CSDN博客</a></p>\n<p>修改用户名</p>\n<p><a href=\"https://blog.csdn.net/weixin_44285445/article/details/107833418\">GitHub修改昵称和用户名（图解详细教程）_github改名-CSDN博客</a></p>\n<h3 id=\"创建本地仓库\"><a href=\"#创建本地仓库\" class=\"headerlink\" title=\"创建本地仓库\"></a>创建本地仓库</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//首先需要新建一个文件夹作为本地仓库</span><br><span class=\"hljs-comment\">//初始化该文件为本地仓库</span><br><span class=\"hljs-symbol\">$</span> git init  <br><br><span class=\"hljs-comment\">//下载下来的test文件夹也是本地仓库</span><br><span class=\"hljs-symbol\">$</span> git clone https:<span class=\"hljs-comment\">//github.com/yangyangdeyi0119/test.git  </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件加入暂存区\"><a href=\"#将文件加入暂存区\" class=\"headerlink\" title=\"将文件加入暂存区\"></a>将文件加入暂存区</h3><p>文件本身在工作区，需要通过文件锁定，将其加入暂存区</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-comment\">//可以同时添加多个文件夹</span><br>$ git <span class=\"hljs-keyword\">add</span> /test /test1<br><br><span class=\"hljs-comment\">//添加单个文件</span><br>$ git <span class=\"hljs-keyword\">add</span> README.md <br>   <br>   <span class=\"hljs-comment\">//将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除  </span><br>$ git <span class=\"hljs-keyword\">add</span> .   <br><br><span class=\"hljs-comment\">//将文件包的所有文件加入暂存区</span><br>$ git <span class=\"hljs-keyword\">add</span> -f .<br>   <br>   <span class=\"hljs-comment\">//将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。 </span><br>$ git <span class=\"hljs-keyword\">add</span> -u <br><br><span class=\"hljs-comment\">//表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。</span><br>$ git <span class=\"hljs-keyword\">add</span> -A<br><br><span class=\"hljs-comment\">//暂存区各类状态</span><br>- untracked 未跟踪（未被纳入版本控制）<br>- tracked 已跟踪（被纳入版本控制）<br>- Unmodified 未修改状态<br>- Modified 已修改状态<br>- Staged 已暂存状态<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件移除暂存区\"><a href=\"#将文件移除暂存区\" class=\"headerlink\" title=\"将文件移除暂存区\"></a>将文件移除暂存区</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//仅删除暂存区的文件，不影响工作区的文件</span><br><span class=\"hljs-symbol\">$</span> git rm --cache &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//删除暂存区和工作区的文件</span><br><span class=\"hljs-symbol\">$</span> git rm -f &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//撤销对暂存区的修改。这个命令主要用于丢弃或还原文件的更改(测试未成功)</span><br><span class=\"hljs-symbol\">$</span> git restore --staged &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//将分支回退到之前的提交，并且还可以选择是否保留暂存区的更改</span><br><span class=\"hljs-symbol\">$</span> git reset<br><br><span class=\"hljs-comment\">//撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工作区对应文件file；这个命令改变的是工作区</span><br><span class=\"hljs-symbol\">$</span> git checkout 文件名<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"查看文件状态\"><a href=\"#查看文件状态\" class=\"headerlink\" title=\"查看文件状态\"></a>查看文件状态</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//获取文件状态-完整</span><br><span class=\"hljs-symbol\">$</span> git status<br><br><span class=\"hljs-comment\">//获取文件状态-简洁</span><br><span class=\"hljs-symbol\">$</span> git status -s 更加简洁<br>\t<span class=\"hljs-string\">&#x27; &#x27;</span> （空格）表示文件未发生更改<br>\tM 表示文件发生改动。<br>\tA 表示新增文件。<br>\tD 表示删除文件。<br>\tR 表示重命名。<br>\tC 表示复制。<br>\tU 表示更新但未合并。<br>\t? 表示未跟踪文件。<br>\t! 表示忽略文件。<br><br><span class=\"hljs-comment\">//显示分支和跟踪信息 --branch</span><br><span class=\"hljs-symbol\">$</span> git status -s -b<br><br><span class=\"hljs-comment\">//显示变更的文本内容，在不使用 -s 选项时才会显示变更内容</span><br><span class=\"hljs-comment\">//只有一个 -v 选项时，显示版本库和暂存区之间比较发生变更的内容。</span><br><span class=\"hljs-symbol\">$</span> git status -v<br><span class=\"hljs-comment\">//而有两个 -v 选项时，显示暂存区和工作区之间比较发生变更的内容。</span><br><span class=\"hljs-symbol\">$</span> git status -v -v<br><br><span class=\"hljs-comment\">//显示未跟踪文件</span><br><span class=\"hljs-symbol\">$</span> git status -s -u[&lt;mode&gt;]<br>\t<span class=\"hljs-keyword\">no</span> —— 不显示未跟踪的文件<br>\t<span class=\"hljs-built_in\">normal</span> —— 显示未跟踪的文件和目录。<br>\t<span class=\"hljs-keyword\">all</span> —— 还显示了未跟踪目录下的文件<br>\t<br><span class=\"hljs-comment\">//用来查看暂存区中文件信息</span><br><span class=\"hljs-symbol\">$</span> git ls-<span class=\"hljs-keyword\">files</span> -参数<br>\t--cached(-c)显示暂存区中的文件，git ls-<span class=\"hljs-keyword\">files</span>命令默认的参数<br>\t--deleted(-d)显示删除的文件<br>\t--modified(-m) 显示修改过的文件<br>\t--other(-o)显示没有被git跟踪的文件<br>\t--stage(-s) 显示mode以及文件对应的Blob对象，进而我们可以获取暂存区中对应文件里面的内容。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"文件加入分支\"><a href=\"#文件加入分支\" class=\"headerlink\" title=\"文件加入分支\"></a>文件加入分支</h3><p>提交更改，实际上就是把暂存区的所有内容提交到当前分支，需要提交的文件修改通通放到暂存区；然后，一次性提交暂存区的所有修改</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">// 把暂存区的所有修改提交到分支，须输入描述信息</span><br><span class=\"hljs-symbol\">$</span> git commit -m <span class=\"hljs-string\">&quot;描述信息&quot;</span><br><br><span class=\"hljs-comment\">//更改之前一次commit的描述信息</span><br><span class=\"hljs-symbol\">$</span> git commit --amend<br><br><span class=\"hljs-comment\">//提交暂存区的指定文件到仓库区（不行，最好单个提交git add，然后在git commit）</span><br><span class=\"hljs-symbol\">$</span> git commit &lt;file1&gt; &lt;file2&gt; ... -m <span class=\"hljs-string\">&quot;message&quot;</span><br><br><span class=\"hljs-comment\">//-a 参数设置修改文件后不需要执行 git add 命令，直接来提交（不好用）</span><br><span class=\"hljs-symbol\">$</span> git commit -a<br><br>出现报错<span class=\"hljs-string\">&quot;nothing to commit, working tree clean&quot;</span><br>   只需要修改该文件夹下的任意一个文件，因为检测到版本未发生改变<br>   <br>   <span class=\"hljs-comment\">//查找推送版本号</span><br>   <span class=\"hljs-symbol\">$</span> git <span class=\"hljs-built_in\">log</span> <br>   <br>   <span class=\"hljs-comment\">//选择回退版本，回退后，版本之后的将会丢失</span><br>   git reset --hard &lt;目标版本号&gt;<br>   <br>   <span class=\"hljs-comment\">//软回退，不修改代码，回到暂存区</span><br>   git reset --soft HEAD~n<br>   <br>   <span class=\"hljs-comment\">//只显示一行信息</span><br>   git <span class=\"hljs-built_in\">log</span> --oneline<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//创建分支命令</span><br><span class=\"hljs-symbol\">$</span> git branch &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//切换分支命令</span><br><span class=\"hljs-symbol\">$</span> git checkout &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//列出分支</span><br>git branch<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息</span><br><span class=\"hljs-symbol\">$</span> git branch -v<br><span class=\"hljs-comment\">//查看本地分支+远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -a<br>\t- 红色代表云端仓库分支<br>\t- 白色代表本地仓库分支<br>\t- 绿色代表目前所在分支<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息+本地和远程分支的关系</span><br><span class=\"hljs-symbol\">$</span> git branch -vv<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息+本地和远程分支的关系+远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -vv -a<br><span class=\"hljs-comment\">//只查看远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -r<br><br><span class=\"hljs-comment\">//创建新分支并立即切换到该分支下</span><br><span class=\"hljs-symbol\">$</span> git checkout -b &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//删除本地分支</span><br><span class=\"hljs-symbol\">$</span> git branch -d &lt;branchname&gt;<br><span class=\"hljs-comment\">//强制删除分支</span><br><span class=\"hljs-symbol\">$</span> git branch -D aaa<br><br><span class=\"hljs-comment\">//合并分支</span><br><span class=\"hljs-symbol\">$</span> git merge &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//删除远程分支</span><br><span class=\"hljs-symbol\">$</span> git push &lt;主机名&gt; -d &lt;分支名&gt;<br><br><span class=\"hljs-comment\">//将本地分支推送到远程分支，如果远程分支不存在，则创建。</span><br><span class=\"hljs-symbol\">$</span> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br><span class=\"hljs-symbol\">$</span> git push --<span class=\"hljs-keyword\">set</span>-upstream <span class=\"hljs-comment\">origin dev</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件推送到云端仓库\"><a href=\"#将文件推送到云端仓库\" class=\"headerlink\" title=\"将文件推送到云端仓库\"></a>将文件推送到云端仓库</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">//第一次推送代码指令<br>$ git push -u origin &lt;branchname&gt;<span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//-u参数可以在推送的同时,将origin仓库的master分支设置为本地仓库当前分支的upstream(上游)。添加了这个参数,将来运行git pull命令从远程仓库获取内容时,本地仓库的的这个分支就可以直接从origin的master分支获取内容,省去了另外添加参数的麻烦。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//之后推送</span><br>$ git push origin master<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//不同分支之间推送</span><br>$ git push -u origin &lt;branchname1&gt;:origin/&lt;branchname2&gt;<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//云端仓库分支更新到本地仓库</span><br>$ git remote update origin<br>\t后缀加上 <span class=\"hljs-comment\">--prune则可以与云端仓库分支一致，多余的会被删除</span><br>\t<span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//报错</span><br>error: failed <span class=\"hljs-built_in\">to</span> push some refs <span class=\"hljs-built_in\">to</span> <span class=\"hljs-string\">&#x27;https://github.com/yangyangdeyi0119/Learning.git&#x27;</span><br>hint: Updates were rejected because <span class=\"hljs-keyword\">the</span> remote <span class=\"hljs-keyword\">contains</span> work that you <span class=\"hljs-built_in\">do</span> <span class=\"hljs-keyword\">not</span><br>hint: have locally. This is usually caused <span class=\"hljs-keyword\">by</span> another repository pushing <span class=\"hljs-built_in\">to</span><br>hint: <span class=\"hljs-keyword\">the</span> same ref. If you want <span class=\"hljs-built_in\">to</span> integrate <span class=\"hljs-keyword\">the</span> remote changes, use<br>hint: <span class=\"hljs-string\">&#x27;git pull&#x27;</span> <span class=\"hljs-keyword\">before</span> pushing again.<br>hint: See <span class=\"hljs-keyword\">the</span> <span class=\"hljs-string\">&#x27;Note about fast-forwards&#x27;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&#x27;git push --help&#x27;</span> <span class=\"hljs-keyword\">for</span> details.<br>直接git pull之后就可以了<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//删除现有远程仓库</span><br>$ git remote rm origin<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//添加新远程仓库</span><br>$ git remote <span class=\"hljs-built_in\">add</span> origin url<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//查看远程仓库的地址</span><br>$ git remote -v<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//更换远程仓库地址，URL为新地址</span><br>$ git remote <span class=\"hljs-built_in\">set</span>-url origin <span class=\"hljs-built_in\">URL</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"暂存空间使用\"><a href=\"#暂存空间使用\" class=\"headerlink\" title=\"暂存空间使用\"></a>暂存空间使用</h3><p>stash是本地的，不会通过git push命令上传到git server上</p>\n<p>发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑git stash。</p>\n<p>使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用git stash就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用git stash apply将以前一半的工作应用回来。</p>\n<p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//将未提交的修改保存至堆栈中</span><br><span class=\"hljs-symbol\">$</span> git stash<br><br><span class=\"hljs-comment\">//为此次stash添加说明信息，便于以后查看</span><br><span class=\"hljs-symbol\">$</span> git stash save <span class=\"hljs-string\">&quot;stash message info&quot;</span>  <br><br><span class=\"hljs-comment\">//查看stash栈中的内容</span><br><span class=\"hljs-symbol\">$</span> git stash list<br><br><span class=\"hljs-comment\">//将stash中的内容弹出，并应用到当前分支对应的工作目录上，该命令将堆栈中最近保存的内容删除（出栈操作）</span><br><span class=\"hljs-symbol\">$</span> git stash pop<br><br><span class=\"hljs-comment\">//将指定id的内容应用到当前分支的工作目录，内容不会删除，可以在多个分支上重复进行操作</span><br><span class=\"hljs-symbol\">$</span> git stash apply stash名称<br><br><span class=\"hljs-comment\">//从堆栈中移除某个指定的stash</span><br><span class=\"hljs-symbol\">$</span> git stash drop stash名称<br><br><span class=\"hljs-comment\">//清除堆栈中的所有内容</span><br><span class=\"hljs-symbol\">$</span> git stash clear<br><br><span class=\"hljs-comment\">//查看堆栈中最新保存的stash和当前目录的差异。</span><br><span class=\"hljs-symbol\">$</span> git stash show<br><br><span class=\"hljs-comment\">//从最新的stash创建分支。</span><br><span class=\"hljs-symbol\">$</span> git stash branch<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"代码标签\"><a href=\"#代码标签\" class=\"headerlink\" title=\"代码标签\"></a>代码标签</h3><p>tag 中文我们可以称它为标签，tag 就是 对某次 commit 的一个标识，相当于起了一个别名。</p>\n<p>【轻量标签 】： 只是某个commit 的引用，可以理解为是一个commit的别名；</p>\n<p>【附注标签】 ：是存储在git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间以及其他的标签信息。它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//直接列出所有的标签</span><br><span class=\"hljs-symbol\">$</span> git tag<br><br><span class=\"hljs-comment\">//可以根据&lt;tagname&gt;进行标签的筛选</span><br><span class=\"hljs-symbol\">$</span> git tag -l &lt;tagname*&gt;<br><br><span class=\"hljs-comment\">//查看标签的提交信息</span><br><span class=\"hljs-symbol\">$</span> git show 标签名<br><br><span class=\"hljs-comment\">//在提交历史中查看标签</span><br><span class=\"hljs-symbol\">$</span> git <span class=\"hljs-built_in\">log</span> --online --graph<br><br><span class=\"hljs-comment\">//创建轻量标签</span><br><span class=\"hljs-symbol\">$</span> git tag 标签名<br><span class=\"hljs-symbol\">$</span> git tag 标签名 提交版本<br><br><span class=\"hljs-comment\">//创建附注标签</span><br><span class=\"hljs-symbol\">$</span> git tag -a 标签名称 -m 附注信息<br><span class=\"hljs-symbol\">$</span> git tag -a 标签名称 提交版本号 -m 附注信息<br>\t-a : 理解为 annotated 的首字符，表示 附注标签<br>\t<br><span class=\"hljs-comment\">//删除标签</span><br>git tag -d 标签名称<br><br><span class=\"hljs-comment\">//将指定的标签上传到远程仓库</span><br><span class=\"hljs-symbol\">$</span> git push origin &lt;tagname&gt;<br><br><span class=\"hljs-comment\">//将所有不在远程仓库中的标签上传到远程仓库</span><br><span class=\"hljs-symbol\">$</span> git push origin --tags<br><br><span class=\"hljs-comment\">//删除远程仓库中的 指定标签</span><br><span class=\"hljs-symbol\">$</span> git push origin  :regs/tags/&lt;tagname&gt;<br><span class=\"hljs-symbol\">$</span> git push origin --delete &lt;tagname&gt;<br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h1><h2 id=\"git基本了解\"><a href=\"#git基本了解\" class=\"headerlink\" title=\"git基本了解\"></a>git基本了解</h2><h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"https://blog.csdn.net/qq_37883866/article/details/105349257\">超详细的Git使用教程(图文)-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_35206244/article/details/97698815\">Git基本使用教程（一）：入门及第一次基本完整操作_git的使用-CSDN博客</a></p>\n<p><a href=\"https://www.cnblogs.com/Jing-Wang/p/10991008.html\">git–一文弄懂git的工作区、索引区、本地仓库、远程仓库以及add、commit、push三个操作 - at_today - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/cposture/p/git.html\">【原创】Git删除暂存区或版本库中的文件 - cposture - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://geek-docs.com/git/git-questions/611_git_how_to_remove_a_file_from_the_staging_area_index_cache_in_git.html\">Git如何从暂存区（index&#x2F;cache）中移除文件|极客教程 (geek-docs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_44567318/article/details/119701438\">git status 状态命令——查看文件状态_git status 看非新增文件-CSDN博客</a></p>\n<p><a href=\"https://www.cnblogs.com/feeland/p/4500721.html\">Git 学习（三）本地仓库操作——git add &amp; commit - feesland - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/chaogu94/article/details/111057918\">git branch的详细使用，10个常见用法_git branch -vv-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_39505245/article/details/124705850\">Git基础 - git tag 一文真正的搞懂git标签的使用-CSDN博客</a></p>\n<h3 id=\"git下载\"><a href=\"#git下载\" class=\"headerlink\" title=\"git下载\"></a>git下载</h3><p><strong>官网：</strong> <a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a></p>\n<h2 id=\"git使用方法\"><a href=\"#git使用方法\" class=\"headerlink\" title=\"git使用方法\"></a>git使用方法</h2><h3 id=\"注册GitHub账号\"><a href=\"#注册GitHub账号\" class=\"headerlink\" title=\"注册GitHub账号\"></a>注册GitHub账号</h3><p>账号：1</p>\n<p>密码：1</p>\n<h3 id=\"git注册\"><a href=\"#git注册\" class=\"headerlink\" title=\"git注册\"></a>git注册</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-string\">//</span>设置账号，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ git config <span class=\"hljs-params\">--global</span> user.name <span class=\"hljs-string\">&quot;zhengyiyang&quot;</span><br><br><span class=\"hljs-string\">//</span>设置邮箱，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ git config <span class=\"hljs-params\">--global</span> user.email <span class=\"hljs-string\">&quot;903372205@qq.com&quot;</span><br><br><span class=\"hljs-string\">//</span>设置SSH，如果去掉 <span class=\"hljs-params\">--global</span> 参数只对当前仓库有效。<br>$ ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;903372205@qq.com&quot;</span><br><br>储存位置：<span class=\"hljs-string\">/c/Users/114008/.ssh/id_rsa</span><br><br>id_rsa.pub为公共密钥<br>id_rsa为私人密钥<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"github配置SSH\"><a href=\"#github配置SSH\" class=\"headerlink\" title=\"github配置SSH\"></a>github配置SSH</h3><p><strong>打开id_rsa.pub文件，全选，复制全文</strong></p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-function\"><span class=\"hljs-title\">ssh</span></span>-rsa AAAAB3NzaC1yc2EA...<br></code></pre></td></tr></table></figure>\n\n<p><strong>github-&gt;账户-&gt;setting</strong></p>\n<p>Title：1</p>\n<p>Key type：Authentication Key</p>\n<h3 id=\"测试是否成功连接\"><a href=\"#测试是否成功连接\" class=\"headerlink\" title=\"测试是否成功连接\"></a>测试是否成功连接</h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">$ ssh -T git@github.com<br>//代表成功连接<br>Hi yangyangdeyi0119! You<span class=\"hljs-symbol\">&#x27;ve</span> successfully authenticated, but GitHub does <span class=\"hljs-keyword\">not</span> provide shell <span class=\"hljs-keyword\">access</span>.  <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"建立Github云端仓库\"><a href=\"#建立Github云端仓库\" class=\"headerlink\" title=\"建立Github云端仓库\"></a>建立Github云端仓库</h3><p><a href=\"https://blog.csdn.net/qq_44722674/article/details/117200397\">github仓库建立及配置教程新手教程_github创建仓库-CSDN博客</a></p>\n<p>修改用户名</p>\n<p><a href=\"https://blog.csdn.net/weixin_44285445/article/details/107833418\">GitHub修改昵称和用户名（图解详细教程）_github改名-CSDN博客</a></p>\n<h3 id=\"创建本地仓库\"><a href=\"#创建本地仓库\" class=\"headerlink\" title=\"创建本地仓库\"></a>创建本地仓库</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//首先需要新建一个文件夹作为本地仓库</span><br><span class=\"hljs-comment\">//初始化该文件为本地仓库</span><br><span class=\"hljs-symbol\">$</span> git init  <br><br><span class=\"hljs-comment\">//下载下来的test文件夹也是本地仓库</span><br><span class=\"hljs-symbol\">$</span> git clone https:<span class=\"hljs-comment\">//github.com/yangyangdeyi0119/test.git  </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件加入暂存区\"><a href=\"#将文件加入暂存区\" class=\"headerlink\" title=\"将文件加入暂存区\"></a>将文件加入暂存区</h3><p>文件本身在工作区，需要通过文件锁定，将其加入暂存区</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-comment\">//可以同时添加多个文件夹</span><br>$ git <span class=\"hljs-keyword\">add</span> /test /test1<br><br><span class=\"hljs-comment\">//添加单个文件</span><br>$ git <span class=\"hljs-keyword\">add</span> README.md <br>   <br>   <span class=\"hljs-comment\">//将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除  </span><br>$ git <span class=\"hljs-keyword\">add</span> .   <br><br><span class=\"hljs-comment\">//将文件包的所有文件加入暂存区</span><br>$ git <span class=\"hljs-keyword\">add</span> -f .<br>   <br>   <span class=\"hljs-comment\">//将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。 </span><br>$ git <span class=\"hljs-keyword\">add</span> -u <br><br><span class=\"hljs-comment\">//表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。</span><br>$ git <span class=\"hljs-keyword\">add</span> -A<br><br><span class=\"hljs-comment\">//暂存区各类状态</span><br>- untracked 未跟踪（未被纳入版本控制）<br>- tracked 已跟踪（被纳入版本控制）<br>- Unmodified 未修改状态<br>- Modified 已修改状态<br>- Staged 已暂存状态<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件移除暂存区\"><a href=\"#将文件移除暂存区\" class=\"headerlink\" title=\"将文件移除暂存区\"></a>将文件移除暂存区</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//仅删除暂存区的文件，不影响工作区的文件</span><br><span class=\"hljs-symbol\">$</span> git rm --cache &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//删除暂存区和工作区的文件</span><br><span class=\"hljs-symbol\">$</span> git rm -f &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//撤销对暂存区的修改。这个命令主要用于丢弃或还原文件的更改(测试未成功)</span><br><span class=\"hljs-symbol\">$</span> git restore --staged &lt;<span class=\"hljs-keyword\">file</span>/aaa&gt;<br><br><span class=\"hljs-comment\">//将分支回退到之前的提交，并且还可以选择是否保留暂存区的更改</span><br><span class=\"hljs-symbol\">$</span> git reset<br><br><span class=\"hljs-comment\">//撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工作区对应文件file；这个命令改变的是工作区</span><br><span class=\"hljs-symbol\">$</span> git checkout 文件名<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"查看文件状态\"><a href=\"#查看文件状态\" class=\"headerlink\" title=\"查看文件状态\"></a>查看文件状态</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//获取文件状态-完整</span><br><span class=\"hljs-symbol\">$</span> git status<br><br><span class=\"hljs-comment\">//获取文件状态-简洁</span><br><span class=\"hljs-symbol\">$</span> git status -s 更加简洁<br>\t<span class=\"hljs-string\">&#x27; &#x27;</span> （空格）表示文件未发生更改<br>\tM 表示文件发生改动。<br>\tA 表示新增文件。<br>\tD 表示删除文件。<br>\tR 表示重命名。<br>\tC 表示复制。<br>\tU 表示更新但未合并。<br>\t? 表示未跟踪文件。<br>\t! 表示忽略文件。<br><br><span class=\"hljs-comment\">//显示分支和跟踪信息 --branch</span><br><span class=\"hljs-symbol\">$</span> git status -s -b<br><br><span class=\"hljs-comment\">//显示变更的文本内容，在不使用 -s 选项时才会显示变更内容</span><br><span class=\"hljs-comment\">//只有一个 -v 选项时，显示版本库和暂存区之间比较发生变更的内容。</span><br><span class=\"hljs-symbol\">$</span> git status -v<br><span class=\"hljs-comment\">//而有两个 -v 选项时，显示暂存区和工作区之间比较发生变更的内容。</span><br><span class=\"hljs-symbol\">$</span> git status -v -v<br><br><span class=\"hljs-comment\">//显示未跟踪文件</span><br><span class=\"hljs-symbol\">$</span> git status -s -u[&lt;mode&gt;]<br>\t<span class=\"hljs-keyword\">no</span> —— 不显示未跟踪的文件<br>\t<span class=\"hljs-built_in\">normal</span> —— 显示未跟踪的文件和目录。<br>\t<span class=\"hljs-keyword\">all</span> —— 还显示了未跟踪目录下的文件<br>\t<br><span class=\"hljs-comment\">//用来查看暂存区中文件信息</span><br><span class=\"hljs-symbol\">$</span> git ls-<span class=\"hljs-keyword\">files</span> -参数<br>\t--cached(-c)显示暂存区中的文件，git ls-<span class=\"hljs-keyword\">files</span>命令默认的参数<br>\t--deleted(-d)显示删除的文件<br>\t--modified(-m) 显示修改过的文件<br>\t--other(-o)显示没有被git跟踪的文件<br>\t--stage(-s) 显示mode以及文件对应的Blob对象，进而我们可以获取暂存区中对应文件里面的内容。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"文件加入分支\"><a href=\"#文件加入分支\" class=\"headerlink\" title=\"文件加入分支\"></a>文件加入分支</h3><p>提交更改，实际上就是把暂存区的所有内容提交到当前分支，需要提交的文件修改通通放到暂存区；然后，一次性提交暂存区的所有修改</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">// 把暂存区的所有修改提交到分支，须输入描述信息</span><br><span class=\"hljs-symbol\">$</span> git commit -m <span class=\"hljs-string\">&quot;描述信息&quot;</span><br><br><span class=\"hljs-comment\">//更改之前一次commit的描述信息</span><br><span class=\"hljs-symbol\">$</span> git commit --amend<br><br><span class=\"hljs-comment\">//提交暂存区的指定文件到仓库区（不行，最好单个提交git add，然后在git commit）</span><br><span class=\"hljs-symbol\">$</span> git commit &lt;file1&gt; &lt;file2&gt; ... -m <span class=\"hljs-string\">&quot;message&quot;</span><br><br><span class=\"hljs-comment\">//-a 参数设置修改文件后不需要执行 git add 命令，直接来提交（不好用）</span><br><span class=\"hljs-symbol\">$</span> git commit -a<br><br>出现报错<span class=\"hljs-string\">&quot;nothing to commit, working tree clean&quot;</span><br>   只需要修改该文件夹下的任意一个文件，因为检测到版本未发生改变<br>   <br>   <span class=\"hljs-comment\">//查找推送版本号</span><br>   <span class=\"hljs-symbol\">$</span> git <span class=\"hljs-built_in\">log</span> <br>   <br>   <span class=\"hljs-comment\">//选择回退版本，回退后，版本之后的将会丢失</span><br>   git reset --hard &lt;目标版本号&gt;<br>   <br>   <span class=\"hljs-comment\">//软回退，不修改代码，回到暂存区</span><br>   git reset --soft HEAD~n<br>   <br>   <span class=\"hljs-comment\">//只显示一行信息</span><br>   git <span class=\"hljs-built_in\">log</span> --oneline<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//创建分支命令</span><br><span class=\"hljs-symbol\">$</span> git branch &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//切换分支命令</span><br><span class=\"hljs-symbol\">$</span> git checkout &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//列出分支</span><br>git branch<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息</span><br><span class=\"hljs-symbol\">$</span> git branch -v<br><span class=\"hljs-comment\">//查看本地分支+远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -a<br>\t- 红色代表云端仓库分支<br>\t- 白色代表本地仓库分支<br>\t- 绿色代表目前所在分支<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息+本地和远程分支的关系</span><br><span class=\"hljs-symbol\">$</span> git branch -vv<br><span class=\"hljs-comment\">//查看本地分支+上次提交的信息+本地和远程分支的关系+远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -vv -a<br><span class=\"hljs-comment\">//只查看远程分支</span><br><span class=\"hljs-symbol\">$</span> git branch -r<br><br><span class=\"hljs-comment\">//创建新分支并立即切换到该分支下</span><br><span class=\"hljs-symbol\">$</span> git checkout -b &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//删除本地分支</span><br><span class=\"hljs-symbol\">$</span> git branch -d &lt;branchname&gt;<br><span class=\"hljs-comment\">//强制删除分支</span><br><span class=\"hljs-symbol\">$</span> git branch -D aaa<br><br><span class=\"hljs-comment\">//合并分支</span><br><span class=\"hljs-symbol\">$</span> git merge &lt;branchname&gt;<br><br><span class=\"hljs-comment\">//删除远程分支</span><br><span class=\"hljs-symbol\">$</span> git push &lt;主机名&gt; -d &lt;分支名&gt;<br><br><span class=\"hljs-comment\">//将本地分支推送到远程分支，如果远程分支不存在，则创建。</span><br><span class=\"hljs-symbol\">$</span> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br><span class=\"hljs-symbol\">$</span> git push --<span class=\"hljs-keyword\">set</span>-upstream <span class=\"hljs-comment\">origin dev</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将文件推送到云端仓库\"><a href=\"#将文件推送到云端仓库\" class=\"headerlink\" title=\"将文件推送到云端仓库\"></a>将文件推送到云端仓库</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">//第一次推送代码指令<br>$ git push -u origin &lt;branchname&gt;<span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//-u参数可以在推送的同时,将origin仓库的master分支设置为本地仓库当前分支的upstream(上游)。添加了这个参数,将来运行git pull命令从远程仓库获取内容时,本地仓库的的这个分支就可以直接从origin的master分支获取内容,省去了另外添加参数的麻烦。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//之后推送</span><br>$ git push origin master<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//不同分支之间推送</span><br>$ git push -u origin &lt;branchname1&gt;:origin/&lt;branchname2&gt;<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//云端仓库分支更新到本地仓库</span><br>$ git remote update origin<br>\t后缀加上 <span class=\"hljs-comment\">--prune则可以与云端仓库分支一致，多余的会被删除</span><br>\t<span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//报错</span><br>error: failed <span class=\"hljs-built_in\">to</span> push some refs <span class=\"hljs-built_in\">to</span> <span class=\"hljs-string\">&#x27;https://github.com/yangyangdeyi0119/Learning.git&#x27;</span><br>hint: Updates were rejected because <span class=\"hljs-keyword\">the</span> remote <span class=\"hljs-keyword\">contains</span> work that you <span class=\"hljs-built_in\">do</span> <span class=\"hljs-keyword\">not</span><br>hint: have locally. This is usually caused <span class=\"hljs-keyword\">by</span> another repository pushing <span class=\"hljs-built_in\">to</span><br>hint: <span class=\"hljs-keyword\">the</span> same ref. If you want <span class=\"hljs-built_in\">to</span> integrate <span class=\"hljs-keyword\">the</span> remote changes, use<br>hint: <span class=\"hljs-string\">&#x27;git pull&#x27;</span> <span class=\"hljs-keyword\">before</span> pushing again.<br>hint: See <span class=\"hljs-keyword\">the</span> <span class=\"hljs-string\">&#x27;Note about fast-forwards&#x27;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&#x27;git push --help&#x27;</span> <span class=\"hljs-keyword\">for</span> details.<br>直接git pull之后就可以了<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//删除现有远程仓库</span><br>$ git remote rm origin<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//添加新远程仓库</span><br>$ git remote <span class=\"hljs-built_in\">add</span> origin url<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//查看远程仓库的地址</span><br>$ git remote -v<br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">//更换远程仓库地址，URL为新地址</span><br>$ git remote <span class=\"hljs-built_in\">set</span>-url origin <span class=\"hljs-built_in\">URL</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"暂存空间使用\"><a href=\"#暂存空间使用\" class=\"headerlink\" title=\"暂存空间使用\"></a>暂存空间使用</h3><p>stash是本地的，不会通过git push命令上传到git server上</p>\n<p>发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑git stash。</p>\n<p>使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用git stash就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用git stash apply将以前一半的工作应用回来。</p>\n<p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//将未提交的修改保存至堆栈中</span><br><span class=\"hljs-symbol\">$</span> git stash<br><br><span class=\"hljs-comment\">//为此次stash添加说明信息，便于以后查看</span><br><span class=\"hljs-symbol\">$</span> git stash save <span class=\"hljs-string\">&quot;stash message info&quot;</span>  <br><br><span class=\"hljs-comment\">//查看stash栈中的内容</span><br><span class=\"hljs-symbol\">$</span> git stash list<br><br><span class=\"hljs-comment\">//将stash中的内容弹出，并应用到当前分支对应的工作目录上，该命令将堆栈中最近保存的内容删除（出栈操作）</span><br><span class=\"hljs-symbol\">$</span> git stash pop<br><br><span class=\"hljs-comment\">//将指定id的内容应用到当前分支的工作目录，内容不会删除，可以在多个分支上重复进行操作</span><br><span class=\"hljs-symbol\">$</span> git stash apply stash名称<br><br><span class=\"hljs-comment\">//从堆栈中移除某个指定的stash</span><br><span class=\"hljs-symbol\">$</span> git stash drop stash名称<br><br><span class=\"hljs-comment\">//清除堆栈中的所有内容</span><br><span class=\"hljs-symbol\">$</span> git stash clear<br><br><span class=\"hljs-comment\">//查看堆栈中最新保存的stash和当前目录的差异。</span><br><span class=\"hljs-symbol\">$</span> git stash show<br><br><span class=\"hljs-comment\">//从最新的stash创建分支。</span><br><span class=\"hljs-symbol\">$</span> git stash branch<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"代码标签\"><a href=\"#代码标签\" class=\"headerlink\" title=\"代码标签\"></a>代码标签</h3><p>tag 中文我们可以称它为标签，tag 就是 对某次 commit 的一个标识，相当于起了一个别名。</p>\n<p>【轻量标签 】： 只是某个commit 的引用，可以理解为是一个commit的别名；</p>\n<p>【附注标签】 ：是存储在git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间以及其他的标签信息。它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-comment\">//直接列出所有的标签</span><br><span class=\"hljs-symbol\">$</span> git tag<br><br><span class=\"hljs-comment\">//可以根据&lt;tagname&gt;进行标签的筛选</span><br><span class=\"hljs-symbol\">$</span> git tag -l &lt;tagname*&gt;<br><br><span class=\"hljs-comment\">//查看标签的提交信息</span><br><span class=\"hljs-symbol\">$</span> git show 标签名<br><br><span class=\"hljs-comment\">//在提交历史中查看标签</span><br><span class=\"hljs-symbol\">$</span> git <span class=\"hljs-built_in\">log</span> --online --graph<br><br><span class=\"hljs-comment\">//创建轻量标签</span><br><span class=\"hljs-symbol\">$</span> git tag 标签名<br><span class=\"hljs-symbol\">$</span> git tag 标签名 提交版本<br><br><span class=\"hljs-comment\">//创建附注标签</span><br><span class=\"hljs-symbol\">$</span> git tag -a 标签名称 -m 附注信息<br><span class=\"hljs-symbol\">$</span> git tag -a 标签名称 提交版本号 -m 附注信息<br>\t-a : 理解为 annotated 的首字符，表示 附注标签<br>\t<br><span class=\"hljs-comment\">//删除标签</span><br>git tag -d 标签名称<br><br><span class=\"hljs-comment\">//将指定的标签上传到远程仓库</span><br><span class=\"hljs-symbol\">$</span> git push origin &lt;tagname&gt;<br><br><span class=\"hljs-comment\">//将所有不在远程仓库中的标签上传到远程仓库</span><br><span class=\"hljs-symbol\">$</span> git push origin --tags<br><br><span class=\"hljs-comment\">//删除远程仓库中的 指定标签</span><br><span class=\"hljs-symbol\">$</span> git push origin  :regs/tags/&lt;tagname&gt;<br><span class=\"hljs-symbol\">$</span> git push origin --delete &lt;tagname&gt;<br></code></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clz0qu1nd0002rcfbd74jfitf","category_id":"clz0w34yc0000tsfb2jlv3whz","_id":"clz0w34yd0001tsfb1h7zeff1"},{"post_id":"clz0qu1nc0001rcfbcdhs3u4m","category_id":"clz0w3ssa0004tsfb4bef9efq","_id":"clz0w3ssa0005tsfb4iw88txe"},{"post_id":"clz0qu1nf0005rcfbh25yapd0","category_id":"clz0w44qh0006tsfbc8h19gdm","_id":"clz0w44qi0007tsfb8licdop6"},{"post_id":"clz0qu1nf0004rcfb0jmy4t6u","category_id":"clz0w4eeh0008tsfbetp1ej76","_id":"clz0w4eei0009tsfb0l605qg4"}],"PostTag":[{"post_id":"clz0qu1nc0001rcfbcdhs3u4m","tag_id":"clz0qu1ne0003rcfbhhyj8uzs","_id":"clz0qu1ng0007rcfbf2eb3zjt"},{"post_id":"clz0qu1nd0002rcfbd74jfitf","tag_id":"clz0qu1nf0006rcfb7angcid9","_id":"clz0qu1ng0009rcfbdcon1en5"},{"post_id":"clz0qu1nf0004rcfb0jmy4t6u","tag_id":"clz0qu1ng0008rcfb8tw2abhw","_id":"clz0qu1ng000brcfb6k7n2zvf"},{"post_id":"clz0qu1nf0005rcfbh25yapd0","tag_id":"clz0qu1ng000arcfb8smxa4im","_id":"clz0qu1ng000crcfb5a8edi9w"}],"Tag":[{"name":"Gcode","_id":"clz0qu1ne0003rcfbhhyj8uzs"},{"name":"Linux","_id":"clz0qu1nf0006rcfb7angcid9"},{"name":"Github","_id":"clz0qu1ng0008rcfb8tw2abhw"},{"name":"git","_id":"clz0qu1ng000arcfb8smxa4im"}]}}