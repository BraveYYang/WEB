<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Github+HEXO实现网站DIY</title>
    <link href="/YYang.github.io/2024/07/25/Work%20No.6/"/>
    <url>/YYang.github.io/2024/07/25/Work%20No.6/</url>
    
    <content type="html"><![CDATA[<h1 id="Work-No-6"><a href="#Work-No-6" class="headerlink" title="Work No.6"></a>Work No.6</h1><h3 id="创建github-page网页"><a href="#创建github-page网页" class="headerlink" title="创建github.page网页"></a>创建github.page网页</h3><p>点击Repositories，选择新建Repositories仓库</p><p>在仓库名字Repository name栏填写网页的网址，后缀需要添加 .github.io</p><p>例如 webname.github.io</p><p><img src="https://s2.loli.net/2024/07/25/CagbJOAwjnGZl5h.png" alt="image-20240724153741084.png"></p><p>之后点击 Create repository ，创建该仓库，其他无需调整</p><p>之后需要创建一个 index.html 文件，用于后续能够选取分支</p><p><img src="https://s2.loli.net/2024/07/25/fCE81aVXuvQHwkK.png" alt="image-20240724154237430.png"></p><p>文件名字输入 index.html，内容为 <code>&lt;hl&gt; hello &lt;/hl&gt;</code> 这个文件会初始化成一个网页，网页的内容只有 hello，这个随便填就行，后续会用模板，不用考虑这个</p><p><img src="https://s2.loli.net/2024/07/25/xcCAzGZfilE8pXI.png" alt="image-20240724154427037.png"></p><p>进入仓库，选择 Setting ，点击 pages ，在 branch 上选择 main 分支（刚刚创建文件也是为了创建这个分支），点击 save 保存，之后等待几分钟，就会出现创建的网址，点击 visit site 即可进入建立的网页</p><p><img src="https://s2.loli.net/2024/07/25/iJS68ZOUrkLHKBo.png" alt="image-20240724155135615.png"></p><p>完成这一步之后，就可以得到一个”hello“的网页，该网页没有任何排版和格式</p><h3 id="配置HEXO并进行部署"><a href="#配置HEXO并进行部署" class="headerlink" title="配置HEXO并进行部署"></a>配置HEXO并进行部署</h3><p>打开git bash，执行如下命令安装hexo</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span> <span class="hljs-meta"># 此命令完成对 hexo 的安装</span><br></code></pre></td></tr></table></figure><p>如果没有安装npm、git、node.js的话</p><p>node.js参考<a href="https://blog.csdn.net/yaorongke/article/details/119084295">https://blog.csdn.net/yaorongke/article/details/119084295</a></p><p>git安装参考<a href="https://blog.csdn.net/mukes/article/details/115693833">https://blog.csdn.net/mukes/article/details/115693833</a></p><p>之后随便在想要的地方建一个文件夹，这个文件夹的作用是用于博客文章存放和仓库交互，例如<blog></p><p>进入该文件，将该文件初始化</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> blog <span class="hljs-comment"># 进入该文件夹</span><br><span class="hljs-variable">$</span> hexo init <span class="hljs-comment"># 该命令完成 hexo 在本地博客目录的初始化</span><br></code></pre></td></tr></table></figure><p>之后生成网页的静态文件，如果需要更新网页的配置，需要先清理，在重新生成</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g <span class="hljs-comment"># 生成静态文件，生成的文件在public文件夹里面</span><br><br><span class="hljs-variable">$ </span>hexo clean <span class="hljs-comment"># 清除生成的静态文件</span><br></code></pre></td></tr></table></figure><p>可以进行本地预览，本地预览的ctrl+c会退出运行，所以用右键复制网址到网页上预览</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo s <span class="hljs-comment"># 开启本地预览</span><br></code></pre></td></tr></table></figure><p>安装部署插件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> hexo-deployer-git --save <span class="hljs-comment"># 安装部署插件</span><br></code></pre></td></tr></table></figure><p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为站点配置文件， 后者称为主题配置文件。打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code>和<code>url </code>的部分：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"># URL<br>## <span class="hljs-keyword">Set</span> your site url here. <span class="hljs-keyword">For</span> example, <span class="hljs-keyword">if</span> you use GitHub Page, <span class="hljs-keyword">set</span> url <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;https://username.github.io/project&#x27;</span><br>url: GitHub pages的网址，例如https:<span class="hljs-comment">//GitHub用户名/仓库名               //修改这个地方，需要把网址改对，否则网页没有格式</span><br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: <span class="hljs-keyword">true</span> # <span class="hljs-keyword">Set</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">false</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">remove</span> trailing <span class="hljs-string">&#x27;index.html&#x27;</span> <span class="hljs-keyword">from</span> permalinks<br>  trailing_html: <span class="hljs-keyword">true</span> # <span class="hljs-keyword">Set</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">false</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">remove</span> trailing <span class="hljs-string">&#x27;.html&#x27;</span> <span class="hljs-keyword">from</span> permalinks<br><br># Deployment<br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class="hljs-keyword">type</span>: git<br>  repo: git@github.com:GitHub账户名/仓库名.github.io.git<br>  branch: master #如果分支是main记得修改，需要推送到哪个分支，就选择哪个分支<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/25/Us5zgjtJm8fKQ6X.png" alt="image-20240724161404111.png"></p><p>部署到 GitHub</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo d <span class="hljs-comment"># 将public里面的文件发送到云端GitHub上面</span><br></code></pre></td></tr></table></figure><p>之后就可以刷新网页看到上传上去的网页，就拥有了自己的网页</p><h3 id="主题更换和选择"><a href="#主题更换和选择" class="headerlink" title="主题更换和选择"></a>主题更换和选择</h3><p>我们上面用的是系统默认的主题，比较丑，所以我们可以使用hexo去挑选我们想要的主题类型</p><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98">开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)</a></p><p><a href="https://hexo.io/themes/">Themes | Hexo</a>可以在这个网址里面挑选自己喜欢的</p><p>本文挑选了fluid进行下载，选择直接下载zip包或者<code>git clone https://github.com/fluid-dev/hexo-theme-fluid.git</code></p><p>将下载的包解压放到 themes 文件夹里面，文件夹的名字改成fluid，最好不要文件夹套娃，如果出现，则将里面的文件全部移出来</p><p>继续修改博客根目录下的 _config.yml 文件，注意，不是fluid里面的_config.yml文件</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br><br><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br></code></pre></td></tr></table></figure><p>首次使用主题的「关于页」需要手动创建，打开git，输入代码</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性，<code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>之后重复上面的步骤先进行静态页面清除，再生成，之后上传到GitHub仓库中进行页面更新，等待几分钟后，如下图所示</p><p><img src="https://s2.loli.net/2024/07/25/2wTjGbtilvdkBpW.png" alt="image-20240724162639684.png"></p><h3 id="文档上传"><a href="#文档上传" class="headerlink" title="文档上传"></a>文档上传</h3><p>使用Typora进行.md文档的编写，非常好用的一个编辑器，绿色版可以网上搜索</p><p>之后将md文件放到博客文件夹下面<code>source/_posts/</code>文件夹下面</p><p>之后使用vim编辑器对文档进行title和tag的编辑</p><p><a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim | 菜鸟教程 (runoob.com)</a></p><p>进入md文件，首先点击 i 进入编辑模式，在开头位置输入，其中title为文章的名字，tag为文章的标签，方便进行检索</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-string">title：</span> <span class="hljs-string">hello</span> <span class="hljs-string">word</span><br><span class="hljs-string">tag：</span> <span class="hljs-string">write</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>编辑完成点击 Esc 退出报错，直接输入 :wq 保存编辑并且退出，完成文件的标记修改</p><p>之后回到git bash中输入</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g <span class="hljs-comment"># 生成静态文件，生成的文件在public文件夹里面</span><br><br><span class="hljs-variable">$ </span>hexo d <span class="hljs-comment"># 将生成的文件导入GitHub站点</span><br></code></pre></td></tr></table></figure><p>到此，等待几分钟后，你的文章就在你的网页上面出现了</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用</title>
    <link href="/YYang.github.io/2024/07/25/Work%20No.5/"/>
    <url>/YYang.github.io/2024/07/25/Work%20No.5/</url>
    
    <content type="html"><![CDATA[<h1 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h1><h2 id="git基本了解"><a href="#git基本了解" class="headerlink" title="git基本了解"></a>git基本了解</h2><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><a href="https://blog.csdn.net/qq_37883866/article/details/105349257">超详细的Git使用教程(图文)-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_35206244/article/details/97698815">Git基本使用教程（一）：入门及第一次基本完整操作_git的使用-CSDN博客</a></p><p><a href="https://www.cnblogs.com/Jing-Wang/p/10991008.html">git–一文弄懂git的工作区、索引区、本地仓库、远程仓库以及add、commit、push三个操作 - at_today - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/cposture/p/git.html">【原创】Git删除暂存区或版本库中的文件 - cposture - 博客园 (cnblogs.com)</a></p><p><a href="https://geek-docs.com/git/git-questions/611_git_how_to_remove_a_file_from_the_staging_area_index_cache_in_git.html">Git如何从暂存区（index&#x2F;cache）中移除文件|极客教程 (geek-docs.com)</a></p><p><a href="https://blog.csdn.net/weixin_44567318/article/details/119701438">git status 状态命令——查看文件状态_git status 看非新增文件-CSDN博客</a></p><p><a href="https://www.cnblogs.com/feeland/p/4500721.html">Git 学习（三）本地仓库操作——git add &amp; commit - feesland - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/chaogu94/article/details/111057918">git branch的详细使用，10个常见用法_git branch -vv-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_39505245/article/details/124705850">Git基础 - git tag 一文真正的搞懂git标签的使用-CSDN博客</a></p><h3 id="git下载"><a href="#git下载" class="headerlink" title="git下载"></a>git下载</h3><p><strong>官网：</strong> <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h2 id="git使用方法"><a href="#git使用方法" class="headerlink" title="git使用方法"></a>git使用方法</h2><h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h3><p>账号：1</p><p>密码：1</p><h3 id="git注册"><a href="#git注册" class="headerlink" title="git注册"></a>git注册</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>设置账号，如果去掉 <span class="hljs-params">--global</span> 参数只对当前仓库有效。<br>$ git config <span class="hljs-params">--global</span> user.name <span class="hljs-string">&quot;zhengyiyang&quot;</span><br><br><span class="hljs-string">//</span>设置邮箱，如果去掉 <span class="hljs-params">--global</span> 参数只对当前仓库有效。<br>$ git config <span class="hljs-params">--global</span> user.email <span class="hljs-string">&quot;903372205@qq.com&quot;</span><br><br><span class="hljs-string">//</span>设置SSH，如果去掉 <span class="hljs-params">--global</span> 参数只对当前仓库有效。<br>$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;903372205@qq.com&quot;</span><br><br>储存位置：<span class="hljs-string">/c/Users/114008/.ssh/id_rsa</span><br><br>id_rsa.pub为公共密钥<br>id_rsa为私人密钥<br></code></pre></td></tr></table></figure><h3 id="github配置SSH"><a href="#github配置SSH" class="headerlink" title="github配置SSH"></a>github配置SSH</h3><p><strong>打开id_rsa.pub文件，全选，复制全文</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">ssh</span></span>-rsa AAAAB3NzaC1yc2EA...<br></code></pre></td></tr></table></figure><p><strong>github-&gt;账户-&gt;setting</strong></p><p>Title：1</p><p>Key type：Authentication Key</p><h3 id="测试是否成功连接"><a href="#测试是否成功连接" class="headerlink" title="测试是否成功连接"></a>测试是否成功连接</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ ssh -T git@github.com<br>//代表成功连接<br>Hi yangyangdeyi0119! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.  <br></code></pre></td></tr></table></figure><h3 id="建立Github云端仓库"><a href="#建立Github云端仓库" class="headerlink" title="建立Github云端仓库"></a>建立Github云端仓库</h3><p><a href="https://blog.csdn.net/qq_44722674/article/details/117200397">github仓库建立及配置教程新手教程_github创建仓库-CSDN博客</a></p><p>修改用户名</p><p><a href="https://blog.csdn.net/weixin_44285445/article/details/107833418">GitHub修改昵称和用户名（图解详细教程）_github改名-CSDN博客</a></p><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">//首先需要新建一个文件夹作为本地仓库</span><br><span class="hljs-comment">//初始化该文件为本地仓库</span><br><span class="hljs-symbol">$</span> git init  <br><br><span class="hljs-comment">//下载下来的test文件夹也是本地仓库</span><br><span class="hljs-symbol">$</span> git clone https:<span class="hljs-comment">//github.com/yangyangdeyi0119/test.git  </span><br></code></pre></td></tr></table></figure><h3 id="将文件加入暂存区"><a href="#将文件加入暂存区" class="headerlink" title="将文件加入暂存区"></a>将文件加入暂存区</h3><p>文件本身在工作区，需要通过文件锁定，将其加入暂存区</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-comment">//可以同时添加多个文件夹</span><br>$ git <span class="hljs-keyword">add</span> /test /test1<br><br><span class="hljs-comment">//添加单个文件</span><br>$ git <span class="hljs-keyword">add</span> README.md <br>   <br>   <span class="hljs-comment">//将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除  </span><br>$ git <span class="hljs-keyword">add</span> .   <br><br><span class="hljs-comment">//将文件包的所有文件加入暂存区</span><br>$ git <span class="hljs-keyword">add</span> -f .<br>   <br>   <span class="hljs-comment">//将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。 </span><br>$ git <span class="hljs-keyword">add</span> -u <br><br><span class="hljs-comment">//表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。</span><br>$ git <span class="hljs-keyword">add</span> -A<br><br><span class="hljs-comment">//暂存区各类状态</span><br>- untracked 未跟踪（未被纳入版本控制）<br>- tracked 已跟踪（被纳入版本控制）<br>- Unmodified 未修改状态<br>- Modified 已修改状态<br>- Staged 已暂存状态<br></code></pre></td></tr></table></figure><h3 id="将文件移除暂存区"><a href="#将文件移除暂存区" class="headerlink" title="将文件移除暂存区"></a>将文件移除暂存区</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">//仅删除暂存区的文件，不影响工作区的文件</span><br><span class="hljs-symbol">$</span> git rm --cache &lt;<span class="hljs-keyword">file</span>/aaa&gt;<br><br><span class="hljs-comment">//删除暂存区和工作区的文件</span><br><span class="hljs-symbol">$</span> git rm -f &lt;<span class="hljs-keyword">file</span>/aaa&gt;<br><br><span class="hljs-comment">//撤销对暂存区的修改。这个命令主要用于丢弃或还原文件的更改(测试未成功)</span><br><span class="hljs-symbol">$</span> git restore --staged &lt;<span class="hljs-keyword">file</span>/aaa&gt;<br><br><span class="hljs-comment">//将分支回退到之前的提交，并且还可以选择是否保留暂存区的更改</span><br><span class="hljs-symbol">$</span> git reset<br><br><span class="hljs-comment">//撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工作区对应文件file；这个命令改变的是工作区</span><br><span class="hljs-symbol">$</span> git checkout 文件名<br><br></code></pre></td></tr></table></figure><h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">//获取文件状态-完整</span><br><span class="hljs-symbol">$</span> git status<br><br><span class="hljs-comment">//获取文件状态-简洁</span><br><span class="hljs-symbol">$</span> git status -s 更加简洁<br><span class="hljs-string">&#x27; &#x27;</span> （空格）表示文件未发生更改<br>M 表示文件发生改动。<br>A 表示新增文件。<br>D 表示删除文件。<br>R 表示重命名。<br>C 表示复制。<br>U 表示更新但未合并。<br>? 表示未跟踪文件。<br>! 表示忽略文件。<br><br><span class="hljs-comment">//显示分支和跟踪信息 --branch</span><br><span class="hljs-symbol">$</span> git status -s -b<br><br><span class="hljs-comment">//显示变更的文本内容，在不使用 -s 选项时才会显示变更内容</span><br><span class="hljs-comment">//只有一个 -v 选项时，显示版本库和暂存区之间比较发生变更的内容。</span><br><span class="hljs-symbol">$</span> git status -v<br><span class="hljs-comment">//而有两个 -v 选项时，显示暂存区和工作区之间比较发生变更的内容。</span><br><span class="hljs-symbol">$</span> git status -v -v<br><br><span class="hljs-comment">//显示未跟踪文件</span><br><span class="hljs-symbol">$</span> git status -s -u[&lt;mode&gt;]<br><span class="hljs-keyword">no</span> —— 不显示未跟踪的文件<br><span class="hljs-built_in">normal</span> —— 显示未跟踪的文件和目录。<br><span class="hljs-keyword">all</span> —— 还显示了未跟踪目录下的文件<br><br><span class="hljs-comment">//用来查看暂存区中文件信息</span><br><span class="hljs-symbol">$</span> git ls-<span class="hljs-keyword">files</span> -参数<br>--cached(-c)显示暂存区中的文件，git ls-<span class="hljs-keyword">files</span>命令默认的参数<br>--deleted(-d)显示删除的文件<br>--modified(-m) 显示修改过的文件<br>--other(-o)显示没有被git跟踪的文件<br>--stage(-s) 显示mode以及文件对应的Blob对象，进而我们可以获取暂存区中对应文件里面的内容。<br></code></pre></td></tr></table></figure><h3 id="文件加入分支"><a href="#文件加入分支" class="headerlink" title="文件加入分支"></a>文件加入分支</h3><p>提交更改，实际上就是把暂存区的所有内容提交到当前分支，需要提交的文件修改通通放到暂存区；然后，一次性提交暂存区的所有修改</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">// 把暂存区的所有修改提交到分支，须输入描述信息</span><br><span class="hljs-symbol">$</span> git commit -m <span class="hljs-string">&quot;描述信息&quot;</span><br><br><span class="hljs-comment">//更改之前一次commit的描述信息</span><br><span class="hljs-symbol">$</span> git commit --amend<br><br><span class="hljs-comment">//提交暂存区的指定文件到仓库区（不行，最好单个提交git add，然后在git commit）</span><br><span class="hljs-symbol">$</span> git commit &lt;file1&gt; &lt;file2&gt; ... -m <span class="hljs-string">&quot;message&quot;</span><br><br><span class="hljs-comment">//-a 参数设置修改文件后不需要执行 git add 命令，直接来提交（不好用）</span><br><span class="hljs-symbol">$</span> git commit -a<br><br>出现报错<span class="hljs-string">&quot;nothing to commit, working tree clean&quot;</span><br>   只需要修改该文件夹下的任意一个文件，因为检测到版本未发生改变<br>   <br>   <span class="hljs-comment">//查找推送版本号</span><br>   <span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span> <br>   <br>   <span class="hljs-comment">//选择回退版本，回退后，版本之后的将会丢失</span><br>   git reset --hard &lt;目标版本号&gt;<br>   <br>   <span class="hljs-comment">//软回退，不修改代码，回到暂存区</span><br>   git reset --soft HEAD~n<br>   <br>   <span class="hljs-comment">//只显示一行信息</span><br>   git <span class="hljs-built_in">log</span> --oneline<br></code></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">//创建分支命令</span><br><span class="hljs-symbol">$</span> git branch &lt;branchname&gt;<br><br><span class="hljs-comment">//切换分支命令</span><br><span class="hljs-symbol">$</span> git checkout &lt;branchname&gt;<br><br><span class="hljs-comment">//列出分支</span><br>git branch<br><span class="hljs-comment">//查看本地分支+上次提交的信息</span><br><span class="hljs-symbol">$</span> git branch -v<br><span class="hljs-comment">//查看本地分支+远程分支</span><br><span class="hljs-symbol">$</span> git branch -a<br>- 红色代表云端仓库分支<br>- 白色代表本地仓库分支<br>- 绿色代表目前所在分支<br><span class="hljs-comment">//查看本地分支+上次提交的信息+本地和远程分支的关系</span><br><span class="hljs-symbol">$</span> git branch -vv<br><span class="hljs-comment">//查看本地分支+上次提交的信息+本地和远程分支的关系+远程分支</span><br><span class="hljs-symbol">$</span> git branch -vv -a<br><span class="hljs-comment">//只查看远程分支</span><br><span class="hljs-symbol">$</span> git branch -r<br><br><span class="hljs-comment">//创建新分支并立即切换到该分支下</span><br><span class="hljs-symbol">$</span> git checkout -b &lt;branchname&gt;<br><br><span class="hljs-comment">//删除本地分支</span><br><span class="hljs-symbol">$</span> git branch -d &lt;branchname&gt;<br><span class="hljs-comment">//强制删除分支</span><br><span class="hljs-symbol">$</span> git branch -D aaa<br><br><span class="hljs-comment">//合并分支</span><br><span class="hljs-symbol">$</span> git merge &lt;branchname&gt;<br><br><span class="hljs-comment">//删除远程分支</span><br><span class="hljs-symbol">$</span> git push &lt;主机名&gt; -d &lt;分支名&gt;<br><br><span class="hljs-comment">//将本地分支推送到远程分支，如果远程分支不存在，则创建。</span><br><span class="hljs-symbol">$</span> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br><span class="hljs-symbol">$</span> git push --<span class="hljs-keyword">set</span>-upstream <span class="hljs-comment">origin dev</span><br></code></pre></td></tr></table></figure><h3 id="将文件推送到云端仓库"><a href="#将文件推送到云端仓库" class="headerlink" title="将文件推送到云端仓库"></a>将文件推送到云端仓库</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">//第一次推送代码指令<br>$ git push -u origin &lt;branchname&gt;<span class="hljs-comment"></span><br><span class="hljs-comment">//-u参数可以在推送的同时,将origin仓库的master分支设置为本地仓库当前分支的upstream(上游)。添加了这个参数,将来运行git pull命令从远程仓库获取内容时,本地仓库的的这个分支就可以直接从origin的master分支获取内容,省去了另外添加参数的麻烦。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//之后推送</span><br>$ git push origin master<br><span class="hljs-comment"></span><br><span class="hljs-comment">//不同分支之间推送</span><br>$ git push -u origin &lt;branchname1&gt;:origin/&lt;branchname2&gt;<br><span class="hljs-comment"></span><br><span class="hljs-comment">//云端仓库分支更新到本地仓库</span><br>$ git remote update origin<br>后缀加上 <span class="hljs-comment">--prune则可以与云端仓库分支一致，多余的会被删除</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//报错</span><br>error: failed <span class="hljs-built_in">to</span> push some refs <span class="hljs-built_in">to</span> <span class="hljs-string">&#x27;https://github.com/yangyangdeyi0119/Learning.git&#x27;</span><br>hint: Updates were rejected because <span class="hljs-keyword">the</span> remote <span class="hljs-keyword">contains</span> work that you <span class="hljs-built_in">do</span> <span class="hljs-keyword">not</span><br>hint: have locally. This is usually caused <span class="hljs-keyword">by</span> another repository pushing <span class="hljs-built_in">to</span><br>hint: <span class="hljs-keyword">the</span> same ref. If you want <span class="hljs-built_in">to</span> integrate <span class="hljs-keyword">the</span> remote changes, use<br>hint: <span class="hljs-string">&#x27;git pull&#x27;</span> <span class="hljs-keyword">before</span> pushing again.<br>hint: See <span class="hljs-keyword">the</span> <span class="hljs-string">&#x27;Note about fast-forwards&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;git push --help&#x27;</span> <span class="hljs-keyword">for</span> details.<br>直接git pull之后就可以了<br><span class="hljs-comment"></span><br><span class="hljs-comment">//删除现有远程仓库</span><br>$ git remote rm origin<br><span class="hljs-comment"></span><br><span class="hljs-comment">//添加新远程仓库</span><br>$ git remote <span class="hljs-built_in">add</span> origin url<br><span class="hljs-comment"></span><br><span class="hljs-comment">//查看远程仓库的地址</span><br>$ git remote -v<br><span class="hljs-comment"></span><br><span class="hljs-comment">//更换远程仓库地址，URL为新地址</span><br>$ git remote <span class="hljs-built_in">set</span>-url origin <span class="hljs-built_in">URL</span><br></code></pre></td></tr></table></figure><h3 id="暂存空间使用"><a href="#暂存空间使用" class="headerlink" title="暂存空间使用"></a>暂存空间使用</h3><p>stash是本地的，不会通过git push命令上传到git server上</p><p>发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑git stash。</p><p>使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用git stash就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用git stash apply将以前一半的工作应用回来。</p><p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">//将未提交的修改保存至堆栈中</span><br><span class="hljs-symbol">$</span> git stash<br><br><span class="hljs-comment">//为此次stash添加说明信息，便于以后查看</span><br><span class="hljs-symbol">$</span> git stash save <span class="hljs-string">&quot;stash message info&quot;</span>  <br><br><span class="hljs-comment">//查看stash栈中的内容</span><br><span class="hljs-symbol">$</span> git stash list<br><br><span class="hljs-comment">//将stash中的内容弹出，并应用到当前分支对应的工作目录上，该命令将堆栈中最近保存的内容删除（出栈操作）</span><br><span class="hljs-symbol">$</span> git stash pop<br><br><span class="hljs-comment">//将指定id的内容应用到当前分支的工作目录，内容不会删除，可以在多个分支上重复进行操作</span><br><span class="hljs-symbol">$</span> git stash apply stash名称<br><br><span class="hljs-comment">//从堆栈中移除某个指定的stash</span><br><span class="hljs-symbol">$</span> git stash drop stash名称<br><br><span class="hljs-comment">//清除堆栈中的所有内容</span><br><span class="hljs-symbol">$</span> git stash clear<br><br><span class="hljs-comment">//查看堆栈中最新保存的stash和当前目录的差异。</span><br><span class="hljs-symbol">$</span> git stash show<br><br><span class="hljs-comment">//从最新的stash创建分支。</span><br><span class="hljs-symbol">$</span> git stash branch<br></code></pre></td></tr></table></figure><h3 id="代码标签"><a href="#代码标签" class="headerlink" title="代码标签"></a>代码标签</h3><p>tag 中文我们可以称它为标签，tag 就是 对某次 commit 的一个标识，相当于起了一个别名。</p><p>【轻量标签 】： 只是某个commit 的引用，可以理解为是一个commit的别名；</p><p>【附注标签】 ：是存储在git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间以及其他的标签信息。它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">//直接列出所有的标签</span><br><span class="hljs-symbol">$</span> git tag<br><br><span class="hljs-comment">//可以根据&lt;tagname&gt;进行标签的筛选</span><br><span class="hljs-symbol">$</span> git tag -l &lt;tagname*&gt;<br><br><span class="hljs-comment">//查看标签的提交信息</span><br><span class="hljs-symbol">$</span> git show 标签名<br><br><span class="hljs-comment">//在提交历史中查看标签</span><br><span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span> --online --graph<br><br><span class="hljs-comment">//创建轻量标签</span><br><span class="hljs-symbol">$</span> git tag 标签名<br><span class="hljs-symbol">$</span> git tag 标签名 提交版本<br><br><span class="hljs-comment">//创建附注标签</span><br><span class="hljs-symbol">$</span> git tag -a 标签名称 -m 附注信息<br><span class="hljs-symbol">$</span> git tag -a 标签名称 提交版本号 -m 附注信息<br>-a : 理解为 annotated 的首字符，表示 附注标签<br><br><span class="hljs-comment">//删除标签</span><br>git tag -d 标签名称<br><br><span class="hljs-comment">//将指定的标签上传到远程仓库</span><br><span class="hljs-symbol">$</span> git push origin &lt;tagname&gt;<br><br><span class="hljs-comment">//将所有不在远程仓库中的标签上传到远程仓库</span><br><span class="hljs-symbol">$</span> git push origin --tags<br><br><span class="hljs-comment">//删除远程仓库中的 指定标签</span><br><span class="hljs-symbol">$</span> git push origin  :regs/tags/&lt;tagname&gt;<br><span class="hljs-symbol">$</span> git push origin --delete &lt;tagname&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gcode学习</title>
    <link href="/YYang.github.io/2024/07/25/Work%20No.4/"/>
    <url>/YYang.github.io/2024/07/25/Work%20No.4/</url>
    
    <content type="html"><![CDATA[<h1 id="Gcode学习"><a href="#Gcode学习" class="headerlink" title="Gcode学习"></a>Gcode学习</h1><h3 id="一、3D打印机编程"><a href="#一、3D打印机编程" class="headerlink" title="一、3D打印机编程"></a>一、3D打印机编程</h3><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><a href="https://www.klipper3d.org/zh/Overview.html"><a href="https://www.klipper3d.org/zh/G-Codes.html">G-Codes - Klipper 文档 (klipper3d.org)</a></a></p><p><a href="https://reprap.org/wiki/G-code">G-code - RepRap</a></p><p><a href="https://blog.csdn.net/acktomas/article/details/125552309">3D 打印机 G 代码命令：完整列表和教程_3d打印机g代码-CSDN博客</a></p><p><a href="https://blog.csdn.net/qlexcel/article/details/103466638">3D打印机DIY之六——G代码命令_g代码m300-CSDN博客</a></p><h3 id="G指令"><a href="#G指令" class="headerlink" title="G指令"></a>G指令</h3><h4 id="G0-G1-直线移动"><a href="#G0-G1-直线移动" class="headerlink" title="G0&#x2F;G1: 直线移动"></a>G0&#x2F;G1: 直线移动</h4><p>G0和G1命令完全等价，作用就是让喷头线性移动到一个特定的位置，使用时，不需要所有的参数全部存在，但至少要有一个参数。</p><p>G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn &#x2F; G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn</p><p>Xnnn表示X轴的移动位置；</p><p>Ynnn表示Y轴的移动位置；</p><p>Znnn表示Z轴的移动位置；</p><p>Ennn表示E轴（挤出头步进电机）的移动位置；</p><p>Fnnn表示移动速度，单位是毫米&#x2F;每分钟；</p><p>Snnn表示是否检查限位开关，S0不检查，S1检查，缺省值是S0；</p><h4 id="G28：复位"><a href="#G28：复位" class="headerlink" title="G28：复位"></a>G28：复位</h4><p>打印机复位命令。执行时会让3个轴依次往限位开关的方向运行，碰到限位开关后还会减速做一次1mm左右的往返运动，来保证复位的准确性。如果在命令后面加上坐标值，则只会复位坐标值对应的坐标轴。（坐标值的数字会被忽略）</p><p>G28 X0 Y72.3</p><p>只会复位x轴和y轴。</p><h4 id="G29：Z轴高度三点测试"><a href="#G29：Z轴高度三点测试" class="headerlink" title="G29：Z轴高度三点测试"></a>G29：Z轴高度三点测试</h4><p>这条命令会测试打印平面上三个点的Z轴高度，并在串口上输出结果。参数为Snnn，表示对测试结果的处理方式。S1表示更新内存中的Z轴高度值（重置系统会丢失），S2表示更新内存以及EEPROM中的Z轴高度值（重置系统不会丢失）。</p><p>一般来说，只有使用高位限位开关（也就是说，Z轴的限位开关位于Z轴坐标最大处），且在挤出头上附带有Z轴高度测试微动开关的机型，适合使用G29命令测试Z轴高度。其他机械配置的机型，不适合使用G29命令。G29命令由固件配置</p><h4 id="G30：Z轴高度单点测试（单步）"><a href="#G30：Z轴高度单点测试（单步）" class="headerlink" title="G30：Z轴高度单点测试（单步）"></a>G30：Z轴高度单点测试（单步）</h4><p>这条命令作为一个完整Z轴高度测试过程的一步，测试打印平面上一个点的Z轴高度，并在串口上输出结果。这个完整的Z轴高度测试过程，通常是由3D打印机控制软件连续发出的，通过参数控制G30的执行状态。因此在手动工作方式下，G30命令只适合不带参数运行</p><h4 id="G31：输出Z轴高度测试微动开关状态"><a href="#G31：输出Z轴高度测试微动开关状态" class="headerlink" title="G31：输出Z轴高度测试微动开关状态"></a>G31：输出Z轴高度测试微动开关状态</h4><p>执行后会输出当前Z轴高度测试微动开关的当前状态，其中L表示微动开关没有触发。如果是处于触发状态，这里会输出H。</p><p>G29命令、G30命令、G31命令只进行Z轴的高度测试，并不进行自动调平。</p><h4 id="G32：热床自动调平"><a href="#G32：热床自动调平" class="headerlink" title="G32：热床自动调平"></a>G32：热床自动调平</h4><p>这条命令在G29命令的基础上，不仅测试打印平面上三个点的Z轴高度，而且还会根据测试的结果，对3D打印机的机械参数进行调整，实现热床自动调平。G32命令使用的参数与G29命令是一致的：Snnn，表示测试结果的处理方式。S1表示更新内存中的相关参数值（重置系统会丢失），S2表示更新内存以及EEPROM中的相关参数值（重置系统不会丢失）。</p><p>G32命令执行完成时，不仅Z轴高度参数发生了改变，而且还会根据3D打印机的硬件配置，对热床进行相应的调平处理。</p><p>G32命令会在3D打印机内存中构建一个转换矩阵（Transformation matrix），让未来3D打印机所处理的所有三维空间位置，都先经过这个矩阵的变换，保证在Z&#x3D;0的情况下，正好与热床平面完全吻合</p><h4 id="G4-暂停移动"><a href="#G4-暂停移动" class="headerlink" title="G4: 暂停移动"></a>G4: 暂停移动</h4><p>让喷头在当前位置停留一段时间。参数可以为：G4 Pnnn或G4 Snnn。Pnnn表示以毫秒为单位，Snnn表示以秒为单位。</p><p>G4 P2000与G4 S2完全等价，都表示停顿2秒。</p><p>在停顿过程中机器仍可以被控制，如挤出头温度。</p><h4 id="G20-使用英寸作为单位"><a href="#G20-使用英寸作为单位" class="headerlink" title="G20:使用英寸作为单位"></a>G20:使用英寸作为单位</h4><p>执行这条命令后，后面的命令都以英寸作为单位。</p><h4 id="G21-使用毫米作为单位"><a href="#G21-使用毫米作为单位" class="headerlink" title="G21: 使用毫米作为单位"></a>G21: 使用毫米作为单位</h4><p>执行这条命令后，后面的命令都以毫米作为单位。</p><h4 id="G90-G91：设置坐标模式"><a href="#G90-G91：设置坐标模式" class="headerlink" title="G90&#x2F;G91：设置坐标模式"></a>G90&#x2F;G91：设置坐标模式</h4><p>这两条命令用于设置当前坐标模式为绝对坐标模式(G90)或者相对坐标模式(G91)。没有参数。未设置时缺省值是绝对坐标模式</p><h4 id="G92-设置当前位置为某个坐标值"><a href="#G92-设置当前位置为某个坐标值" class="headerlink" title="G92:设置当前位置为某个坐标值"></a>G92:设置当前位置为某个坐标值</h4><p>把当前位置设定为某个坐标值，可以用来设置零点，如果参数为空表示把当前位置设置为所有轴的的零点。</p><p>如：G92 X10 E90    ;表示把当前位置设置为x&#x3D;10，喷头坐标&#x3D;90</p><p>再如：G92 E0       ；表示把当前喷头坐标设置为0</p><h4 id="G94-G95-进给速率单位"><a href="#G94-G95-进给速率单位" class="headerlink" title="G94&#x2F;G95:进给速率单位"></a>G94&#x2F;G95:进给速率单位</h4><p>使用了G94指令之后，所有的进给都是以mm&#x2F;min为单位，即F100指刀具每分钟移动100毫米（默认的）</p><p>使用了G95指令之后，所有的进给都是以mm&#x2F;r为单位，即F100指主轴每转一转，刀具移动100毫米</p><h4 id="G17-G18-G19：选择加工平面"><a href="#G17-G18-G19：选择加工平面" class="headerlink" title="G17&#x2F;G18&#x2F;G19：选择加工平面"></a>G17&#x2F;G18&#x2F;G19：选择加工平面</h4><p>G17–XY平面；</p><p>G18–XZ平面；</p><p>G19–YZ平面；</p><h3 id="M指令"><a href="#M指令" class="headerlink" title="M指令"></a>M指令</h3><h4 id="M0-打印机停止"><a href="#M0-打印机停止" class="headerlink" title="M0:打印机停止"></a>M0:打印机停止</h4><p>打印机会终止任何动作，然后关机。所有的电机和加热器都会被关掉，这个时候只能通过reset按钮来重启控制器。</p><h4 id="M1-打印机休眠"><a href="#M1-打印机休眠" class="headerlink" title="M1: 打印机休眠"></a>M1: 打印机休眠</h4><p>打印机会终止任何动作，然后休眠。所有的马达和加热器都会被关掉，但是接收到G或M命令时，打印机可以被唤醒并进入工作状态。</p><h4 id="M17-启动所有步进电机"><a href="#M17-启动所有步进电机" class="headerlink" title="M17:启动所有步进电机"></a>M17:启动所有步进电机</h4><h4 id="M18-关闭所有步进电机"><a href="#M18-关闭所有步进电机" class="headerlink" title="M18:关闭所有步进电机"></a>M18:关闭所有步进电机</h4><h4 id="M20-读取SD卡根目录中的文件"><a href="#M20-读取SD卡根目录中的文件" class="headerlink" title="M20:读取SD卡根目录中的文件"></a>M20:读取SD卡根目录中的文件</h4><p>读取SD卡根目录的文件，并通过串口输出文件名。</p><h4 id="M21-初始化SD卡"><a href="#M21-初始化SD卡" class="headerlink" title="M21:初始化SD卡"></a>M21:初始化SD卡</h4><p>初始化SD卡。如果在机器通电时插入SD卡，会默认初始化SD卡。开始其他SD卡功能时，SD卡一定要先初始化。本命令相当于文件系统中执行Mount动作。</p><h4 id="M22-卸载SD卡"><a href="#M22-卸载SD卡" class="headerlink" title="M22:卸载SD卡"></a>M22:卸载SD卡</h4><p>卸载SD卡，也就是执行Unmount动作。没有相关的参数。</p><h4 id="M23-选择SD卡中的文件"><a href="#M23-选择SD卡中的文件" class="headerlink" title="M23:选择SD卡中的文件"></a>M23:选择SD卡中的文件</h4><p>选择一个SD卡上的文件。文件选择之后，可以执行打印、删除等动作。</p><p>如：M23 filename.gcode   ;选中filename.gcode文件</p><h4 id="M24-开始打印SD卡中选中的文件"><a href="#M24-开始打印SD卡中选中的文件" class="headerlink" title="M24:开始打印SD卡中选中的文件"></a>M24:开始打印SD卡中选中的文件</h4><p>开始打印通过M23命令选中的文件。</p><h4 id="M25-暂停SD卡打印"><a href="#M25-暂停SD卡打印" class="headerlink" title="M25:暂停SD卡打印"></a>M25:暂停SD卡打印</h4><p>暂停打印通过M23命令选定的文件。</p><h4 id="M27-报告SD卡打印进度"><a href="#M27-报告SD卡打印进度" class="headerlink" title="M27:报告SD卡打印进度"></a>M27:报告SD卡打印进度</h4><p>获取SD卡打印进度。没有相关参数。</p><p>M27命令的输出，格式为：SD printing byte 11518&#x2F;1127578</p><p>这条命令供上位机获取当前的3D打印进度信息，用于显示在电脑界面上。</p><h4 id="M28-开始往SD卡文件中写入数据"><a href="#M28-开始往SD卡文件中写入数据" class="headerlink" title="M28:开始往SD卡文件中写入数据"></a>M28:开始往SD卡文件中写入数据</h4><p>接收到此命令后，后续接收到的命令（除了M29）都会被当成数据写入该文件。</p><p>命令后面会跟着文件名，如果文件不存在则会被创建，如果存在则会被覆盖。接收到这条命令后，后续接收到的命令都会被写入该文件中，直到接收到M29命令。如：M28 filename.gcode  </p><h4 id="M29-停止往SD卡文件中写入数据"><a href="#M29-停止往SD卡文件中写入数据" class="headerlink" title="M29:停止往SD卡文件中写入数据"></a>M29:停止往SD卡文件中写入数据</h4><p>接收到此命令后，后续接收到的命令要开始正常执行。</p><h4 id="M30-删除SD卡中的文件"><a href="#M30-删除SD卡中的文件" class="headerlink" title="M30:删除SD卡中的文件"></a>M30:删除SD卡中的文件</h4><p>如：M30 filename.gcode     ;删除filename.gcode文件</p><h4 id="M32：创建子目录"><a href="#M32：创建子目录" class="headerlink" title="M32：创建子目录"></a>M32：创建子目录</h4><p>在SD卡上创建一个子目录。参数为：filename，表示待创建的子目录（包含目录名，以&#x2F;分隔）；</p><h4 id="M82-M83：设置挤出头步进电机坐标模式"><a href="#M82-M83：设置挤出头步进电机坐标模式" class="headerlink" title="M82&#x2F;M83：设置挤出头步进电机坐标模式"></a>M82&#x2F;M83：设置挤出头步进电机坐标模式</h4><p>与G90&#x2F;G91命令类似，这两条命令用于设置挤出头当前坐标模式为绝对坐标模式(M82)或者相对坐标模式(M83)。没有参数。未设置时缺省值是绝对坐标模式。需要注意的是，G90&#x2F;G91设置的坐标模式，同时对XYZE四个轴起作用，但M82&#x2F;M83设置的坐标模式，只对E轴（挤出头步进电机）起作用。</p><h4 id="M84：设置步进电机自动关闭时间"><a href="#M84：设置步进电机自动关闭时间" class="headerlink" title="M84：设置步进电机自动关闭时间"></a>M84：设置步进电机自动关闭时间</h4><p>当3D打印机一段时间没有接收到步进电机运动指令之后，3D打印机（为了节能）会自动关闭步进电机。使用M84指令，可以设置这个自动关闭步进电机的时间。</p><p>Snnn，表示步进电机关闭的时间，以秒为单位。</p><p>如果使用M85时没有指定S参数，或者使用了S0参数，则代表取消3D打印机自动关闭功能，挤出头、热床等在工作完成之后，一直会处于当前状态，而不会被自动关闭。</p><h4 id="M73：获取当前打印进度"><a href="#M73：获取当前打印进度" class="headerlink" title="M73：获取当前打印进度"></a>M73：获取当前打印进度</h4><p>告诉固件当前的构建进度百分比。预计这台机器会在显示屏上显示出来。如果百分比恰好为0，则向主机发送“构建开始”通知。如果百分比恰好为100，则向主机发送“构建结束”通知。</p><h4 id="M105-获取当前温度（单位：℃）"><a href="#M105-获取当前温度（单位：℃）" class="headerlink" title="M105: 获取当前温度（单位：℃）"></a>M105: 获取当前温度（单位：℃）</h4><p>获取当前温度值，包括挤出头和热床的温度。</p><p>X，表示输出ADC测量的原始值；</p><p>M105命令的输出，格式为：T:18.97 &#x2F;0 B:18.75 &#x2F;0 B@:0 @:0</p><p>T:之后的部分，代表挤出头的当前温度&#x2F;目标温度；</p><p>B:之后的部分代表热床的当前温度&#x2F;目标温度。</p><p>在PID温度控制模式下，B@:后面的数字代表热床当前的输出强度，是一个0<del>255的值，@:后面的数字，代表挤出头当前的输出强度，也是一个0</del>255的值。例子中，挤出头、热床都处于关闭状态，所以这个位置的值都是0。</p><h4 id="M104-设置挤出机（喷头）温度"><a href="#M104-设置挤出机（喷头）温度" class="headerlink" title="M104:设置挤出机（喷头）温度"></a>M104:设置挤出机（喷头）温度</h4><p>设置挤出头的目标温度。执行这条命令后，不需要等待达到这个温度，控制板继续执行下一条G-code语句。</p><p>Snnn，表示目标温度；</p><p>Tnnn，表示对应的挤出头；</p><p>P，表示要等待前面的指令完成之后，再开始设置挤出头温度；</p><p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。F1表示要触发；</p><p>如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。</p><p>如：M104 S190         ;将挤出机的温度设置为190度 </p><h4 id="M106-打开风扇"><a href="#M106-打开风扇" class="headerlink" title="M106: 打开风扇"></a>M106: 打开风扇</h4><p>如：M106 S127    ;打开风扇（半速）。</p><p>‘S’表示 PWM值 (0-255). 可简单理解为：风扇有0-255级强度可选，其中 M106 S0 意味着风扇将被关掉。</p><p>P表示风扇的数目，P0是第一个风扇，P1是第二个风扇</p><h4 id="M109-等待挤出头加热达到目标温度"><a href="#M109-等待挤出头加热达到目标温度" class="headerlink" title="M109: 等待挤出头加热达到目标温度"></a>M109: 等待挤出头加热达到目标温度</h4><p>设置挤出头的目标温度，并等待达到这个温度。</p><p>Snnn，表示目标温度；</p><p>Tnnn，表示对应的挤出头；</p><p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。</p><p>F1表示要触发；</p><p>如果执行命令时没有带T参数，则针对当前挤出头设置目标温度。如： M109 S185      ;等待挤出头加热到185度</p><h4 id="M114-获取挤出头当前位置"><a href="#M114-获取挤出头当前位置" class="headerlink" title="M114: 获取挤出头当前位置"></a>M114: 获取挤出头当前位置</h4><p>输出挤出头当前位置。没有相关的参数。</p><p>M114命令的输出，格式为：</p><p>M114 X:20.00 Y:30.00 Z:10.000 E:0.0000</p><h4 id="M115-获取3D打印机信息"><a href="#M115-获取3D打印机信息" class="headerlink" title="M115: 获取3D打印机信息"></a>M115: 获取3D打印机信息</h4><p>输出3D打印机信息。没有相关的参数。</p><p>M115命令的输出，格式为：FIRMWARE_NAME:Repetier_0.92.3FIRMWARE_URL:…Printedfilament:0.00mPrintingtime:0days0hours0minSpeedMultiply:100FlowMultiply:100</p><p>第一行是固件的版本信息，很长，没有列完整。第二行是已经打印了多少米耗材，打印时间是几天几小时几分钟。第三行是速度系数，参考M220命令。第四行是流率系数，参考M221命令。</p><h4 id="M140-设置热床目标温度"><a href="#M140-设置热床目标温度" class="headerlink" title="M140 设置热床目标温度"></a>M140 设置热床目标温度</h4><p>设置热床的目标温度。执行这条命令后，不需要等待达到这个温度，立即开始执行下一条G-code语句。</p><p>Snnn表示目标温度；</p><p>Fnnn表示到达目标温度之后，是否触发蜂鸣器。</p><p>F1表示要触发；</p><h4 id="M141-设置构建平台的温度"><a href="#M141-设置构建平台的温度" class="headerlink" title="M141:设置构建平台的温度"></a>M141:设置构建平台的温度</h4><p>可能用于特定的温控策略或多热床系统</p><p>M141 S60将加热床设置为60摄氏度</p><h4 id="M190-等待热床加热达到目标温度"><a href="#M190-等待热床加热达到目标温度" class="headerlink" title="M190: 等待热床加热达到目标温度"></a>M190: 等待热床加热达到目标温度</h4><p>设置热床的目标温度，并等待达到这个温度。</p><p>Snnn，表示目标温度；</p><p>Fnnn，表示到达目标温度之后，是否触发蜂鸣器。</p><p>F1表示要触发；</p><h4 id="M204：设置PID参数"><a href="#M204：设置PID参数" class="headerlink" title="M204：设置PID参数"></a>M204：设置PID参数</h4><p>设置挤出头温度控制的PID参数，</p><p>Snnn表示对应的挤出头，无S参数表示使用当前挤出头；</p><p>Xnnn表示P参数；</p><p>Ynnn表示I参数；</p><p>Znnn表示D参数；</p><h4 id="M220：设置速度"><a href="#M220：设置速度" class="headerlink" title="M220：设置速度"></a>M220：设置速度</h4><p>设置3D打印机运行速度系数。</p><p>命令参数为Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；</p><p>3D打印机运行速度系数，是一个在25%到500%范围内变化的值。这个系数值在3D打印机运行过程中，与切片器给出的3D打印机运动速度基础值相乘，得到最终的3D打印机实际运动速度值。</p><p>M220命令的输出，格式为：SpeedMultiply:100</p><h4 id="M221：设置流率"><a href="#M221：设置流率" class="headerlink" title="M221：设置流率"></a>M221：设置流率</h4><p>设置3D打印机的流率系数（Flow rate）。</p><p>命令参数为：Snnn表示系数，是一个百分数，如果S参数不存在，则使用缺省值100；</p><p>3D打印机流率系数，是在上位机切片软件通过耗材直径、喷头直径、层高以及3D打印速度等因素综合计算得到的E轴运动速度的基础上，叠加的一个E轴运动速度系数。简单地说，就是控制挤出头耗材挤出量的多少。这个系数可以在25%到500%范围内变化。</p><p>M221命令的输出，格式为：FlowMultiply:100</p><h3 id="T指令"><a href="#T指令" class="headerlink" title="T指令"></a>T指令</h3><h4 id="T0-T1-T2-T3-命令，选择不同的工具或挤出机"><a href="#T0-T1-T2-T3-命令，选择不同的工具或挤出机" class="headerlink" title="T0&#x2F;T1&#x2F;T2&#x2F;T3 命令，选择不同的工具或挤出机"></a>T0&#x2F;T1&#x2F;T2&#x2F;T3 命令，选择不同的工具或挤出机</h4><p>T0 选择第一个挤出机；T1 选择第二个挤出机；T2 选择第三个挤出机；T3 选择第四个挤出机</p><h4 id="节选注释"><a href="#节选注释" class="headerlink" title="节选注释"></a>节选注释</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dns">M106 P2 S204    //打开第三个风扇，PWM值为<span class="hljs-number">204</span><br><span class="hljs-comment">;LAYER_CHANGE</span><br><span class="hljs-comment">;Z:16.8</span><br><span class="hljs-comment">;HEIGHT:0.199999</span><br><span class="hljs-comment">;BEFORE_LAYER_CHANGE</span><br><span class="hljs-comment">;16.8</span><br>G92 E0    //设置喷头当前位置为零点<br>M106 P2 S0    //关闭第二个风扇<br><br>G1 E-.<span class="hljs-number">35</span> F2400  //挤出机回抽挤出<span class="hljs-number">0</span>.<span class="hljs-number">35m</span>m，速度设置为<span class="hljs-number">2400m</span>m/min<br><span class="hljs-comment">;WIPE_START</span><br>G1 F<span class="hljs-number">9473.877</span>    //速度设置为<span class="hljs-number">9473</span>.<span class="hljs-number">877m</span>m/min<br>G1 X<span class="hljs-number">320.911</span> Y<span class="hljs-number">304.914</span> E-.<span class="hljs-number">11658</span>    //直线插补，移动到（<span class="hljs-number">320.911</span>，<span class="hljs-number">304.914</span>）位置，并回抽<span class="hljs-number">0.11658</span><br>G1 X<span class="hljs-number">321.066</span> Y<span class="hljs-number">304.753</span> E-.<span class="hljs-number">03342</span>    //直线插补，移动到（<span class="hljs-number">321.066</span>，<span class="hljs-number">304.753</span>）位置，并回抽<span class="hljs-number">0.03342</span><br><span class="hljs-comment">;WIPE_END</span><br>EXCLUDE_OBJECT_END NAME=ksr_fdmtest_w4.stl_id_0_copy_0<br><span class="hljs-comment">;_SET_FAN_SPEED_CHANGING_LAYER</span><br>EXCLUDE_OBJECT_START NAME=ksr_fdmtest_w4.stl_id_0_copy_0<br>G17    //选择XY平面<br>G3 Z17 I.<span class="hljs-number">035</span> J-<span class="hljs-number">1</span>.<span class="hljs-number">216</span> P1  F30000    //圆弧插补，Z轴位置为<span class="hljs-number">17m</span>m，圆心坐标为（<span class="hljs-number">321.066</span>+<span class="hljs-number">0</span>.<span class="hljs-number">035，304</span>.<span class="hljs-number">753-1.216</span>）,P1表示为顺时针，速度为<span class="hljs-number">30000m</span>m/min<br>G1 X43.<span class="hljs-number">587</span> Y<span class="hljs-number">296.746</span> Z17    //直线插补，移动到（<span class="hljs-number">321.066</span>，<span class="hljs-number">304.753</span>，<span class="hljs-number">17</span>）位置<br>G1 Z16.<span class="hljs-number">8</span>    //直线插补，移动到（<span class="hljs-number">321.066</span>，<span class="hljs-number">304.753</span>，<span class="hljs-number">16</span>.<span class="hljs-number">8</span>）位置<br>G1 E.<span class="hljs-number">5</span> F2400    //挤出机挤出<span class="hljs-number">0</span>.<span class="hljs-number">5m</span>m，速度设置为<span class="hljs-number">2400m</span>m/min<br></code></pre></td></tr></table></figure><h3 id="二、CNC数控编程"><a href="#二、CNC数控编程" class="headerlink" title="二、CNC数控编程"></a>二、CNC数控编程</h3><h4 id="学习资料-1"><a href="#学习资料-1" class="headerlink" title="学习资料"></a>学习资料</h4><p><a href="http://blog.hubwiz.com/2021/06/26/g-code-tutorial/">数控机床编程入门【G-code】 | 学习软件编程 (hubwiz.com)</a></p><h4 id="G00–快速定位"><a href="#G00–快速定位" class="headerlink" title="G00–快速定位"></a>G00–快速定位</h4><p>G00命令以最大速度将机器从当前位置移动到指定的坐标。机器将同时移动所有轴，以便同时完成行程。 结果是直线移动到新的位置点。</p><h4 id="G01–线性插值"><a href="#G01–线性插值" class="headerlink" title="G01–线性插值"></a>G01–线性插值</h4><p>G01 命令指示机器以设定速度直线移动。我们用X、Y和Z值指定最终位置，用F值指定速度。 CNC控制器计算（插值）要经过的中间点的坐标，以获得直线。</p><h4 id="G02–顺时针环形插值"><a href="#G02–顺时针环形插值" class="headerlink" title="G02–顺时针环形插值"></a>G02–顺时针环形插值</h4><p>G02命令要求机器以圆形模式顺时针移动。它与 G01 命令的概念相同，在执行适当的加工过程时使用。除了 终点参数，在这里我们还需要定义旋转中心，或弧线起点与弧线中心点的距离。起点实际上是上一个命令的 终点或当前点。</p><h4 id="G03–逆时针环形插值"><a href="#G03–逆时针环形插值" class="headerlink" title="G03–逆时针环形插值"></a>G03–逆时针环形插值</h4><p>与 G02 一样，G03 命令指示机器以圆形模式移动，区别在于G03是逆时针运动。所有其他功能和规则与 G02 命令相同。</p><h4 id="G20-G21-–-单位选择"><a href="#G20-G21-–-单位选择" class="headerlink" title="G20&#x2F;G21 – 单位选择"></a>G20&#x2F;G21 – 单位选择</h4><p>G20 和 G21 命令定义 G-code单位，英寸或毫米。G20 &#x3D; 英寸；G21 &#x3D; 毫米</p><h4 id="G17-G18-G18-–-工作面选择"><a href="#G17-G18-G18-–-工作面选择" class="headerlink" title="G17&#x2F;G18&#x2F;G18 – 工作面选择"></a>G17&#x2F;G18&#x2F;G18 – 工作面选择</h4><p>G17–XY平面；G18–XZ平面；G19–YZ平面</p><h4 id="G28–返回home"><a href="#G28–返回home" class="headerlink" title="G28–返回home"></a>G28–返回home</h4><p>G28命令要求机器将移动到其参考点或home位置。为了避免碰撞，我们可以包括一个带有 X、Y 和 Z 参数的 中间点。该工具将在转到参考点之前通过该点。</p><h4 id="G90-G91-–-定位模式"><a href="#G90-G91-–-定位模式" class="headerlink" title="G90&#x2F;G91 – 定位模式"></a>G90&#x2F;G91 – 定位模式</h4><p>使用 G90 和 G91 命令，我们告诉机器如何解析坐标值。G90为绝对模式，G91为相对模式。</p><h4 id="其他代码"><a href="#其他代码" class="headerlink" title="其他代码"></a>其他代码</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>M00–程序停止<br><span class="hljs-bullet">- </span>M02–程序结束<br><span class="hljs-bullet">- </span>M03–主轴打开–顺时针<br><span class="hljs-bullet">- </span>M04–主轴打开–逆时针<br><span class="hljs-bullet">- </span>M05–主轴停止<br><span class="hljs-bullet">- </span>M06–工具更改<br><span class="hljs-bullet">- </span>M08–启用Flood Colant<br><span class="hljs-bullet">- </span>M09–禁用Flood Colant<br><span class="hljs-bullet">- </span>M30 – 程序结束<br><span class="hljs-bullet">- </span>M104–启动挤出加热<br><span class="hljs-bullet">- </span>M109–等到挤出器到达T0<br><span class="hljs-bullet">- </span>M140–开始底板加热<br><span class="hljs-bullet">- </span>M190–等到底板到达T0<br><span class="hljs-bullet">- </span>M106–设置风扇速度<br></code></pre></td></tr></table></figure><h4 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arcade">%<br>G21 G17 G90 F100                     <span class="hljs-comment">//G21单位选择毫米，G17选择XY平面，G90选择绝对模式，F100代表转速</span><br>M03 S1000                            <span class="hljs-comment">//主轴打开-顺时针，速度为1000转</span><br>G00 X5 Y5                 ; <span class="hljs-built_in">point</span> B  <span class="hljs-comment">//快速移动到（5，5）</span><br>G01 X5 Y5 Z<span class="hljs-number">-1</span>             ; <span class="hljs-built_in">point</span> B  <span class="hljs-comment">//直线插补移动到（5，5，-1）</span><br>G01 X5 Y15 Z<span class="hljs-number">-1</span>            ; <span class="hljs-built_in">point</span> C  <span class="hljs-comment">//直线插补移动到（5，15，-1）</span><br>G02 X9 Y19 Z<span class="hljs-number">-1</span> I4 J0      ; <span class="hljs-built_in">point</span> D  <span class="hljs-comment">//顺时针环形插补移动到（9，19，-1），圆心为（9，15）</span><br>G01 X23 Y19 Z<span class="hljs-number">-1</span>           ; <span class="hljs-built_in">point</span> E  <span class="hljs-comment">//直线插补移动到（23，19，-1）</span><br>G01 X32 Y5 Z<span class="hljs-number">-1</span>            ; <span class="hljs-built_in">point</span> F  <span class="hljs-comment">//直线插补移动到（32，5，-1）</span><br>G01 X21 Y5 Z<span class="hljs-number">-1</span>            ; <span class="hljs-built_in">point</span> G  <span class="hljs-comment">//直线插补移动到（21，5，-1）</span><br>G01 X21 Y8 Z<span class="hljs-number">-1</span>            ; <span class="hljs-built_in">point</span> H  <span class="hljs-comment">//直线插补移动到（21，8，-1）</span><br>G03 X19 Y10 Z<span class="hljs-number">-1</span> I<span class="hljs-number">-2</span> J0    ; <span class="hljs-built_in">point</span> I  <span class="hljs-comment">//逆时针环形插补移动到（19，10，-1），圆心为（19，8）</span><br>G01 X13 Y10 Z<span class="hljs-number">-1</span>           ; <span class="hljs-built_in">point</span> J  <span class="hljs-comment">//直线插补移动到（13，10，-1）</span><br>G03 X11 Y8 Z<span class="hljs-number">-1</span> I0 J<span class="hljs-number">-2</span>     ; <span class="hljs-built_in">point</span> K  <span class="hljs-comment">//逆时针环形插补移动到（11，8，-1），圆心为（13，8）</span><br>G01 X11 Y5 Z<span class="hljs-number">-1</span>            ; <span class="hljs-built_in">point</span> L  <span class="hljs-comment">//直线插补移动到（11，5，-1）</span><br>G01 X5 Y5 Z<span class="hljs-number">-1</span>             ; <span class="hljs-built_in">point</span> B  <span class="hljs-comment">//直线插补移动到（5，5，-1）</span><br>G01 X5 Y5 Z0                         <span class="hljs-comment">//直线插补移动到（5，5，0）</span><br>G28  X0 Y0                           <span class="hljs-comment">//返回零点（0，0，0）</span><br>M05                                  <span class="hljs-comment">//关闭主轴</span><br>M30                                  <span class="hljs-comment">//程序结束</span><br>%<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>3D打印机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux环境安装和配置</title>
    <link href="/YYang.github.io/2024/07/25/Work%20No.1/"/>
    <url>/YYang.github.io/2024/07/25/Work%20No.1/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux环境安装和配置"><a href="#Linux环境安装和配置" class="headerlink" title="Linux环境安装和配置"></a>Linux环境安装和配置</h1><h2 id="一、安装VMware（16-17）"><a href="#一、安装VMware（16-17）" class="headerlink" title="一、安装VMware（16&#x2F;17）"></a>一、安装VMware（16&#x2F;17）</h2><p>安装版本：VMware® Workstation 16 Pro</p><p>安装保姆链接：<a href="https://blog.csdn.net/weixin_74195551/article/details/127288338">安装虚拟机（VMware）保姆级教程（附安装包）_vmware虚拟机-CSDN博客</a></p><p>破解链接：<a href="https://www.52pojie.cn/thread-1804571-1-1.html">VMware Workstation虚拟机合集+激活密钥_Win+Linux_10∕11∕12∕14∕15∕16∕17 - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>破解码：ZF3R0-FHED2-M80TY-8QYGC-NPKYF</p><p>MobaXtem链接：<a href="https://blog.csdn.net/qq_42578036/article/details/107710339">VMware虚拟机配置、连接MobaXterm_mobaxtem怎么连接虚拟机-CSDN博客</a></p><p>终极链接：<a href="https://blog.csdn.net/lhl_blog/article/details/123406322">保姆级教程|VMware安装Ubuntu20.04(系统安装+网络配置+open-vm-tools安装+国内软件源更新)-CSDN博客</a></p><p>报错：</p><p>VMware Workstation 无法连接到虚拟机</p><p>点开虚拟机“属性”，在“兼容性”里面设置为以管理员身份运行此程序。</p><p>VMware创建新的虚拟机，弹出“您已输入用户名，客户机操作将保留此用户名”错误提示</p><p>【root】被系统占用了，让用户新建一个低权限的账户，修改用户名，不要再使用【root】，如：改为【user】或【your_name】</p><p>VMware Ubuntu ping 百度不通</p><p>选择 虚拟机-&gt;设置-&gt;网络适配器-&gt;自定义特定虚拟网络-&gt;选择VMnet1(桥接网络)-&gt;确定</p><p>目的是确定我们使用的是VMnet1(桥接网络)，之后就可以ping通</p><p>安装磁盘管理工具gparted并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install gparted<br><span class="hljs-built_in">sudo</span> gparted<br></code></pre></td></tr></table></figure><p>报错是权限不足,那么修改挂载点的权限即可(注:所谓”挂载”的概念体现的是Linux”一切皆文件”的思想,物理世界中的一块硬盘在Linux系统的逻辑中也被映射为一个文件)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -o remount -rw / <br><span class="hljs-built_in">sudo</span> mount -o remount -rw /var/snap/firefox/common/host-hunspell<br></code></pre></td></tr></table></figure><h2 id="二、安装Ubuntu（22-04）"><a href="#二、安装Ubuntu（22-04）" class="headerlink" title="二、安装Ubuntu（22.04）"></a>二、安装Ubuntu（22.04）</h2><p>安装版本：Linux Ubuntu22.04.4</p><p>安装保姆链接：<a href="https://blog.csdn.net/weixin_42640280/article/details/128351105">ubuntu 22.04下载安装_ubuntu22.04下载-CSDN博客</a></p><p>清华源：<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>步骤指令</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo su <span class="hljs-comment">//进入管理者模式</span><br><br>apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span> <span class="hljs-comment">//更新apt</span><br><br>apt-<span class="hljs-built_in">get</span> install net-tools <span class="hljs-comment">//安装ifconfig相关配件</span><br><br>apt-<span class="hljs-built_in">get</span> install openssh-server <span class="hljs-comment">//下载和安装ssh</span><br><br>service ssh restart <span class="hljs-comment">//启动ssh</span><br></code></pre></td></tr></table></figure><h2 id="三、安装应用依赖第三方库"><a href="#三、安装应用依赖第三方库" class="headerlink" title="三、安装应用依赖第三方库"></a>三、安装应用依赖第三方库</h2><p>将工程导入虚拟机中，tar -xvf 解压工程包</p><p>git clone 的所有包的位置可以随机放置，但是需要对每个包进行编译，编译参照readme文件或者网上查找，如果下载不下来，可以直接去官网直接下载zip格式，使用unzip xxx.zip进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install -y build-essential libsdl2-dev<br><br>git <span class="hljs-built_in">clone</span> http://172.23.88.26:3333/zhangyufeng/libcrlog.git  //按照readme文档可以编译<br><br><span class="hljs-built_in">sudo</span> apt-get install  libjson-c-dev<br><br>git <span class="hljs-built_in">clone</span> https://github.com/protocolbuffers/protobuf.git<br>//没安装成功，bash: ./autogen.sh: No such file or directory<br>//在晚上的时候安装成功了，原因是高版本的缺失了./autogen.sh脚本，进行降版本就可以了，花费4小时<br>//终极感谢博主：https://blog.csdn.net/jax_fanyang/article/details/135937002<br><br>    1.11 点击链接下载3.21.12版本源码。https://github.com/protocolbuffers/protobuf/releases/tag/v2<br>    1.12 <span class="hljs-built_in">cd</span> protobuf-21.12/<br>    1.13 ./autogen.sh<br>    1.14 ./configure --prefix=/usr/local/protobuf<br>    1.15 make<br>    1.16 <span class="hljs-built_in">sudo</span> make install<br>    1.17 <span class="hljs-built_in">sudo</span> vim /etc/profile<br>    1.18 <span class="hljs-comment">#添加以下内容：</span><br><br>    <span class="hljs-comment">#(动态库搜索路径) 程序加载运⾏期间查找动态链接库时指定除了系统默认路径之外的其他路径</span><br>    <span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$LD_LIBRARY_PATH</span>:/usr/local/protobuf/lib/<br>    <span class="hljs-comment">#(静态库搜索路径) 程序编译期间查找动态链接库时指定查找共享库的路径</span><br>    <span class="hljs-built_in">export</span> LIBRARY_PATH=<span class="hljs-variable">$LIBRARY_PATH</span>:/usr/local/protobuf/lib/<br>    <span class="hljs-comment">#执⾏程序搜索路径</span><br>    <span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/protobuf/bin/<br>    <span class="hljs-comment">#c程序头⽂件搜索路径</span><br>    <span class="hljs-built_in">export</span> C_INCLUDE_PATH=<span class="hljs-variable">$C_INCLUDE_PATH</span>:/usr/local/protobuf/include/<br>    <span class="hljs-comment">#c++程序头⽂件搜索路径</span><br>    <span class="hljs-built_in">export</span> CPLUS_INCLUDE_PATH=<span class="hljs-variable">$CPLUS_INCLUDE_PATH</span>:/usr/local/protobuf/include/<br>    <span class="hljs-comment">#pkg-config 路径</span><br>    <span class="hljs-built_in">export</span> PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/<br>    1.18 <span class="hljs-built_in">source</span> /etc/profile<br>    1.19  protoc --version <br>    执行之后应该看到==libprotoc 3.21.12==如果出现这个版本信息则安装成功<br>    <br>git <span class="hljs-built_in">clone</span> https://github.com/protobuf-c/protobuf-c  //按照readme文档可以编译<br><br>git <span class="hljs-built_in">clone</span> https://github.com/eclipse/paho.mqtt.c.git<br><br>bash<br>    <span class="hljs-built_in">cd</span> paho.mqtt.c<br>    <span class="hljs-built_in">mkdir</span> build &amp;&amp; <span class="hljs-built_in">cd</span> build<br>    cmake ..<br>    make<br>    <span class="hljs-built_in">sudo</span> make install<br><br>git <span class="hljs-built_in">clone</span> https://github.com/eclipse/paho.mqtt.cpp.git（1.3.10）  //安装失败<br><br>git <span class="hljs-built_in">clone</span> https://github.com/aliyun/aliyun-oss-cpp-sdk.git<br><br>    <span class="hljs-built_in">cd</span> &lt;path/to/aliyun-oss-cpp-sdk&gt;<br>    <span class="hljs-built_in">mkdir</span> build<br>    <span class="hljs-built_in">cd</span> build<br>    cmake ..<br>    <br>    <span class="hljs-built_in">sudo</span> apt-get install libcurl4-openssl-dev libssl-dev<br>    make<br><br>git <span class="hljs-built_in">clone</span> https://github.com/open-source-parsers/jsoncpp.git<br><br>    <span class="hljs-built_in">mkdir</span> -p build/debug<br>    <span class="hljs-built_in">cd</span> build/debug<br>    cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G <span class="hljs-string">&quot;Unix Makefiles&quot;</span> ../..<br>    make<br><br><span class="hljs-built_in">sudo</span> apt install libapr1-dev<br><br><span class="hljs-built_in">sudo</span> apt install libaprutil1-dev<br><br><span class="hljs-built_in">sudo</span> apt install libmxml-dev<br><br><span class="hljs-built_in">sudo</span> apt-get install uuid-dev <br><br>git <span class="hljs-built_in">clone</span> https://github.com/aliyun/aliyun-oss-c-sdk.git //好像安装有点问题<br><br>    ./configure<br>    make<br>    make install<br><br>https://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/102787/cn_zh/1558078831675/VodSDK-C_1.0.0.tar.gz?spm=a2c4g.11186623.0.0.65c71cd50vaal4&amp;file=VodSDK-C_1.0.0.tar.gz //不知道怎么安装<br><br>//找阿里云帮忙实现：[使用C/C++ SDK上传文件_视频点播(VOD)-阿里云帮助中心 (aliyun.com)](https://help.aliyun.com/zh/vod/developer-reference/upload-sdk-for-c-or-cpp?spm=a2c4g.11186623.0.0.61dd2c16XPqrTn#multiTask7060)<br><br>    cmake .<br>    make<br>    make install<br><br>git <span class="hljs-built_in">clone</span> https://github.com/ithewei/libhv<br><br>    <span class="hljs-built_in">mkdir</span> build<br>    <span class="hljs-built_in">cd</span> build<br>    cmake ..<br>    cmake --build .<br><br><span class="hljs-built_in">sudo</span> apt-get install libboost-all-dev<br><br>git <span class="hljs-built_in">clone</span> https://github.com/inotify-tools/inotify-tools.git//安装不知道成没成功<br><br><span class="hljs-built_in">sudo</span> apt-get install libfreeimage3 libfreeimage-dev<br><br>git <span class="hljs-built_in">clone</span> https://github.com/dpilger26/NumCpp.git<br><br><span class="hljs-built_in">sudo</span> apt-get install libavformat-dev<br><br><span class="hljs-built_in">sudo</span> apt-get install libswscale-dev<br></code></pre></td></tr></table></figure><h2 id="四、在PC上编译运行应用"><a href="#四、在PC上编译运行应用" class="headerlink" title="四、在PC上编译运行应用"></a>四、在PC上编译运行应用</h2><p>make 编译程序</p><p>make clean 清除编译</p><p>头文件所在位置：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/i</span>nclude/<br><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/include/</span><br><br>cp  -r <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/include/</span>vod_sdk<span class="hljs-regexp">/ /u</span>sr<span class="hljs-regexp">/include/</span>vod_sdk<span class="hljs-regexp">/  /</span><span class="hljs-regexp">/缺失upload.h头文件，将他进行复制到usr/i</span>nclude/文件夹当中<br><br>- 安装依赖<br>  sudo apt install libjson-c-dev<br><br>- 编译<br>  make<br><br>- 安装<br>  sudo make install<br><br>- 更新系统动态库<br>  sudo ldconfig<br></code></pre></td></tr></table></figure><p>运行项目</p><p>先获得虚拟设备参数，导入config中”&#x2F;home&#x2F;user&#x2F;creality&#x2F;userdata&#x2F;config&#x2F;“</p><p>开始编译主程序  make clean &amp;&amp; make -j4（j4、j8代表进程速度，越高越快）</p><p>获得各个文件的单独运行包，在vscode中运行.&#x2F;master-server，即可跑通实体机</p><p>linux中&#x2F;opt目录用来<strong>安装附加软件包</strong>，是用户级的程序目录，可以理解为D:&#x2F;Software。 安装到&#x2F;opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。 opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。</p><h2 id="五、交叉编译到目标板运行"><a href="#五、交叉编译到目标板运行" class="headerlink" title="五、交叉编译到目标板运行"></a>五、交叉编译到目标板运行</h2><p>交叉编译讲解：<a href="https://blog.csdn.net/lc315yuhuofei/article/details/103782049">交叉编译入门及必要配置方法总结_gcc-manifest.txt-CSDN博客</a></p><p>虚拟机交叉编译教程：<a href="https://www.cnblogs.com/zblblog/p/18136017">立创泰山派学习05-虚拟机ubuntu安装交叉编译工具 - zbl1118 - 博客园 (cnblogs.com)</a></p><h2 id="六、知识点总结"><a href="#六、知识点总结" class="headerlink" title="六、知识点总结"></a>六、知识点总结</h2><h4 id="1-交叉编译知识点"><a href="#1-交叉编译知识点" class="headerlink" title="1.交叉编译知识点"></a>1.交叉编译知识点</h4><p>交叉编译的目的是在一台架构A主机平台上编译另一种架构B目标平台的二进制文件或者库，交叉编译在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。 完整的Linux编译环境需要很多支持包，交叉编译使我们不需要花时间将各种支持包移植到目标板上</p><p>主机平台：PC端 Windows 10 专业工作站版</p><p>目标平台：Linux Ubuntu22.04.4&#x2F;VMware® Workstation 16 Pro</p><p>通常交叉编译工具链命名规则为：arch-core-kernel-system</p><p>arch：目标平台架构，如上文提到的arm，mips等；</p><p>core：有两种种情况，第一是CPU Core，如Cortex A8；第二是指定工具链的供应商。如果没有特殊指定，则留空不填。这一组命名比较灵活，有以厂家名称命名的，有以开发者命名的，也有以开发板命名的，或者直接是none或cross的；</p><p>kernel： 目标平台的OS，见过的有linux，uclinux，bare-metal（无OS）；</p><p>system：嵌入式应用二进制接口（Embedded Application Binary Interface），交叉编译工具链所选择的库函数和目标映像的规范，如gnu，gnueabi等。其中gnu等价于glibc+oabi；gnueabi等价于glibc+eabi。若不指定，则也可以留空不填；</p><p>上述命名规则并不是统一的规范，使用的时候作为参考就行。我使用的交叉编译工具链名称为：gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu。</p><p>获取交叉编译工具链两个途径：</p><p>直接下载知名厂家已经编译好的工具链。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.linaro.org<span class="hljs-regexp">/downloads/</span><br>http:<span class="hljs-regexp">//</span>ftp.arm.linux.org.uk<span class="hljs-regexp">/pub/</span>armlinux<span class="hljs-regexp">/toolchain/</span><br>http:<span class="hljs-regexp">//</span>www.denx.de<span class="hljs-regexp">/en/</span>Software/WebHome<br>https:<span class="hljs-regexp">//</span>launchpad.net/gcc-arm-embedded<br></code></pre></td></tr></table></figure><p>自己编译交叉编译工具链</p><p>编译交叉编译工具链的工具：crosstool-NG、Buildroot、Embedded Linux Development Kit (ELDK)</p><h4 id="2-Linux-系统编程知识点"><a href="#2-Linux-系统编程知识点" class="headerlink" title="2.Linux 系统编程知识点"></a>2.Linux 系统编程知识点</h4><p><a href="https://developer.aliyun.com/article/1457993">Linux 系统编程从入门到进阶 学习指南-阿里云开发者社区 (aliyun.com)</a></p><p>什么是库函数？</p><p>库函数是预编写的代码，存储在库文件中，供程序员使用。它们通过系统调用和操作系统的内核通信。例如，printf（） 是 C 语言的一个库函数，它内部使用 write（） 系统调用来和内核进行交互。</p><p><a href="https://www.cnblogs.com/realjimmy/p/12844359.html">Linux C函数库大全 - 一觉醒来写程序 - 博客园 (cnblogs.com)</a></p><p>参考手册：<a href="https://wizardforcel.gitbooks.io/linux-c-api-ref/content/index.html">介紹 | Linux C API 参考手册 (gitbooks.io)</a></p><p><strong>进程究竟是什么？</strong></p><p>每当你启动一个程序，Linux 系统都会创建一个新的进程。这个进程有它自己的内存地址、系统资源和状态。简而言之，进程是程序的一个运行实例。</p><p><strong>1.管道 （Pipe）</strong></p><p>管道是 Linux 中用于进程间通信的一种机制。它们分为两种类型：<strong>匿名管道</strong>和<strong>有名管道</strong>。</p><p><strong>2.信号 (Signals)</strong></p><p>在 Linux 中，信号是一种用于进程间通信（IPC）的机制，允许操作系统或一个进程向另一个进程发送简单的消息。信号主要用于传递关于系统事件的通知，例如中断请求、程序异常、或其他重要事件。每个信号代表了一个特定类型的事件，并且进程可以根据收到的信号执行相应的动作。</p><p>信号是异步的，意味着它们可以在任何时间点被发送到进程，通常与进程的正常控制流无关。信号的使用为进程提供了一种处理外部事件和错误的方式。</p><p><strong>3.文件(Files)</strong></p><p>文件在 Linux 系统中是一种基本的持久化存储机制，可用于<strong>进程间通信</strong>。多个进程可以通过对同一个文件的读取和写入来共享信息。</p><p><strong>4.信号量(Semaphores)</strong><br>信号量是一种在进程间或同一进程的不同线程间提供同步的机制。它是一个计数器，用于控制对共享资源的访问。当计数器值大于0时，表示资源可用；当值为0时，表示资源被占用。进程在访问共享资源前必须减少（wait）信号量，访问后必须增加（post）信号量。</p><p><strong>5.共享内存(Shared Memory)</strong><br>在 Linux 中，共享内存是进程间通信（IPC）的一种形式。当多个进程需要访问相同的数据时，使用共享内存是一种高效的方式。它允许两个或多个进程访问同一个物理内存区域，这使得数据传输不需要通过内核空间，从而提高了通信效率。</p><p><strong>6.消息队列 (Message Queues)</strong></p><p>消息队列是一种允许一个或多个进程向其写入消息，并由一个或多个进程读取消息的 IPC 机制。每条消息都由一个消息队列标识符（ID）识别， 且可以携带一个特定的类型。消息队列允许不同进程非阻塞地发送和接收记录或数据块，这些记录可以是不同类型和大小的。</p><p><strong>7.套接字 (Sockets)</strong></p><p>套接字是一种在不同进程间进行数据交换的通信机制。在 Linux 中，套接字可以用于同一台机器上的进程间通信（IPC）或不同机器上的网络通信。套接字支持多种通信协议，最常见的是TCP（可靠的、连接导向的协议）和UDP（无连接的、不可靠的协议）。</p><h2 id="七、常用指令"><a href="#七、常用指令" class="headerlink" title="七、常用指令"></a>七、常用指令</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><br>uname <span class="hljs-operator">-</span>m <span class="hljs-comment">/*查看系统架构*/</span><br>lscpu <span class="hljs-comment">/*查看更多CPU情况*/</span><br><br>tar <span class="hljs-operator">-</span>vxf [xxx.tar.gz压缩包]<br>mv [现在的位置] [将要移动的位置]<br><br>pip list <span class="hljs-comment">/*罗列所有的安装包*/</span><br><br>make clean  <span class="hljs-comment">/*清理编译*/</span><br>make <span class="hljs-operator">&amp;&amp;</span> make install  <span class="hljs-comment">/*开始编译*/</span><br><br>cp  <span class="hljs-operator">-</span>r <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/include/</span>vod_sdk<span class="hljs-operator">/</span> <span class="hljs-regexp">/usr/</span>include<span class="hljs-regexp">/vod_sdk/</span>  <span class="hljs-comment">/*复制文件夹到另一个文件夹上*/</span><br><br>sudo apt<span class="hljs-operator">-</span><span class="hljs-keyword">get</span> autoremove xxx  <span class="hljs-comment">/*卸载*/</span><br></code></pre></td></tr></table></figure><p>常用指令汇总：<a href="https://developer.aliyun.com/article/1561151?spm=a2c6h.12873639.article-detail.33.657a1be0lxiKr4&scm=20140722.ID_community@@article@@1561151._.ID_community@@article@@1561151-OR_rec-V_1-RL_community@@article@@1457993">linux 常用命令【编程必备】-阿里云开发者社区 (aliyun.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
